@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.mlab</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/mlab.py">/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/mlab.py</a></font></td></tr></table>
    <p><tt>Numerical&nbsp;python&nbsp;functions&nbsp;written&nbsp;for&nbsp;compatability&nbsp;with&nbsp;matlab(TM)<br>
commands&nbsp;with&nbsp;the&nbsp;same&nbsp;names.<br>
&nbsp;<br>
&nbsp;&nbsp;Matlab(TM)&nbsp;compatible&nbsp;functions:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;cohere&nbsp;-&nbsp;Coherence&nbsp;(normalized&nbsp;cross&nbsp;spectral&nbsp;density)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;csd&nbsp;-&nbsp;Cross&nbsp;spectral&nbsp;density&nbsp;uing&nbsp;Welch's&nbsp;average&nbsp;periodogram<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;detrend&nbsp;--&nbsp;Remove&nbsp;the&nbsp;mean&nbsp;or&nbsp;best&nbsp;fit&nbsp;line&nbsp;from&nbsp;an&nbsp;array<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;find&nbsp;-&nbsp;Return&nbsp;the&nbsp;indices&nbsp;where&nbsp;some&nbsp;condition&nbsp;is&nbsp;true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numpy.nonzero&nbsp;is&nbsp;similar&nbsp;but&nbsp;more&nbsp;general.<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;prctile&nbsp;-&nbsp;find&nbsp;the&nbsp;percentiles&nbsp;of&nbsp;a&nbsp;sequence<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;prepca&nbsp;-&nbsp;Principal&nbsp;Component&nbsp;Analysis<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;psd&nbsp;-&nbsp;Power&nbsp;spectral&nbsp;density&nbsp;uing&nbsp;Welch's&nbsp;average&nbsp;periodogram<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;rk4&nbsp;-&nbsp;A&nbsp;4th&nbsp;order&nbsp;runge&nbsp;kutta&nbsp;integrator&nbsp;for&nbsp;1D&nbsp;or&nbsp;ND&nbsp;systems<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;The&nbsp;following&nbsp;are&nbsp;deprecated;&nbsp;please&nbsp;import&nbsp;directly&nbsp;from&nbsp;numpy<br>
&nbsp;&nbsp;(with&nbsp;care--function&nbsp;signatures&nbsp;may&nbsp;differ):<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;conv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;convolution&nbsp;&nbsp;(numpy.convolve)<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;corrcoef&nbsp;-&nbsp;The&nbsp;matrix&nbsp;of&nbsp;correlation&nbsp;coefficients<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;hist&nbsp;--&nbsp;Histogram&nbsp;(numpy.histogram)<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;linspace&nbsp;--&nbsp;Linear&nbsp;spaced&nbsp;array&nbsp;from&nbsp;min&nbsp;to&nbsp;max<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;meshgrid<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;polyfit&nbsp;-&nbsp;least&nbsp;squares&nbsp;best&nbsp;polynomial&nbsp;fit&nbsp;of&nbsp;x&nbsp;to&nbsp;y<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;polyval&nbsp;-&nbsp;evaluate&nbsp;a&nbsp;vector&nbsp;for&nbsp;a&nbsp;vector&nbsp;of&nbsp;polynomial&nbsp;coeffs<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;trapz&nbsp;-&nbsp;trapeziodal&nbsp;integration&nbsp;(<a href="#-trapz">trapz</a>(x,y)&nbsp;-&gt;&nbsp;numpy.<a href="#-trapz">trapz</a>(y,x))<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;vander&nbsp;-&nbsp;the&nbsp;Vandermonde&nbsp;matrix<br>
&nbsp;<br>
&nbsp;&nbsp;Functions&nbsp;that&nbsp;don't&nbsp;exist&nbsp;in&nbsp;matlab(TM),&nbsp;but&nbsp;are&nbsp;useful&nbsp;anyway:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;cohere_pairs&nbsp;-&nbsp;Coherence&nbsp;over&nbsp;all&nbsp;pairs.&nbsp;&nbsp;This&nbsp;is&nbsp;not&nbsp;a&nbsp;matlab<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function,&nbsp;but&nbsp;we&nbsp;compute&nbsp;coherence&nbsp;a&nbsp;lot&nbsp;in&nbsp;my&nbsp;lab,&nbsp;and&nbsp;we<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compute&nbsp;it&nbsp;for&nbsp;a&nbsp;lot&nbsp;of&nbsp;pairs.&nbsp;&nbsp;This&nbsp;function&nbsp;is&nbsp;optimized&nbsp;to&nbsp;do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this&nbsp;efficiently&nbsp;by&nbsp;caching&nbsp;the&nbsp;direct&nbsp;FFTs.<br>
&nbsp;<br>
=&nbsp;record&nbsp;array&nbsp;helper&nbsp;functions&nbsp;=<br>
&nbsp;&nbsp;&nbsp;*&nbsp;rec2txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;pretty&nbsp;print&nbsp;a&nbsp;record&nbsp;array<br>
&nbsp;&nbsp;&nbsp;*&nbsp;rec2csv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;store&nbsp;record&nbsp;array&nbsp;in&nbsp;CSV&nbsp;file<br>
&nbsp;&nbsp;&nbsp;*&nbsp;csv2rec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;import&nbsp;record&nbsp;array&nbsp;from&nbsp;CSV&nbsp;file&nbsp;with&nbsp;type&nbsp;inspection<br>
&nbsp;&nbsp;&nbsp;*&nbsp;rec_append_field&nbsp;:&nbsp;add&nbsp;a&nbsp;field/array&nbsp;to&nbsp;record&nbsp;array<br>
&nbsp;&nbsp;&nbsp;*&nbsp;rec_drop_fields&nbsp;&nbsp;:&nbsp;drop&nbsp;fields&nbsp;from&nbsp;record&nbsp;array<br>
&nbsp;&nbsp;&nbsp;*&nbsp;rec_join&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;join&nbsp;two&nbsp;record&nbsp;arrays&nbsp;on&nbsp;sequence&nbsp;of&nbsp;fields<br>
&nbsp;&nbsp;&nbsp;*&nbsp;rec_groupby&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;summarize&nbsp;data&nbsp;by&nbsp;groups&nbsp;(similar&nbsp;to&nbsp;SQL&nbsp;GROUP&nbsp;BY)<br>
&nbsp;&nbsp;&nbsp;*&nbsp;rec_summarize&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;helper&nbsp;code&nbsp;to&nbsp;filter&nbsp;rec&nbsp;array&nbsp;fields&nbsp;into&nbsp;new&nbsp;fields<br>
&nbsp;<br>
For&nbsp;the&nbsp;rec&nbsp;viewer&nbsp;functions(e&nbsp;rec2csv),&nbsp;there&nbsp;are&nbsp;a&nbsp;bunch&nbsp;of&nbsp;Format<br>
objects&nbsp;you&nbsp;can&nbsp;pass&nbsp;into&nbsp;the&nbsp;functions&nbsp;that&nbsp;will&nbsp;do&nbsp;things&nbsp;like&nbsp;color<br>
negative&nbsp;values&nbsp;red,&nbsp;set&nbsp;percent&nbsp;formatting&nbsp;and&nbsp;scaling,&nbsp;etc.<br>
&nbsp;<br>
&nbsp;<br>
Example&nbsp;usage:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;<a href="#-csv2rec">csv2rec</a>('somefile.csv',&nbsp;checkrows=0)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;formatd&nbsp;=&nbsp;dict(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weight&nbsp;=&nbsp;<a href="#FormatFloat">FormatFloat</a>(2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;change&nbsp;=&nbsp;<a href="#FormatPercent">FormatPercent</a>(2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost&nbsp;&nbsp;&nbsp;=&nbsp;<a href="#FormatThousands">FormatThousands</a>(2),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;rec2excel(r,&nbsp;'test.xls',&nbsp;formatd=formatd)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#-rec2csv">rec2csv</a>(r,&nbsp;'test.csv',&nbsp;formatd=formatd)<br>
&nbsp;&nbsp;&nbsp;&nbsp;scroll&nbsp;=&nbsp;rec2gtk(r,&nbsp;formatd=formatd)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;win&nbsp;=&nbsp;gtk.Window()<br>
&nbsp;&nbsp;&nbsp;&nbsp;win.set_size_request(600,800)<br>
&nbsp;&nbsp;&nbsp;&nbsp;win.add(scroll)<br>
&nbsp;&nbsp;&nbsp;&nbsp;win.show_all()<br>
&nbsp;&nbsp;&nbsp;&nbsp;gtk.main()</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib.cbook.html">matplotlib.cbook</a><br>
<a href="copy.html">copy</a><br>
<a href="csv.html">csv</a><br>
</td><td width="25%" valign=top><a href="math.html">math</a><br>
<a href="numpy.html">numpy</a><br>
<a href="matplotlib.nxutils.html">matplotlib.nxutils</a><br>
</td><td width="25%" valign=top><a href="operator.html">operator</a><br>
<a href="os.html">os</a><br>
<a href="warnings.html">warnings</a><br>
</td><td width="25%" valign=top></td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FIFOBuffer">FIFOBuffer</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatObj">FormatObj</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatBool">FormatBool</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatDate">FormatDate</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatDatetime">FormatDatetime</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatMillions">FormatMillions</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatPercent">FormatPercent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatThousands">FormatThousands</a>
</font></dt></dl>
</dd>
</dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatInt">FormatInt</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.mlab.html#FormatString">FormatString</a>
</font></dt></dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FIFOBuffer">class <strong>FIFOBuffer</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;FIFO&nbsp;queue&nbsp;to&nbsp;hold&nbsp;incoming&nbsp;x,&nbsp;y&nbsp;data&nbsp;in&nbsp;a&nbsp;rotating&nbsp;buffer&nbsp;using<br>
numpy&nbsp;arrays&nbsp;under&nbsp;the&nbsp;hood.&nbsp;&nbsp;It&nbsp;is&nbsp;assumed&nbsp;that&nbsp;you&nbsp;will&nbsp;call<br>
asarrays&nbsp;much&nbsp;less&nbsp;frequently&nbsp;than&nbsp;you&nbsp;add&nbsp;data&nbsp;to&nbsp;the&nbsp;queue&nbsp;--<br>
otherwise&nbsp;another&nbsp;data&nbsp;structure&nbsp;will&nbsp;be&nbsp;faster<br>
&nbsp;<br>
This&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;support&nbsp;plots&nbsp;where&nbsp;data&nbsp;is&nbsp;added&nbsp;from&nbsp;a&nbsp;real<br>
time&nbsp;feed&nbsp;and&nbsp;the&nbsp;plot&nbsp;object&nbsp;wants&nbsp;grab&nbsp;data&nbsp;from&nbsp;the&nbsp;buffer&nbsp;and<br>
plot&nbsp;it&nbsp;to&nbsp;screen&nbsp;less&nbsp;freqeuently&nbsp;than&nbsp;the&nbsp;incoming<br>
&nbsp;<br>
If&nbsp;you&nbsp;set&nbsp;the&nbsp;dataLim&nbsp;attr&nbsp;to&nbsp;a&nbsp;matplotlib&nbsp;BBox&nbsp;(eg&nbsp;ax.dataLim),<br>
the&nbsp;dataLim&nbsp;will&nbsp;be&nbsp;updated&nbsp;as&nbsp;new&nbsp;data&nbsp;come&nbsp;in<br>
&nbsp;<br>
TODI:&nbsp;add&nbsp;a&nbsp;grow&nbsp;method&nbsp;that&nbsp;will&nbsp;extend&nbsp;nmax<br>
&nbsp;<br>
mlab&nbsp;seems&nbsp;like&nbsp;the&nbsp;wrong&nbsp;place&nbsp;for&nbsp;this&nbsp;class.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FIFOBuffer-__init__"><strong>__init__</strong></a>(self, nmax)</dt><dd><tt>buffer&nbsp;up&nbsp;to&nbsp;nmax&nbsp;points</tt></dd></dl>

<dl><dt><a name="FIFOBuffer-add"><strong>add</strong></a>(self, x, y)</dt><dd><tt>add&nbsp;scalar&nbsp;x&nbsp;and&nbsp;y&nbsp;to&nbsp;the&nbsp;queue</tt></dd></dl>

<dl><dt><a name="FIFOBuffer-asarrays"><strong>asarrays</strong></a>(self)</dt><dd><tt>return&nbsp;x&nbsp;and&nbsp;y&nbsp;as&nbsp;arrays;&nbsp;their&nbsp;length&nbsp;will&nbsp;be&nbsp;the&nbsp;len&nbsp;of&nbsp;data<br>
added&nbsp;or&nbsp;nmax</tt></dd></dl>

<dl><dt><a name="FIFOBuffer-last"><strong>last</strong></a>(self)</dt><dd><tt>get&nbsp;the&nbsp;last&nbsp;x,&nbsp;y&nbsp;or&nbsp;None,&nbsp;None&nbsp;if&nbsp;no&nbsp;data&nbsp;set</tt></dd></dl>

<dl><dt><a name="FIFOBuffer-register"><strong>register</strong></a>(self, func, N)</dt><dd><tt>call&nbsp;func&nbsp;everytime&nbsp;N&nbsp;events&nbsp;are&nbsp;passed;&nbsp;func&nbsp;signature&nbsp;is&nbsp;func(fifo)</tt></dd></dl>

<dl><dt><a name="FIFOBuffer-update_datalim_to_current"><strong>update_datalim_to_current</strong></a>(self)</dt><dd><tt>update&nbsp;the&nbsp;datalim&nbsp;in&nbsp;the&nbsp;current&nbsp;data&nbsp;in&nbsp;the&nbsp;fifo</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatBool">class <strong>FormatBool</strong></a>(<a href="matplotlib.mlab.html#FormatObj">FormatObj</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FormatBool-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatBool-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatObj">FormatObj</a>:<br>
<dl><dt><a name="FormatBool-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatDate">class <strong>FormatDate</strong></a>(<a href="matplotlib.mlab.html#FormatObj">FormatObj</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FormatDate-__init__"><strong>__init__</strong></a>(self, fmt)</dt></dl>

<dl><dt><a name="FormatDate-fromstr"><strong>fromstr</strong></a>(self, x)</dt></dl>

<dl><dt><a name="FormatDate-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatObj">FormatObj</a>:<br>
<dl><dt><a name="FormatDate-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatDatetime">class <strong>FormatDatetime</strong></a>(<a href="matplotlib.mlab.html#FormatDate">FormatDate</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.mlab.html#FormatDatetime">FormatDatetime</a></dd>
<dd><a href="matplotlib.mlab.html#FormatDate">FormatDate</a></dd>
<dd><a href="matplotlib.mlab.html#FormatObj">FormatObj</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="FormatDatetime-__init__"><strong>__init__</strong></a>(self, fmt<font color="#909090">='%Y-%m-%d %H:%M:%S'</font>)</dt></dl>

<dl><dt><a name="FormatDatetime-fromstr"><strong>fromstr</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatDate">FormatDate</a>:<br>
<dl><dt><a name="FormatDatetime-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatObj">FormatObj</a>:<br>
<dl><dt><a name="FormatDatetime-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatFloat">class <strong>FormatFloat</strong></a>(<a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a></dd>
<dd><a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a></dd>
<dd><a href="matplotlib.mlab.html#FormatObj">FormatObj</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="FormatFloat-__init__"><strong>__init__</strong></a>(self, precision<font color="#909090">=4</font>, scale<font color="#909090">=1.0</font>)</dt></dl>

<dl><dt><a name="FormatFloat-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatFloat-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a>:<br>
<dl><dt><a name="FormatFloat-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatFormatStr">class <strong>FormatFormatStr</strong></a>(<a href="matplotlib.mlab.html#FormatObj">FormatObj</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FormatFormatStr-__init__"><strong>__init__</strong></a>(self, fmt)</dt></dl>

<dl><dt><a name="FormatFormatStr-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatObj">FormatObj</a>:<br>
<dl><dt><a name="FormatFormatStr-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatFormatStr-toval"><strong>toval</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatInt">class <strong>FormatInt</strong></a>(<a href="matplotlib.mlab.html#FormatObj">FormatObj</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FormatInt-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatInt-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatObj">FormatObj</a>:<br>
<dl><dt><a name="FormatInt-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatMillions">class <strong>FormatMillions</strong></a>(<a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.mlab.html#FormatMillions">FormatMillions</a></dd>
<dd><a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a></dd>
<dd><a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a></dd>
<dd><a href="matplotlib.mlab.html#FormatObj">FormatObj</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="FormatMillions-__init__"><strong>__init__</strong></a>(self, precision<font color="#909090">=4</font>)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a>:<br>
<dl><dt><a name="FormatMillions-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatMillions-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a>:<br>
<dl><dt><a name="FormatMillions-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatObj">class <strong>FormatObj</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>#&nbsp;a&nbsp;series&nbsp;of&nbsp;classes&nbsp;for&nbsp;describing&nbsp;the&nbsp;format&nbsp;intentions&nbsp;of&nbsp;various&nbsp;rec&nbsp;views<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FormatObj-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatObj-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

<dl><dt><a name="FormatObj-toval"><strong>toval</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatPercent">class <strong>FormatPercent</strong></a>(<a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.mlab.html#FormatPercent">FormatPercent</a></dd>
<dd><a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a></dd>
<dd><a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a></dd>
<dd><a href="matplotlib.mlab.html#FormatObj">FormatObj</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="FormatPercent-__init__"><strong>__init__</strong></a>(self, precision<font color="#909090">=4</font>)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a>:<br>
<dl><dt><a name="FormatPercent-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatPercent-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a>:<br>
<dl><dt><a name="FormatPercent-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatString">class <strong>FormatString</strong></a>(<a href="matplotlib.mlab.html#FormatObj">FormatObj</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FormatString-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatObj">FormatObj</a>:<br>
<dl><dt><a name="FormatString-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatString-toval"><strong>toval</strong></a>(self, x)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FormatThousands">class <strong>FormatThousands</strong></a>(<a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.mlab.html#FormatThousands">FormatThousands</a></dd>
<dd><a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a></dd>
<dd><a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a></dd>
<dd><a href="matplotlib.mlab.html#FormatObj">FormatObj</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="FormatThousands-__init__"><strong>__init__</strong></a>(self, precision<font color="#909090">=4</font>)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatFloat">FormatFloat</a>:<br>
<dl><dt><a name="FormatThousands-fromstr"><strong>fromstr</strong></a>(self, s)</dt></dl>

<dl><dt><a name="FormatThousands-toval"><strong>toval</strong></a>(self, x)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.mlab.html#FormatFormatStr">FormatFormatStr</a>:<br>
<dl><dt><a name="FormatThousands-tostr"><strong>tostr</strong></a>(self, x)</dt></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-amap"><strong>amap</strong></a>(fn, *args)</dt><dd><tt><a href="#-amap">amap</a>(function,&nbsp;sequence[,&nbsp;sequence,&nbsp;...])&nbsp;-&gt;&nbsp;array.<br>
&nbsp;<br>
Works&nbsp;like&nbsp;map(),&nbsp;but&nbsp;it&nbsp;returns&nbsp;an&nbsp;array.&nbsp;&nbsp;This&nbsp;is&nbsp;just&nbsp;a&nbsp;convenient<br>
shorthand&nbsp;for&nbsp;numpy.array(map(...))</tt></dd></dl>
 <dl><dt><a name="-approx_real"><strong>approx_real</strong></a>(x)</dt><dd><tt><a href="#-approx_real">approx_real</a>(x)&nbsp;:&nbsp;returns&nbsp;x.real&nbsp;if&nbsp;|x.imag|&nbsp;&lt;&nbsp;|x.real|&nbsp;*&nbsp;_eps_approx.<br>
This&nbsp;function&nbsp;is&nbsp;needed&nbsp;by&nbsp;sqrtm&nbsp;and&nbsp;allows&nbsp;further&nbsp;functions.</tt></dd></dl>
 <dl><dt><a name="-base_repr"><strong>base_repr</strong></a>(number, base<font color="#909090">=2</font>, padding<font color="#909090">=0</font>)</dt><dd><tt>Return&nbsp;the&nbsp;representation&nbsp;of&nbsp;a&nbsp;number&nbsp;in&nbsp;any&nbsp;given&nbsp;base.</tt></dd></dl>
 <dl><dt><a name="-binary_repr"><strong>binary_repr</strong></a>(number, max_length<font color="#909090">=1025</font>)</dt><dd><tt>Return&nbsp;the&nbsp;binary&nbsp;representation&nbsp;of&nbsp;the&nbsp;input&nbsp;number&nbsp;as&nbsp;a&nbsp;string.<br>
&nbsp;<br>
This&nbsp;is&nbsp;more&nbsp;efficient&nbsp;than&nbsp;using&nbsp;base_repr&nbsp;with&nbsp;base&nbsp;2.<br>
&nbsp;<br>
Increase&nbsp;the&nbsp;value&nbsp;of&nbsp;max_length&nbsp;for&nbsp;very&nbsp;large&nbsp;numbers.&nbsp;Note&nbsp;that&nbsp;on<br>
32-bit&nbsp;machines,&nbsp;2**1023&nbsp;is&nbsp;the&nbsp;largest&nbsp;integer&nbsp;power&nbsp;of&nbsp;2&nbsp;which&nbsp;can&nbsp;be<br>
converted&nbsp;to&nbsp;a&nbsp;Python&nbsp;float.</tt></dd></dl>
 <dl><dt><a name="-bivariate_normal"><strong>bivariate_normal</strong></a>(X, Y, sigmax<font color="#909090">=1.0</font>, sigmay<font color="#909090">=1.0</font>, mux<font color="#909090">=0.0</font>, muy<font color="#909090">=0.0</font>, sigmaxy<font color="#909090">=0.0</font>)</dt><dd><tt>Bivariate&nbsp;gaussan&nbsp;distribution&nbsp;for&nbsp;equal&nbsp;shape&nbsp;X,&nbsp;Y<br>
&nbsp;<br>
<a href="http://mathworld.wolfram.com/BivariateNormalDistribution.html">http://mathworld.wolfram.com/BivariateNormalDistribution.html</a></tt></dd></dl>
 <dl><dt><a name="-center_matrix"><strong>center_matrix</strong></a>(M, dim<font color="#909090">=0</font>)</dt><dd><tt>Return&nbsp;the&nbsp;matrix&nbsp;M&nbsp;with&nbsp;each&nbsp;row&nbsp;having&nbsp;zero&nbsp;mean&nbsp;and&nbsp;unit&nbsp;std<br>
&nbsp;<br>
if&nbsp;dim=1&nbsp;operate&nbsp;on&nbsp;columns&nbsp;instead&nbsp;of&nbsp;rows.&nbsp;&nbsp;(dim&nbsp;is&nbsp;opposite<br>
to&nbsp;the&nbsp;numpy&nbsp;axis&nbsp;kwarg.)</tt></dd></dl>
 <dl><dt><a name="-cohere"><strong>cohere</strong></a>(x, y, NFFT<font color="#909090">=256</font>, Fs<font color="#909090">=2</font>, detrend<font color="#909090">=&lt;function detrend_none at 0xecbed8&gt;</font>, window<font color="#909090">=&lt;function window_hanning at 0xecb578&gt;</font>, noverlap<font color="#909090">=0</font>)</dt><dd><tt>The&nbsp;coherence&nbsp;between&nbsp;x&nbsp;and&nbsp;y.&nbsp;&nbsp;Coherence&nbsp;is&nbsp;the&nbsp;normalized<br>
cross&nbsp;spectral&nbsp;density<br>
&nbsp;<br>
Cxy&nbsp;=&nbsp;|Pxy|^2/(Pxx*Pyy)<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;is&nbsp;(Cxy,&nbsp;f),&nbsp;where&nbsp;f&nbsp;are&nbsp;the&nbsp;frequencies&nbsp;of&nbsp;the<br>
coherence&nbsp;vector.&nbsp;&nbsp;See&nbsp;the&nbsp;docs&nbsp;for&nbsp;psd&nbsp;and&nbsp;csd&nbsp;for&nbsp;information<br>
about&nbsp;the&nbsp;function&nbsp;arguments&nbsp;NFFT,&nbsp;detrend,&nbsp;window,&nbsp;noverlap,&nbsp;as<br>
well&nbsp;as&nbsp;the&nbsp;methods&nbsp;used&nbsp;to&nbsp;compute&nbsp;Pxy,&nbsp;Pxx&nbsp;and&nbsp;Pyy.<br>
&nbsp;<br>
Returns&nbsp;the&nbsp;tuple&nbsp;Cxy,&nbsp;freqs</tt></dd></dl>
 <dl><dt><a name="-cohere_pairs"><strong>cohere_pairs</strong></a>(X, ij, NFFT<font color="#909090">=256</font>, Fs<font color="#909090">=2</font>, detrend<font color="#909090">=&lt;function detrend_none at 0xecbed8&gt;</font>, window<font color="#909090">=&lt;function window_hanning at 0xecb578&gt;</font>, noverlap<font color="#909090">=0</font>, preferSpeedOverMemory<font color="#909090">=True</font>, progressCallback<font color="#909090">=&lt;function donothing_callback at 0xecf410&gt;</font>, returnPxx<font color="#909090">=False</font>)</dt><dd><tt>Cxy,&nbsp;Phase,&nbsp;freqs&nbsp;=&nbsp;<a href="#-cohere_pairs">cohere_pairs</a>(&nbsp;X,&nbsp;ij,&nbsp;...)<br>
&nbsp;<br>
Compute&nbsp;the&nbsp;coherence&nbsp;for&nbsp;all&nbsp;pairs&nbsp;in&nbsp;ij.&nbsp;&nbsp;X&nbsp;is&nbsp;a<br>
numSamples,numCols&nbsp;numpy&nbsp;array.&nbsp;&nbsp;ij&nbsp;is&nbsp;a&nbsp;list&nbsp;of&nbsp;tuples&nbsp;(i,j).<br>
Each&nbsp;tuple&nbsp;is&nbsp;a&nbsp;pair&nbsp;of&nbsp;indexes&nbsp;into&nbsp;the&nbsp;columns&nbsp;of&nbsp;X&nbsp;for&nbsp;which<br>
you&nbsp;want&nbsp;to&nbsp;compute&nbsp;coherence.&nbsp;&nbsp;For&nbsp;example,&nbsp;if&nbsp;X&nbsp;has&nbsp;64&nbsp;columns,<br>
and&nbsp;you&nbsp;want&nbsp;to&nbsp;compute&nbsp;all&nbsp;nonredundant&nbsp;pairs,&nbsp;define&nbsp;ij&nbsp;as<br>
&nbsp;<br>
&nbsp;&nbsp;ij&nbsp;=&nbsp;[]<br>
&nbsp;&nbsp;for&nbsp;i&nbsp;in&nbsp;range(64):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;in&nbsp;range(i+1,64):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ij.append(&nbsp;(i,j)&nbsp;)<br>
&nbsp;<br>
The&nbsp;other&nbsp;function&nbsp;arguments,&nbsp;except&nbsp;for&nbsp;'preferSpeedOverMemory'<br>
(see&nbsp;below),&nbsp;are&nbsp;explained&nbsp;in&nbsp;the&nbsp;help&nbsp;string&nbsp;of&nbsp;'psd'.<br>
&nbsp;<br>
Return&nbsp;value&nbsp;is&nbsp;a&nbsp;tuple&nbsp;(Cxy,&nbsp;Phase,&nbsp;freqs).<br>
&nbsp;<br>
&nbsp;&nbsp;Cxy&nbsp;--&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;(i,j)&nbsp;tuples&nbsp;-&gt;&nbsp;coherence&nbsp;vector&nbsp;for&nbsp;that<br>
&nbsp;&nbsp;&nbsp;&nbsp;pair.&nbsp;&nbsp;Ie,&nbsp;Cxy[(i,j)&nbsp;=&nbsp;<a href="#-cohere">cohere</a>(X[:,i],&nbsp;X[:,j]).&nbsp;&nbsp;Number&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;dictionary&nbsp;keys&nbsp;is&nbsp;len(ij)<br>
&nbsp;<br>
&nbsp;&nbsp;Phase&nbsp;--&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;phases&nbsp;of&nbsp;the&nbsp;cross&nbsp;spectral&nbsp;density&nbsp;at<br>
&nbsp;&nbsp;&nbsp;&nbsp;each&nbsp;frequency&nbsp;for&nbsp;each&nbsp;pair.&nbsp;&nbsp;keys&nbsp;are&nbsp;(i,j).<br>
&nbsp;<br>
&nbsp;&nbsp;freqs&nbsp;--&nbsp;a&nbsp;vector&nbsp;of&nbsp;frequencies,&nbsp;equal&nbsp;in&nbsp;length&nbsp;to&nbsp;either&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;coherence&nbsp;or&nbsp;phase&nbsp;vectors&nbsp;for&nbsp;any&nbsp;i,j&nbsp;key.&nbsp;&nbsp;Eg,&nbsp;to&nbsp;make&nbsp;a&nbsp;coherence<br>
&nbsp;&nbsp;&nbsp;&nbsp;Bode&nbsp;plot:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subplot(211)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot(&nbsp;freqs,&nbsp;Cxy[(12,19)])<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subplot(212)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot(&nbsp;freqs,&nbsp;Phase[(12,19)])<br>
&nbsp;<br>
For&nbsp;a&nbsp;large&nbsp;number&nbsp;of&nbsp;pairs,&nbsp;cohere_pairs&nbsp;can&nbsp;be&nbsp;much&nbsp;more<br>
efficient&nbsp;than&nbsp;just&nbsp;calling&nbsp;cohere&nbsp;for&nbsp;each&nbsp;pair,&nbsp;because&nbsp;it<br>
caches&nbsp;most&nbsp;of&nbsp;the&nbsp;intensive&nbsp;computations.&nbsp;&nbsp;If&nbsp;N&nbsp;is&nbsp;the&nbsp;number&nbsp;of<br>
pairs,&nbsp;this&nbsp;function&nbsp;is&nbsp;O(N)&nbsp;for&nbsp;most&nbsp;of&nbsp;the&nbsp;heavy&nbsp;lifting,<br>
whereas&nbsp;calling&nbsp;cohere&nbsp;for&nbsp;each&nbsp;pair&nbsp;is&nbsp;O(N^2).&nbsp;&nbsp;However,&nbsp;because<br>
of&nbsp;the&nbsp;caching,&nbsp;it&nbsp;is&nbsp;also&nbsp;more&nbsp;memory&nbsp;intensive,&nbsp;making&nbsp;2<br>
additional&nbsp;complex&nbsp;arrays&nbsp;with&nbsp;approximately&nbsp;the&nbsp;same&nbsp;number&nbsp;of<br>
elements&nbsp;as&nbsp;X.<br>
&nbsp;<br>
The&nbsp;parameter&nbsp;'preferSpeedOverMemory',&nbsp;if&nbsp;false,&nbsp;limits&nbsp;the<br>
caching&nbsp;by&nbsp;only&nbsp;making&nbsp;one,&nbsp;rather&nbsp;than&nbsp;two,&nbsp;complex&nbsp;cache&nbsp;arrays.<br>
This&nbsp;is&nbsp;useful&nbsp;if&nbsp;memory&nbsp;becomes&nbsp;critical.&nbsp;&nbsp;Even&nbsp;when<br>
preferSpeedOverMemory&nbsp;is&nbsp;false,&nbsp;cohere_pairs&nbsp;will&nbsp;still&nbsp;give<br>
significant&nbsp;performace&nbsp;gains&nbsp;over&nbsp;calling&nbsp;cohere&nbsp;for&nbsp;each&nbsp;pair,<br>
and&nbsp;will&nbsp;use&nbsp;subtantially&nbsp;less&nbsp;memory&nbsp;than&nbsp;if<br>
preferSpeedOverMemory&nbsp;is&nbsp;true.&nbsp;&nbsp;In&nbsp;my&nbsp;tests&nbsp;with&nbsp;a&nbsp;43000,64&nbsp;array<br>
over&nbsp;all&nbsp;nonredundant&nbsp;pairs,&nbsp;preferSpeedOverMemory=1&nbsp;delivered&nbsp;a<br>
33%&nbsp;performace&nbsp;boost&nbsp;on&nbsp;a&nbsp;1.7GHZ&nbsp;Athlon&nbsp;with&nbsp;512MB&nbsp;RAM&nbsp;compared<br>
with&nbsp;preferSpeedOverMemory=0.&nbsp;&nbsp;But&nbsp;both&nbsp;solutions&nbsp;were&nbsp;more&nbsp;than<br>
10x&nbsp;faster&nbsp;than&nbsp;naievly&nbsp;crunching&nbsp;all&nbsp;possible&nbsp;pairs&nbsp;through<br>
cohere.<br>
&nbsp;<br>
See&nbsp;test/cohere_pairs_test.py&nbsp;in&nbsp;the&nbsp;src&nbsp;tree&nbsp;for&nbsp;an&nbsp;example<br>
script&nbsp;that&nbsp;shows&nbsp;that&nbsp;this&nbsp;cohere_pairs&nbsp;and&nbsp;cohere&nbsp;give&nbsp;the&nbsp;same<br>
results&nbsp;for&nbsp;a&nbsp;given&nbsp;pair.</tt></dd></dl>
 <dl><dt><a name="-conv"><strong>conv</strong></a>(x, y, mode<font color="#909090">=2</font>)</dt><dd><tt>convolve&nbsp;x&nbsp;with&nbsp;y</tt></dd></dl>
 <dl><dt><a name="-corrcoef"><strong>corrcoef</strong></a>(*args)</dt><dd><tt><a href="#-corrcoef">corrcoef</a>(X)&nbsp;where&nbsp;X&nbsp;is&nbsp;a&nbsp;matrix&nbsp;returns&nbsp;a&nbsp;matrix&nbsp;of&nbsp;correlation<br>
coefficients&nbsp;for&nbsp;the&nbsp;columns&nbsp;of&nbsp;X.<br>
&nbsp;<br>
<a href="#-corrcoef">corrcoef</a>(x,y)&nbsp;where&nbsp;x&nbsp;and&nbsp;y&nbsp;are&nbsp;vectors&nbsp;returns&nbsp;the&nbsp;matrix&nbsp;of<br>
correlation&nbsp;coefficients&nbsp;for&nbsp;x&nbsp;and&nbsp;y.<br>
&nbsp;<br>
Numpy&nbsp;arrays&nbsp;can&nbsp;be&nbsp;real&nbsp;or&nbsp;complex<br>
&nbsp;<br>
The&nbsp;correlation&nbsp;matrix&nbsp;is&nbsp;defined&nbsp;from&nbsp;the&nbsp;covariance&nbsp;matrix&nbsp;C&nbsp;as<br>
&nbsp;<br>
r(i,j)&nbsp;=&nbsp;C[i,j]&nbsp;/&nbsp;sqrt(C[i,i]*C[j,j])</tt></dd></dl>
 <dl><dt><a name="-csd"><strong>csd</strong></a>(x, y, NFFT<font color="#909090">=256</font>, Fs<font color="#909090">=2</font>, detrend<font color="#909090">=&lt;function detrend_none at 0xecbed8&gt;</font>, window<font color="#909090">=&lt;function window_hanning at 0xecb578&gt;</font>, noverlap<font color="#909090">=0</font>)</dt><dd><tt>The&nbsp;cross&nbsp;spectral&nbsp;density&nbsp;Pxy&nbsp;by&nbsp;Welches&nbsp;average&nbsp;periodogram<br>
method.&nbsp;&nbsp;The&nbsp;vectors&nbsp;x&nbsp;and&nbsp;y&nbsp;are&nbsp;divided&nbsp;into&nbsp;NFFT&nbsp;length<br>
segments.&nbsp;&nbsp;Each&nbsp;segment&nbsp;is&nbsp;detrended&nbsp;by&nbsp;function&nbsp;detrend&nbsp;and<br>
windowed&nbsp;by&nbsp;function&nbsp;window.&nbsp;&nbsp;noverlap&nbsp;gives&nbsp;the&nbsp;length&nbsp;of&nbsp;the<br>
overlap&nbsp;between&nbsp;segments.&nbsp;&nbsp;The&nbsp;product&nbsp;of&nbsp;the&nbsp;direct&nbsp;FFTs&nbsp;of&nbsp;x&nbsp;and<br>
y&nbsp;are&nbsp;averaged&nbsp;over&nbsp;each&nbsp;segment&nbsp;to&nbsp;compute&nbsp;Pxy,&nbsp;with&nbsp;a&nbsp;scaling&nbsp;to<br>
correct&nbsp;for&nbsp;power&nbsp;loss&nbsp;due&nbsp;to&nbsp;windowing.&nbsp;&nbsp;Fs&nbsp;is&nbsp;the&nbsp;sampling<br>
frequency.<br>
&nbsp;<br>
NFFT&nbsp;must&nbsp;be&nbsp;even;&nbsp;a&nbsp;power&nbsp;of&nbsp;2&nbsp;is&nbsp;most&nbsp;efficient<br>
&nbsp;<br>
window&nbsp;can&nbsp;be&nbsp;a&nbsp;function&nbsp;or&nbsp;a&nbsp;vector&nbsp;of&nbsp;length&nbsp;NFFT.&nbsp;To&nbsp;create<br>
window&nbsp;vectors&nbsp;see&nbsp;numpy.blackman,&nbsp;numpy.hamming,&nbsp;numpy.bartlett,<br>
scipy.signal,&nbsp;scipy.signal.get_window&nbsp;etc.<br>
&nbsp;<br>
Returns&nbsp;the&nbsp;tuple&nbsp;Pxy,&nbsp;freqs<br>
&nbsp;<br>
Refs:<br>
&nbsp;&nbsp;Bendat&nbsp;&amp;&nbsp;Piersol&nbsp;--&nbsp;Random&nbsp;Data:&nbsp;Analysis&nbsp;and&nbsp;Measurement<br>
&nbsp;&nbsp;&nbsp;&nbsp;Procedures,&nbsp;John&nbsp;Wiley&nbsp;&amp;&nbsp;Sons&nbsp;(1986)</tt></dd></dl>
 <dl><dt><a name="-csv2rec"><strong>csv2rec</strong></a>(fname, comments<font color="#909090">='#'</font>, skiprows<font color="#909090">=0</font>, checkrows<font color="#909090">=0</font>, delimiter<font color="#909090">=','</font>, converterd<font color="#909090">=None</font>, names<font color="#909090">=None</font>, missing<font color="#909090">=''</font>, missingd<font color="#909090">=None</font>)</dt><dd><tt>Load&nbsp;data&nbsp;from&nbsp;comma/space/tab&nbsp;delimited&nbsp;file&nbsp;in&nbsp;fname&nbsp;into&nbsp;a<br>
numpy&nbsp;(m)record&nbsp;array&nbsp;and&nbsp;return&nbsp;the&nbsp;record&nbsp;array.<br>
&nbsp;<br>
If&nbsp;names&nbsp;is&nbsp;None,&nbsp;a&nbsp;header&nbsp;row&nbsp;is&nbsp;required&nbsp;to&nbsp;automatically&nbsp;assign<br>
the&nbsp;recarray&nbsp;names.&nbsp;&nbsp;The&nbsp;headers&nbsp;will&nbsp;be&nbsp;lower&nbsp;cased,&nbsp;spaces&nbsp;will<br>
be&nbsp;converted&nbsp;to&nbsp;underscores,&nbsp;and&nbsp;illegal&nbsp;attribute&nbsp;name&nbsp;characters<br>
removed.&nbsp;&nbsp;If&nbsp;names&nbsp;is&nbsp;not&nbsp;None,&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;names&nbsp;to&nbsp;use<br>
for&nbsp;the&nbsp;column&nbsp;names.&nbsp;&nbsp;In&nbsp;this&nbsp;case,&nbsp;it&nbsp;is&nbsp;assumed&nbsp;there&nbsp;is&nbsp;no&nbsp;header&nbsp;row.<br>
&nbsp;<br>
&nbsp;<br>
fname&nbsp;-&nbsp;can&nbsp;be&nbsp;a&nbsp;filename&nbsp;or&nbsp;a&nbsp;file&nbsp;handle.&nbsp;&nbsp;Support&nbsp;for&nbsp;gzipped<br>
files&nbsp;is&nbsp;automatic,&nbsp;if&nbsp;the&nbsp;filename&nbsp;ends&nbsp;in&nbsp;.gz<br>
&nbsp;<br>
comments&nbsp;-&nbsp;the&nbsp;character&nbsp;used&nbsp;to&nbsp;indicate&nbsp;the&nbsp;start&nbsp;of&nbsp;a&nbsp;comment<br>
in&nbsp;the&nbsp;file<br>
&nbsp;<br>
skiprows&nbsp;&nbsp;-&nbsp;is&nbsp;the&nbsp;number&nbsp;of&nbsp;rows&nbsp;from&nbsp;the&nbsp;top&nbsp;to&nbsp;skip<br>
&nbsp;<br>
checkrows&nbsp;-&nbsp;is&nbsp;the&nbsp;number&nbsp;of&nbsp;rows&nbsp;to&nbsp;check&nbsp;to&nbsp;validate&nbsp;the&nbsp;column<br>
data&nbsp;type.&nbsp;&nbsp;When&nbsp;set&nbsp;to&nbsp;zero&nbsp;all&nbsp;rows&nbsp;are&nbsp;validated.<br>
&nbsp;<br>
converterd,&nbsp;if&nbsp;not&nbsp;None,&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;mapping&nbsp;column&nbsp;number&nbsp;or<br>
munged&nbsp;column&nbsp;name&nbsp;to&nbsp;a&nbsp;converter&nbsp;function.<br>
&nbsp;<br>
names,&nbsp;if&nbsp;not&nbsp;None,&nbsp;is&nbsp;a&nbsp;list&nbsp;of&nbsp;header&nbsp;names.&nbsp;&nbsp;In&nbsp;this&nbsp;case,&nbsp;no<br>
header&nbsp;will&nbsp;be&nbsp;read&nbsp;from&nbsp;the&nbsp;file<br>
&nbsp;<br>
missingd&nbsp;-&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;mapping&nbsp;munged&nbsp;column&nbsp;names&nbsp;to&nbsp;field&nbsp;values<br>
which&nbsp;signify&nbsp;that&nbsp;the&nbsp;field&nbsp;does&nbsp;not&nbsp;contain&nbsp;actual&nbsp;data&nbsp;and&nbsp;should<br>
be&nbsp;masked,&nbsp;e.g.&nbsp;'0000-00-00'&nbsp;or&nbsp;'unused'<br>
&nbsp;<br>
missing&nbsp;-&nbsp;a&nbsp;string&nbsp;whose&nbsp;value&nbsp;signals&nbsp;a&nbsp;missing&nbsp;field&nbsp;regardless&nbsp;of<br>
the&nbsp;column&nbsp;it&nbsp;appears&nbsp;in,&nbsp;e.g.&nbsp;'unused'<br>
&nbsp;<br>
if&nbsp;no&nbsp;rows&nbsp;are&nbsp;found,&nbsp;None&nbsp;is&nbsp;returned&nbsp;--&nbsp;see&nbsp;examples/loadrec.py</tt></dd></dl>
 <dl><dt><a name="-csvformat_factory"><strong>csvformat_factory</strong></a>(format)</dt></dl>
 <dl><dt><a name="-demean"><strong>demean</strong></a>(x, axis<font color="#909090">=0</font>)</dt><dd><tt>Return&nbsp;x&nbsp;minus&nbsp;its&nbsp;mean&nbsp;along&nbsp;the&nbsp;specified&nbsp;axis</tt></dd></dl>
 <dl><dt><a name="-detrend"><strong>detrend</strong></a>(x, key<font color="#909090">=None</font>)</dt></dl>
 <dl><dt><a name="-detrend_linear"><strong>detrend_linear</strong></a>(y)</dt><dd><tt>Return&nbsp;y&nbsp;minus&nbsp;best&nbsp;fit&nbsp;line;&nbsp;'linear'&nbsp;detrending</tt></dd></dl>
 <dl><dt><a name="-detrend_mean"><strong>detrend_mean</strong></a>(x)</dt><dd><tt>Return&nbsp;x&nbsp;minus&nbsp;the&nbsp;<a href="#-mean">mean</a>(x)</tt></dd></dl>
 <dl><dt><a name="-detrend_none"><strong>detrend_none</strong></a>(x)</dt><dd><tt>Return&nbsp;x:&nbsp;no&nbsp;detrending</tt></dd></dl>
 <dl><dt><a name="-diagonal_matrix"><strong>diagonal_matrix</strong></a>(diag)</dt><dd><tt>Return&nbsp;square&nbsp;diagonal&nbsp;matrix&nbsp;whose&nbsp;non-zero&nbsp;elements&nbsp;are&nbsp;given&nbsp;by&nbsp;the<br>
input&nbsp;array.</tt></dd></dl>
 <dl><dt><a name="-dist"><strong>dist</strong></a>(x, y)</dt><dd><tt>return&nbsp;the&nbsp;distance&nbsp;between&nbsp;two&nbsp;points</tt></dd></dl>
 <dl><dt><a name="-dist_point_to_segment"><strong>dist_point_to_segment</strong></a>(p, s0, s1)</dt><dd><tt>get&nbsp;the&nbsp;distance&nbsp;of&nbsp;a&nbsp;point&nbsp;to&nbsp;a&nbsp;segment.<br>
&nbsp;<br>
p,&nbsp;s0,&nbsp;s1&nbsp;are&nbsp;xy&nbsp;sequences<br>
&nbsp;<br>
This&nbsp;algorithm&nbsp;from<br>
<a href="http://softsurfer.com/Archive/algorithm_0102/algorithm_0102.htm#Distance%20to%20Ray%20or%20Segment">http://softsurfer.com/Archive/algorithm_0102/algorithm_0102.htm#Distance%20to%20Ray%20or%20Segment</a></tt></dd></dl>
 <dl><dt><a name="-donothing_callback"><strong>donothing_callback</strong></a>(*args)</dt></dl>
 <dl><dt><a name="-entropy"><strong>entropy</strong></a>(y, bins)</dt><dd><tt>Return&nbsp;the&nbsp;entropy&nbsp;of&nbsp;the&nbsp;data&nbsp;in&nbsp;y<br>
&nbsp;<br>
\sum&nbsp;p_i&nbsp;<a href="#-log2">log2</a>(p_i)&nbsp;where&nbsp;p_i&nbsp;is&nbsp;the&nbsp;probability&nbsp;of&nbsp;observing&nbsp;y&nbsp;in<br>
the&nbsp;ith&nbsp;bin&nbsp;of&nbsp;bins.&nbsp;&nbsp;bins&nbsp;can&nbsp;be&nbsp;a&nbsp;number&nbsp;of&nbsp;bins&nbsp;or&nbsp;a&nbsp;range&nbsp;of<br>
bins;&nbsp;see&nbsp;numpy.histogram<br>
&nbsp;<br>
Compare&nbsp;S&nbsp;with&nbsp;analytic&nbsp;calculation&nbsp;for&nbsp;a&nbsp;Gaussian<br>
x&nbsp;=&nbsp;mu&nbsp;+&nbsp;sigma*randn(200000)<br>
Sanalytic&nbsp;=&nbsp;0.5&nbsp;&nbsp;*&nbsp;(&nbsp;1.0&nbsp;+&nbsp;log(2*pi*sigma**2.0)&nbsp;)</tt></dd></dl>
 <dl><dt><a name="-exp_safe"><strong>exp_safe</strong></a>(x)</dt><dd><tt>Compute&nbsp;exponentials&nbsp;which&nbsp;safely&nbsp;underflow&nbsp;to&nbsp;zero.<br>
&nbsp;<br>
Slow&nbsp;but&nbsp;convenient&nbsp;to&nbsp;use.&nbsp;Note&nbsp;that&nbsp;numpy&nbsp;provides&nbsp;proper<br>
floating&nbsp;point&nbsp;exception&nbsp;handling&nbsp;with&nbsp;access&nbsp;to&nbsp;the&nbsp;underlying<br>
hardware.</tt></dd></dl>
 <dl><dt><a name="-fftsurr"><strong>fftsurr</strong></a>(x, detrend<font color="#909090">=&lt;function detrend_none at 0xecbed8&gt;</font>, window<font color="#909090">=&lt;function window_none at 0xecb500&gt;</font>)</dt><dd><tt>Compute&nbsp;an&nbsp;FFT&nbsp;phase&nbsp;randomized&nbsp;surrogate&nbsp;of&nbsp;x</tt></dd></dl>
 <dl><dt><a name="-find"><strong>find</strong></a>(condition)</dt><dd><tt>Return&nbsp;the&nbsp;indices&nbsp;where&nbsp;ravel(condition)&nbsp;is&nbsp;true</tt></dd></dl>
 <dl><dt><a name="-fix"><strong>fix</strong></a>(x)</dt><dd><tt>Rounds&nbsp;towards&nbsp;zero.<br>
x_rounded&nbsp;=&nbsp;<a href="#-fix">fix</a>(x)&nbsp;rounds&nbsp;the&nbsp;elements&nbsp;of&nbsp;x&nbsp;to&nbsp;the&nbsp;nearest&nbsp;integers<br>
towards&nbsp;zero.<br>
For&nbsp;negative&nbsp;numbers&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;ceil&nbsp;and&nbsp;for&nbsp;positive&nbsp;to&nbsp;floor.</tt></dd></dl>
 <dl><dt><a name="-frange"><strong>frange</strong></a>(xini, xfin<font color="#909090">=None</font>, delta<font color="#909090">=None</font>, **kw)</dt><dd><tt><a href="#-frange">frange</a>([start,]&nbsp;stop[,&nbsp;step,&nbsp;keywords])&nbsp;-&gt;&nbsp;array&nbsp;of&nbsp;floats<br>
&nbsp;<br>
Return&nbsp;a&nbsp;numpy&nbsp;ndarray&nbsp;containing&nbsp;a&nbsp;progression&nbsp;of&nbsp;floats.&nbsp;Similar&nbsp;to<br>
arange(),&nbsp;but&nbsp;defaults&nbsp;to&nbsp;a&nbsp;closed&nbsp;interval.<br>
&nbsp;<br>
<a href="#-frange">frange</a>(x0,&nbsp;x1)&nbsp;returns&nbsp;[x0,&nbsp;x0+1,&nbsp;x0+2,&nbsp;...,&nbsp;x1];&nbsp;start&nbsp;defaults&nbsp;to&nbsp;0,&nbsp;and<br>
the&nbsp;endpoint&nbsp;*is&nbsp;included*.&nbsp;This&nbsp;behavior&nbsp;is&nbsp;different&nbsp;from&nbsp;that&nbsp;of<br>
range()&nbsp;and&nbsp;arange().&nbsp;This&nbsp;is&nbsp;deliberate,&nbsp;since&nbsp;frange&nbsp;will&nbsp;probably&nbsp;be<br>
more&nbsp;useful&nbsp;for&nbsp;generating&nbsp;lists&nbsp;of&nbsp;points&nbsp;for&nbsp;function&nbsp;evaluation,&nbsp;and<br>
endpoints&nbsp;are&nbsp;often&nbsp;desired&nbsp;in&nbsp;this&nbsp;use.&nbsp;The&nbsp;usual&nbsp;behavior&nbsp;of&nbsp;range()&nbsp;can<br>
be&nbsp;obtained&nbsp;by&nbsp;setting&nbsp;the&nbsp;keyword&nbsp;'closed=0',&nbsp;in&nbsp;this&nbsp;case&nbsp;<a href="#-frange">frange</a>()<br>
basically&nbsp;becomes&nbsp;arange().<br>
&nbsp;<br>
When&nbsp;step&nbsp;is&nbsp;given,&nbsp;it&nbsp;specifies&nbsp;the&nbsp;increment&nbsp;(or&nbsp;decrement).&nbsp;All<br>
arguments&nbsp;can&nbsp;be&nbsp;floating&nbsp;point&nbsp;numbers.<br>
&nbsp;<br>
<a href="#-frange">frange</a>(x0,x1,d)&nbsp;returns&nbsp;[x0,x0+d,x0+2d,...,xfin]&nbsp;where&nbsp;xfin&lt;=x1.<br>
&nbsp;<br>
frange&nbsp;can&nbsp;also&nbsp;be&nbsp;called&nbsp;with&nbsp;the&nbsp;keyword&nbsp;'npts'.&nbsp;This&nbsp;sets&nbsp;the&nbsp;number&nbsp;of<br>
points&nbsp;the&nbsp;list&nbsp;should&nbsp;contain&nbsp;(and&nbsp;overrides&nbsp;the&nbsp;value&nbsp;'step'&nbsp;might&nbsp;have<br>
been&nbsp;given).&nbsp;arange()&nbsp;doesn't&nbsp;offer&nbsp;this&nbsp;option.<br>
&nbsp;<br>
Examples:<br>
&gt;&gt;&gt;&nbsp;<a href="#-frange">frange</a>(3)<br>
array([&nbsp;0.,&nbsp;&nbsp;1.,&nbsp;&nbsp;2.,&nbsp;&nbsp;3.])<br>
&gt;&gt;&gt;&nbsp;<a href="#-frange">frange</a>(3,closed=0)<br>
array([&nbsp;0.,&nbsp;&nbsp;1.,&nbsp;&nbsp;2.])<br>
&gt;&gt;&gt;&nbsp;<a href="#-frange">frange</a>(1,6,2)<br>
array([1,&nbsp;3,&nbsp;5])&nbsp;&nbsp;&nbsp;or&nbsp;1,3,5,7,&nbsp;depending&nbsp;on&nbsp;floating&nbsp;point&nbsp;vagueries<br>
&gt;&gt;&gt;&nbsp;<a href="#-frange">frange</a>(1,6.5,npts=5)<br>
array([&nbsp;1.&nbsp;&nbsp;&nbsp;,&nbsp;&nbsp;2.375,&nbsp;&nbsp;3.75&nbsp;,&nbsp;&nbsp;5.125,&nbsp;&nbsp;6.5&nbsp;&nbsp;])</tt></dd></dl>
 <dl><dt><a name="-fromfunction_kw"><strong>fromfunction_kw</strong></a>(function, dimensions, **kwargs)</dt><dd><tt>Drop-in&nbsp;replacement&nbsp;for&nbsp;fromfunction()&nbsp;from&nbsp;numpy<br>
&nbsp;<br>
Allows&nbsp;passing&nbsp;keyword&nbsp;arguments&nbsp;to&nbsp;the&nbsp;desired&nbsp;function.<br>
&nbsp;<br>
Call&nbsp;it&nbsp;as&nbsp;(keywords&nbsp;are&nbsp;optional):<br>
<a href="#-fromfunction_kw">fromfunction_kw</a>(MyFunction,&nbsp;dimensions,&nbsp;keywords)<br>
&nbsp;<br>
The&nbsp;function&nbsp;MyFunction()&nbsp;is&nbsp;responsible&nbsp;for&nbsp;handling&nbsp;the&nbsp;dictionary&nbsp;of<br>
keywords&nbsp;it&nbsp;will&nbsp;receive.</tt></dd></dl>
 <dl><dt><a name="-get_formatd"><strong>get_formatd</strong></a>(r, formatd<font color="#909090">=None</font>)</dt><dd><tt>build&nbsp;a&nbsp;formatd&nbsp;guaranteed&nbsp;to&nbsp;have&nbsp;a&nbsp;key&nbsp;for&nbsp;every&nbsp;dtype&nbsp;name</tt></dd></dl>
 <dl><dt><a name="-get_sparse_matrix"><strong>get_sparse_matrix</strong></a>(M, N, frac<font color="#909090">=0.10000000000000001</font>)</dt><dd><tt>return&nbsp;a&nbsp;MxN&nbsp;sparse&nbsp;matrix&nbsp;with&nbsp;frac&nbsp;elements&nbsp;randomly&nbsp;filled</tt></dd></dl>
 <dl><dt><a name="-get_xyz_where"><strong>get_xyz_where</strong></a>(Z, Cond)</dt><dd><tt>Z&nbsp;and&nbsp;Cond&nbsp;are&nbsp;MxN&nbsp;matrices.&nbsp;&nbsp;Z&nbsp;are&nbsp;data&nbsp;and&nbsp;Cond&nbsp;is&nbsp;a&nbsp;boolean<br>
matrix&nbsp;where&nbsp;some&nbsp;condition&nbsp;is&nbsp;satisfied.&nbsp;&nbsp;Return&nbsp;value&nbsp;is&nbsp;x,y,z<br>
where&nbsp;x&nbsp;and&nbsp;y&nbsp;are&nbsp;the&nbsp;indices&nbsp;into&nbsp;Z&nbsp;and&nbsp;z&nbsp;are&nbsp;the&nbsp;values&nbsp;of&nbsp;Z&nbsp;at<br>
those&nbsp;indices.&nbsp;&nbsp;x,y,z&nbsp;are&nbsp;1D&nbsp;arrays</tt></dd></dl>
 <dl><dt><a name="-hist"><strong>hist</strong></a>(y, bins<font color="#909090">=10</font>, normed<font color="#909090">=0</font>)</dt><dd><tt>Return&nbsp;the&nbsp;histogram&nbsp;of&nbsp;y&nbsp;with&nbsp;bins&nbsp;equally&nbsp;sized&nbsp;bins.&nbsp;&nbsp;If&nbsp;bins<br>
is&nbsp;an&nbsp;array,&nbsp;use&nbsp;the&nbsp;bins.&nbsp;&nbsp;Return&nbsp;value&nbsp;is<br>
(n,x)&nbsp;where&nbsp;n&nbsp;is&nbsp;the&nbsp;count&nbsp;for&nbsp;each&nbsp;bin&nbsp;in&nbsp;x<br>
&nbsp;<br>
If&nbsp;normed&nbsp;is&nbsp;False,&nbsp;return&nbsp;the&nbsp;counts&nbsp;in&nbsp;the&nbsp;first&nbsp;element&nbsp;of&nbsp;the<br>
return&nbsp;tuple.&nbsp;&nbsp;If&nbsp;normed&nbsp;is&nbsp;True,&nbsp;return&nbsp;the&nbsp;probability&nbsp;density<br>
n/(len(y)*dbin)<br>
&nbsp;<br>
If&nbsp;y&nbsp;has&nbsp;rank&gt;1,&nbsp;it&nbsp;will&nbsp;be&nbsp;raveled.&nbsp;&nbsp;If&nbsp;y&nbsp;is&nbsp;masked,&nbsp;only<br>
the&nbsp;unmasked&nbsp;values&nbsp;will&nbsp;be&nbsp;used.<br>
Credits:&nbsp;the&nbsp;Numeric&nbsp;22&nbsp;documentation</tt></dd></dl>
 <dl><dt><a name="-identity"><strong>identity</strong></a>(n, rank<font color="#909090">=2</font>, dtype<font color="#909090">='l'</font>, typecode<font color="#909090">=None</font>)</dt><dd><tt><a href="#-identity">identity</a>(n,r)&nbsp;returns&nbsp;the&nbsp;identity&nbsp;matrix&nbsp;of&nbsp;shape&nbsp;(n,n,...,n)&nbsp;(rank&nbsp;r).<br>
&nbsp;<br>
For&nbsp;ranks&nbsp;higher&nbsp;than&nbsp;2,&nbsp;this&nbsp;object&nbsp;is&nbsp;simply&nbsp;a&nbsp;multi-index&nbsp;Kronecker<br>
delta:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;1&nbsp;&nbsp;if&nbsp;i0=i1=...=iR,<br>
id[i0,i1,...,iR]&nbsp;=&nbsp;-|<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\&nbsp;&nbsp;0&nbsp;&nbsp;otherwise.<br>
&nbsp;<br>
Optionally&nbsp;a&nbsp;dtype&nbsp;(or&nbsp;typecode)&nbsp;may&nbsp;be&nbsp;given&nbsp;(it&nbsp;defaults&nbsp;to&nbsp;'l').<br>
&nbsp;<br>
Since&nbsp;rank&nbsp;defaults&nbsp;to&nbsp;2,&nbsp;this&nbsp;function&nbsp;behaves&nbsp;in&nbsp;the&nbsp;default&nbsp;case&nbsp;(when<br>
only&nbsp;n&nbsp;is&nbsp;given)&nbsp;like&nbsp;numpy.<a href="#-identity">identity</a>(n)--but&nbsp;surprisingly,&nbsp;it&nbsp;is<br>
much&nbsp;faster.</tt></dd></dl>
 <dl><dt><a name="-inside_poly"><strong>inside_poly</strong></a>(points, verts)</dt><dd><tt>points&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;x,y&nbsp;points<br>
verts&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;x,y&nbsp;vertices&nbsp;of&nbsp;a&nbsp;poygon<br>
&nbsp;<br>
return&nbsp;value&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;indices&nbsp;into&nbsp;points&nbsp;for&nbsp;the&nbsp;points<br>
that&nbsp;are&nbsp;inside&nbsp;the&nbsp;polygon</tt></dd></dl>
 <dl><dt><a name="-ispower2"><strong>ispower2</strong></a>(n)</dt><dd><tt>Returns&nbsp;the&nbsp;log&nbsp;base&nbsp;2&nbsp;of&nbsp;n&nbsp;if&nbsp;n&nbsp;is&nbsp;a&nbsp;power&nbsp;of&nbsp;2,&nbsp;zero&nbsp;otherwise.<br>
&nbsp;<br>
Note&nbsp;the&nbsp;potential&nbsp;ambiguity&nbsp;if&nbsp;n==1:&nbsp;2**0==1,&nbsp;interpret&nbsp;accordingly.</tt></dd></dl>
 <dl><dt><a name="-l1norm"><strong>l1norm</strong></a>(a)</dt><dd><tt>Return&nbsp;the&nbsp;l1&nbsp;norm&nbsp;of&nbsp;a,&nbsp;flattened&nbsp;out.<br>
&nbsp;<br>
Implemented&nbsp;as&nbsp;a&nbsp;separate&nbsp;function&nbsp;(not&nbsp;a&nbsp;call&nbsp;to&nbsp;<a href="#-norm">norm</a>()&nbsp;for&nbsp;speed).</tt></dd></dl>
 <dl><dt><a name="-l2norm"><strong>l2norm</strong></a>(a)</dt><dd><tt>Return&nbsp;the&nbsp;l2&nbsp;norm&nbsp;of&nbsp;a,&nbsp;flattened&nbsp;out.<br>
&nbsp;<br>
Implemented&nbsp;as&nbsp;a&nbsp;separate&nbsp;function&nbsp;(not&nbsp;a&nbsp;call&nbsp;to&nbsp;<a href="#-norm">norm</a>()&nbsp;for&nbsp;speed).</tt></dd></dl>
 <dl><dt><a name="-levypdf"><strong>levypdf</strong></a>(x, gamma, alpha)</dt><dd><tt>Returm&nbsp;the&nbsp;levy&nbsp;pdf&nbsp;evaluated&nbsp;at&nbsp;x&nbsp;for&nbsp;params&nbsp;gamma,&nbsp;alpha</tt></dd></dl>
 <dl><dt><a name="-liaupunov"><strong>liaupunov</strong></a>(x, fprime)</dt><dd><tt>x&nbsp;is&nbsp;a&nbsp;very&nbsp;long&nbsp;trajectory&nbsp;from&nbsp;a&nbsp;map,&nbsp;and&nbsp;fprime&nbsp;returns&nbsp;the<br>
derivative&nbsp;of&nbsp;x.&nbsp;&nbsp;Return&nbsp;lambda&nbsp;=&nbsp;1/n\sum&nbsp;ln|fprime(x_i)|.&nbsp;&nbsp;See&nbsp;Sec<br>
10.5&nbsp;Strogatz&nbsp;(1994)"Nonlinear&nbsp;Dynamics&nbsp;and&nbsp;Chaos".<br>
See&nbsp;also&nbsp;<a href="http://en.wikipedia.org/wiki/Lyapunov_exponent">http://en.wikipedia.org/wiki/Lyapunov_exponent</a>.<br>
What&nbsp;the&nbsp;function&nbsp;here&nbsp;calculates&nbsp;may&nbsp;not&nbsp;be&nbsp;what&nbsp;you&nbsp;really&nbsp;want;<br>
caveat&nbsp;emptor.<br>
It&nbsp;also&nbsp;seems&nbsp;that&nbsp;this&nbsp;function's&nbsp;name&nbsp;is&nbsp;badly&nbsp;misspelled.</tt></dd></dl>
 <dl><dt><a name="-linspace"><strong>linspace</strong></a>(*args, **kw)</dt></dl>
 <dl><dt><a name="-load"><strong>load</strong></a>(fname, comments<font color="#909090">='#'</font>, delimiter<font color="#909090">=None</font>, converters<font color="#909090">=None</font>, skiprows<font color="#909090">=0</font>, usecols<font color="#909090">=None</font>, unpack<font color="#909090">=False</font>)</dt><dd><tt>Load&nbsp;ASCII&nbsp;data&nbsp;from&nbsp;fname&nbsp;into&nbsp;an&nbsp;array&nbsp;and&nbsp;return&nbsp;the&nbsp;array.<br>
&nbsp;<br>
The&nbsp;data&nbsp;must&nbsp;be&nbsp;regular,&nbsp;same&nbsp;number&nbsp;of&nbsp;values&nbsp;in&nbsp;every&nbsp;row<br>
&nbsp;<br>
fname&nbsp;can&nbsp;be&nbsp;a&nbsp;filename&nbsp;or&nbsp;a&nbsp;file&nbsp;handle.&nbsp;&nbsp;Support&nbsp;for&nbsp;gzipped&nbsp;files&nbsp;is<br>
automatic,&nbsp;if&nbsp;the&nbsp;filename&nbsp;ends&nbsp;in&nbsp;.gz<br>
&nbsp;<br>
matfile&nbsp;data&nbsp;is&nbsp;not&nbsp;supported;&nbsp;use&nbsp;scipy.io.mio&nbsp;module<br>
&nbsp;<br>
Example&nbsp;usage:<br>
&nbsp;<br>
&nbsp;&nbsp;X&nbsp;=&nbsp;<a href="#-load">load</a>('test.dat')&nbsp;&nbsp;#&nbsp;data&nbsp;in&nbsp;two&nbsp;columns<br>
&nbsp;&nbsp;t&nbsp;=&nbsp;X[:,0]<br>
&nbsp;&nbsp;y&nbsp;=&nbsp;X[:,1]<br>
&nbsp;<br>
Alternatively,&nbsp;you&nbsp;can&nbsp;do&nbsp;the&nbsp;same&nbsp;with&nbsp;"unpack";&nbsp;see&nbsp;below<br>
&nbsp;<br>
&nbsp;&nbsp;X&nbsp;=&nbsp;<a href="#-load">load</a>('test.dat')&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;a&nbsp;matrix&nbsp;of&nbsp;data<br>
&nbsp;&nbsp;x&nbsp;=&nbsp;<a href="#-load">load</a>('test.dat')&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;a&nbsp;single&nbsp;column&nbsp;of&nbsp;data<br>
&nbsp;<br>
comments&nbsp;-&nbsp;the&nbsp;character&nbsp;used&nbsp;to&nbsp;indicate&nbsp;the&nbsp;start&nbsp;of&nbsp;a&nbsp;comment<br>
in&nbsp;the&nbsp;file<br>
&nbsp;<br>
delimiter&nbsp;is&nbsp;a&nbsp;string-like&nbsp;character&nbsp;used&nbsp;to&nbsp;seperate&nbsp;values&nbsp;in&nbsp;the<br>
file.&nbsp;If&nbsp;delimiter&nbsp;is&nbsp;unspecified&nbsp;or&nbsp;none,&nbsp;any&nbsp;whitespace&nbsp;string&nbsp;is<br>
a&nbsp;separator.<br>
&nbsp;<br>
converters,&nbsp;if&nbsp;not&nbsp;None,&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;mapping&nbsp;column&nbsp;number&nbsp;to<br>
a&nbsp;function&nbsp;that&nbsp;will&nbsp;convert&nbsp;that&nbsp;column&nbsp;to&nbsp;a&nbsp;float.&nbsp;&nbsp;Eg,&nbsp;if<br>
column&nbsp;0&nbsp;is&nbsp;a&nbsp;date&nbsp;string:&nbsp;converters={0:datestr2num}<br>
&nbsp;<br>
skiprows&nbsp;is&nbsp;the&nbsp;number&nbsp;of&nbsp;rows&nbsp;from&nbsp;the&nbsp;top&nbsp;to&nbsp;skip<br>
&nbsp;<br>
usecols,&nbsp;if&nbsp;not&nbsp;None,&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;integer&nbsp;column&nbsp;indexes&nbsp;to<br>
extract&nbsp;where&nbsp;0&nbsp;is&nbsp;the&nbsp;first&nbsp;column,&nbsp;eg&nbsp;usecols=(1,4,5)&nbsp;to&nbsp;extract<br>
just&nbsp;the&nbsp;2nd,&nbsp;5th&nbsp;and&nbsp;6th&nbsp;columns<br>
&nbsp;<br>
unpack,&nbsp;if&nbsp;True,&nbsp;will&nbsp;transpose&nbsp;the&nbsp;matrix&nbsp;allowing&nbsp;you&nbsp;to&nbsp;unpack<br>
into&nbsp;named&nbsp;arguments&nbsp;on&nbsp;the&nbsp;left&nbsp;hand&nbsp;side<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;t,y&nbsp;=&nbsp;<a href="#-load">load</a>('test.dat',&nbsp;unpack=True)&nbsp;#&nbsp;for&nbsp;&nbsp;two&nbsp;column&nbsp;data<br>
&nbsp;&nbsp;&nbsp;&nbsp;x,y,z&nbsp;=&nbsp;<a href="#-load">load</a>('somefile.dat',&nbsp;usecols=(3,5,7),&nbsp;unpack=True)<br>
&nbsp;<br>
See&nbsp;examples/load_demo.py&nbsp;which&nbsp;exeercises&nbsp;many&nbsp;of&nbsp;these&nbsp;options.</tt></dd></dl>
 <dl><dt><a name="-log2"><strong>log2</strong></a>(x, ln2<font color="#909090">=0.69314718055994529</font>)</dt><dd><tt>Return&nbsp;the&nbsp;log(x)&nbsp;in&nbsp;base&nbsp;2.<br>
&nbsp;<br>
This&nbsp;is&nbsp;a&nbsp;_slow_&nbsp;function&nbsp;but&nbsp;which&nbsp;is&nbsp;guaranteed&nbsp;to&nbsp;return&nbsp;the&nbsp;correct<br>
integer&nbsp;value&nbsp;if&nbsp;the&nbsp;input&nbsp;is&nbsp;an&nbsp;integer&nbsp;exact&nbsp;power&nbsp;of&nbsp;2.</tt></dd></dl>
 <dl><dt><a name="-logspace"><strong>logspace</strong></a>(xmin, xmax, N)</dt></dl>
 <dl><dt><a name="-longest_contiguous_ones"><strong>longest_contiguous_ones</strong></a>(x)</dt><dd><tt>return&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;longest&nbsp;stretch&nbsp;of&nbsp;contiguous&nbsp;ones&nbsp;in&nbsp;x,<br>
assuming&nbsp;x&nbsp;is&nbsp;a&nbsp;vector&nbsp;of&nbsp;zeros&nbsp;and&nbsp;ones.<br>
If&nbsp;there&nbsp;are&nbsp;two&nbsp;equally&nbsp;long&nbsp;stretches,&nbsp;pick&nbsp;the&nbsp;first</tt></dd></dl>
 <dl><dt><a name="-longest_ones"><strong>longest_ones</strong></a>(x)</dt><dd><tt>alias&nbsp;for&nbsp;longest_contiguous_ones</tt></dd></dl>
 <dl><dt><a name="-mean"><strong>mean</strong></a>(x, dim<font color="#909090">=None</font>)</dt></dl>
 <dl><dt><a name="-mean_flat"><strong>mean_flat</strong></a>(a)</dt><dd><tt>Return&nbsp;the&nbsp;mean&nbsp;of&nbsp;all&nbsp;the&nbsp;elements&nbsp;of&nbsp;a,&nbsp;flattened&nbsp;out.</tt></dd></dl>
 <dl><dt><a name="-meshgrid"><strong>meshgrid</strong></a>(x, y)</dt></dl>
 <dl><dt><a name="-mfuncC"><strong>mfuncC</strong></a>(f, x)</dt><dd><tt><a href="#-mfuncC">mfuncC</a>(f,&nbsp;x)&nbsp;:&nbsp;matrix&nbsp;function&nbsp;with&nbsp;possibly&nbsp;complex&nbsp;eigenvalues.<br>
Note:&nbsp;Numeric&nbsp;defines&nbsp;(v,u)&nbsp;=&nbsp;eig(x)&nbsp;=&gt;&nbsp;x*u.T&nbsp;=&nbsp;u.T&nbsp;*&nbsp;Diag(v)<br>
This&nbsp;function&nbsp;is&nbsp;needed&nbsp;by&nbsp;sqrtm&nbsp;and&nbsp;allows&nbsp;further&nbsp;functions.</tt></dd></dl>
 <dl><dt><a name="-movavg"><strong>movavg</strong></a>(x, n)</dt><dd><tt>compute&nbsp;the&nbsp;len(n)&nbsp;moving&nbsp;average&nbsp;of&nbsp;x</tt></dd></dl>
 <dl><dt><a name="-norm"><strong>norm</strong></a>(x, y<font color="#909090">=2</font>)</dt><dd><tt>Norm&nbsp;of&nbsp;a&nbsp;matrix&nbsp;or&nbsp;a&nbsp;vector&nbsp;according&nbsp;to&nbsp;Matlab.<br>
The&nbsp;description&nbsp;is&nbsp;taken&nbsp;from&nbsp;Matlab:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;For&nbsp;matrices...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(X)&nbsp;is&nbsp;the&nbsp;largest&nbsp;singular&nbsp;value&nbsp;of&nbsp;X,&nbsp;max(svd(X)).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(X,2)&nbsp;is&nbsp;the&nbsp;same&nbsp;as&nbsp;NORM(X).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(X,1)&nbsp;is&nbsp;the&nbsp;1-norm&nbsp;of&nbsp;X,&nbsp;the&nbsp;largest&nbsp;column&nbsp;sum,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;max(sum(abs((X)))).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(X,inf)&nbsp;is&nbsp;the&nbsp;infinity&nbsp;norm&nbsp;of&nbsp;X,&nbsp;the&nbsp;largest&nbsp;row&nbsp;sum,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;max(sum(abs((X')))).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(X,'fro')&nbsp;is&nbsp;the&nbsp;Frobenius&nbsp;norm,&nbsp;sqrt(sum(diag(X'*X))).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(X,P)&nbsp;is&nbsp;available&nbsp;for&nbsp;matrix&nbsp;X&nbsp;only&nbsp;if&nbsp;P&nbsp;is&nbsp;1,&nbsp;2,&nbsp;inf&nbsp;or&nbsp;'fro'.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;For&nbsp;vectors...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(V,P)&nbsp;=&nbsp;sum(abs(V).^P)^(1/P).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(V)&nbsp;=&nbsp;<a href="#-norm">norm</a>(V,2).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(V,inf)&nbsp;=&nbsp;max(abs(V)).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NORM(V,-inf)&nbsp;=&nbsp;min(abs(V)).</tt></dd></dl>
 <dl><dt><a name="-norm_flat"><strong>norm_flat</strong></a>(a, p<font color="#909090">=2</font>)</dt><dd><tt><a href="#-norm">norm</a>(a,p=2)&nbsp;-&gt;&nbsp;l-p&nbsp;norm&nbsp;of&nbsp;a.flat<br>
&nbsp;<br>
Return&nbsp;the&nbsp;l-p&nbsp;norm&nbsp;of&nbsp;a,&nbsp;considered&nbsp;as&nbsp;a&nbsp;flat&nbsp;array.&nbsp;&nbsp;This&nbsp;is&nbsp;NOT&nbsp;a&nbsp;true<br>
matrix&nbsp;norm,&nbsp;since&nbsp;arrays&nbsp;of&nbsp;arbitrary&nbsp;rank&nbsp;are&nbsp;always&nbsp;flattened.<br>
&nbsp;<br>
p&nbsp;can&nbsp;be&nbsp;a&nbsp;number&nbsp;or&nbsp;the&nbsp;string&nbsp;'Infinity'&nbsp;to&nbsp;get&nbsp;the&nbsp;L-infinity&nbsp;norm.</tt></dd></dl>
 <dl><dt><a name="-normpdf"><strong>normpdf</strong></a>(x, *args)</dt><dd><tt>Return&nbsp;the&nbsp;normal&nbsp;pdf&nbsp;evaluated&nbsp;at&nbsp;x;&nbsp;args&nbsp;provides&nbsp;mu,&nbsp;sigma</tt></dd></dl>
 <dl><dt><a name="-orth"><strong>orth</strong></a>(A)</dt><dd><tt>Orthogonalization&nbsp;procedure&nbsp;by&nbsp;Matlab.<br>
The&nbsp;description&nbsp;is&nbsp;taken&nbsp;from&nbsp;its&nbsp;help:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Q&nbsp;=&nbsp;ORTH(A)&nbsp;is&nbsp;an&nbsp;orthonormal&nbsp;basis&nbsp;for&nbsp;the&nbsp;range&nbsp;of&nbsp;A.<br>
&nbsp;&nbsp;&nbsp;&nbsp;That&nbsp;is,&nbsp;Q'*Q&nbsp;=&nbsp;I,&nbsp;the&nbsp;columns&nbsp;of&nbsp;Q&nbsp;span&nbsp;the&nbsp;same&nbsp;space&nbsp;as<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;columns&nbsp;of&nbsp;A,&nbsp;and&nbsp;the&nbsp;number&nbsp;of&nbsp;columns&nbsp;of&nbsp;Q&nbsp;is&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;rank&nbsp;of&nbsp;A.</tt></dd></dl>
 <dl><dt><a name="-poly_below"><strong>poly_below</strong></a>(xmin, xs, ys)</dt><dd><tt>given&nbsp;a&nbsp;sequence&nbsp;of&nbsp;xs&nbsp;and&nbsp;ys,&nbsp;return&nbsp;the&nbsp;vertices&nbsp;of&nbsp;a&nbsp;polygon<br>
that&nbsp;has&nbsp;a&nbsp;horzontal&nbsp;base&nbsp;at&nbsp;xmin&nbsp;and&nbsp;an&nbsp;upper&nbsp;bound&nbsp;at&nbsp;the&nbsp;ys.<br>
xmin&nbsp;is&nbsp;a&nbsp;scalar.<br>
&nbsp;<br>
intended&nbsp;for&nbsp;use&nbsp;with&nbsp;Axes.fill,&nbsp;eg<br>
xv,&nbsp;yv&nbsp;=&nbsp;<a href="#-poly_below">poly_below</a>(0,&nbsp;x,&nbsp;y)<br>
ax.fill(xv,&nbsp;yv)</tt></dd></dl>
 <dl><dt><a name="-poly_between"><strong>poly_between</strong></a>(x, ylower, yupper)</dt><dd><tt>given&nbsp;a&nbsp;sequence&nbsp;of&nbsp;x,&nbsp;ylower&nbsp;and&nbsp;yupper,&nbsp;return&nbsp;the&nbsp;polygon&nbsp;that<br>
fills&nbsp;the&nbsp;regions&nbsp;between&nbsp;them.&nbsp;&nbsp;ylower&nbsp;or&nbsp;yupper&nbsp;can&nbsp;be&nbsp;scalar&nbsp;or<br>
iterable.&nbsp;&nbsp;If&nbsp;they&nbsp;are&nbsp;iterable,&nbsp;they&nbsp;must&nbsp;be&nbsp;equal&nbsp;in&nbsp;length&nbsp;to&nbsp;x<br>
&nbsp;<br>
return&nbsp;value&nbsp;is&nbsp;x,&nbsp;y&nbsp;arrays&nbsp;for&nbsp;use&nbsp;with&nbsp;Axes.fill</tt></dd></dl>
 <dl><dt><a name="-polyfit"><strong>polyfit</strong></a>(*args, **kwargs)</dt><dd><tt>def&nbsp;<a href="#-polyfit">polyfit</a>(x,y,N)<br>
&nbsp;<br>
Do&nbsp;a&nbsp;best&nbsp;fit&nbsp;polynomial&nbsp;of&nbsp;order&nbsp;N&nbsp;of&nbsp;y&nbsp;to&nbsp;x.&nbsp;&nbsp;Return&nbsp;value&nbsp;is&nbsp;a<br>
vector&nbsp;of&nbsp;polynomial&nbsp;coefficients&nbsp;[pk&nbsp;...&nbsp;p1&nbsp;p0].&nbsp;&nbsp;Eg,&nbsp;for&nbsp;N=2<br>
&nbsp;<br>
&nbsp;&nbsp;p2*x0^2&nbsp;+&nbsp;&nbsp;p1*x0&nbsp;+&nbsp;p0&nbsp;=&nbsp;y1<br>
&nbsp;&nbsp;p2*x1^2&nbsp;+&nbsp;&nbsp;p1*x1&nbsp;+&nbsp;p0&nbsp;=&nbsp;y1<br>
&nbsp;&nbsp;p2*x2^2&nbsp;+&nbsp;&nbsp;p1*x2&nbsp;+&nbsp;p0&nbsp;=&nbsp;y2<br>
&nbsp;&nbsp;.....<br>
&nbsp;&nbsp;p2*xk^2&nbsp;+&nbsp;&nbsp;p1*xk&nbsp;+&nbsp;p0&nbsp;=&nbsp;yk<br>
&nbsp;<br>
&nbsp;<br>
Method:&nbsp;if&nbsp;X&nbsp;is&nbsp;a&nbsp;the&nbsp;Vandermonde&nbsp;Matrix&nbsp;computed&nbsp;from&nbsp;x&nbsp;(see<br>
<a href="http://mathworld.wolfram.com/VandermondeMatrix.html">http://mathworld.wolfram.com/VandermondeMatrix.html</a>),&nbsp;then&nbsp;the<br>
polynomial&nbsp;least&nbsp;squares&nbsp;solution&nbsp;is&nbsp;given&nbsp;by&nbsp;the&nbsp;'p'&nbsp;in<br>
&nbsp;<br>
&nbsp;&nbsp;X*p&nbsp;=&nbsp;y<br>
&nbsp;<br>
where&nbsp;X&nbsp;is&nbsp;a&nbsp;len(x)&nbsp;x&nbsp;N+1&nbsp;matrix,&nbsp;p&nbsp;is&nbsp;a&nbsp;N+1&nbsp;length&nbsp;vector,&nbsp;and&nbsp;y<br>
is&nbsp;a&nbsp;len(x)&nbsp;x&nbsp;1&nbsp;vector<br>
&nbsp;<br>
This&nbsp;equation&nbsp;can&nbsp;be&nbsp;solved&nbsp;as<br>
&nbsp;<br>
&nbsp;&nbsp;p&nbsp;=&nbsp;(XT*X)^-1&nbsp;*&nbsp;XT&nbsp;*&nbsp;y<br>
&nbsp;<br>
where&nbsp;XT&nbsp;is&nbsp;the&nbsp;transpose&nbsp;of&nbsp;X&nbsp;and&nbsp;-1&nbsp;denotes&nbsp;the&nbsp;inverse.<br>
Numerically,&nbsp;however,&nbsp;this&nbsp;is&nbsp;not&nbsp;a&nbsp;good&nbsp;method,&nbsp;so&nbsp;we&nbsp;use<br>
numpy.linalg.lstsq.<br>
&nbsp;<br>
For&nbsp;more&nbsp;info,&nbsp;see<br>
<a href="http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html">http://mathworld.wolfram.com/LeastSquaresFittingPolynomial.html</a>,<br>
but&nbsp;note&nbsp;that&nbsp;the&nbsp;k's&nbsp;and&nbsp;n's&nbsp;in&nbsp;the&nbsp;superscripts&nbsp;and&nbsp;subscripts<br>
on&nbsp;that&nbsp;page.&nbsp;&nbsp;The&nbsp;linear&nbsp;algebra&nbsp;is&nbsp;correct,&nbsp;however.<br>
&nbsp;<br>
See&nbsp;also&nbsp;polyval</tt></dd></dl>
 <dl><dt><a name="-polyval"><strong>polyval</strong></a>(*args, **kwargs)</dt><dd><tt>y&nbsp;=&nbsp;<a href="#-polyval">polyval</a>(p,x)<br>
&nbsp;<br>
p&nbsp;is&nbsp;a&nbsp;vector&nbsp;of&nbsp;polynomial&nbsp;coeffients&nbsp;and&nbsp;y&nbsp;is&nbsp;the&nbsp;polynomial<br>
evaluated&nbsp;at&nbsp;x.<br>
&nbsp;<br>
Example&nbsp;code&nbsp;to&nbsp;remove&nbsp;a&nbsp;polynomial&nbsp;(quadratic)&nbsp;trend&nbsp;from&nbsp;y:<br>
&nbsp;<br>
&nbsp;&nbsp;p&nbsp;=&nbsp;<a href="#-polyfit">polyfit</a>(x,&nbsp;y,&nbsp;2)<br>
&nbsp;&nbsp;trend&nbsp;=&nbsp;<a href="#-polyval">polyval</a>(p,&nbsp;x)<br>
&nbsp;&nbsp;resid&nbsp;=&nbsp;y&nbsp;-&nbsp;trend<br>
&nbsp;<br>
See&nbsp;also&nbsp;polyfit</tt></dd></dl>
 <dl><dt><a name="-prctile"><strong>prctile</strong></a>(x, p<font color="#909090">=(0.0, 25.0, 50.0, 75.0, 100.0)</font>)</dt><dd><tt>Return&nbsp;the&nbsp;percentiles&nbsp;of&nbsp;x.&nbsp;&nbsp;p&nbsp;can&nbsp;either&nbsp;be&nbsp;a&nbsp;sequence&nbsp;of<br>
percentile&nbsp;values&nbsp;or&nbsp;a&nbsp;scalar.&nbsp;&nbsp;If&nbsp;p&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;i-th&nbsp;element<br>
of&nbsp;the&nbsp;return&nbsp;sequence&nbsp;is&nbsp;the&nbsp;p(i)-th&nbsp;percentile&nbsp;of&nbsp;x.<br>
If&nbsp;p&nbsp;is&nbsp;a&nbsp;scalar,&nbsp;the&nbsp;largest&nbsp;value&nbsp;of&nbsp;x&nbsp;less&nbsp;than&nbsp;or&nbsp;equal<br>
to&nbsp;the&nbsp;p&nbsp;percentage&nbsp;point&nbsp;in&nbsp;the&nbsp;sequence&nbsp;is&nbsp;returned.</tt></dd></dl>
 <dl><dt><a name="-prctile_rank"><strong>prctile_rank</strong></a>(x, p)</dt><dd><tt>return&nbsp;the&nbsp;for&nbsp;each&nbsp;element&nbsp;in&nbsp;x,&nbsp;return&nbsp;the&nbsp;rank&nbsp;0..len(p)&nbsp;.&nbsp;&nbsp;Eg<br>
if&nbsp;p=(25,&nbsp;50,&nbsp;75),&nbsp;the&nbsp;return&nbsp;value&nbsp;will&nbsp;be&nbsp;a&nbsp;len(x)&nbsp;array&nbsp;with<br>
values&nbsp;in&nbsp;[0,1,2,3]&nbsp;where&nbsp;0&nbsp;indicates&nbsp;the&nbsp;value&nbsp;is&nbsp;less&nbsp;than&nbsp;the<br>
25th&nbsp;percentile,&nbsp;1&nbsp;indicates&nbsp;the&nbsp;value&nbsp;is&nbsp;&gt;=&nbsp;the&nbsp;25th&nbsp;and&nbsp;&lt;&nbsp;50th<br>
percentile,&nbsp;...&nbsp;and&nbsp;3&nbsp;indicates&nbsp;the&nbsp;value&nbsp;is&nbsp;above&nbsp;the&nbsp;75th<br>
percentile&nbsp;cutoff<br>
&nbsp;<br>
p&nbsp;is&nbsp;either&nbsp;an&nbsp;array&nbsp;of&nbsp;percentiles&nbsp;in&nbsp;[0..100]&nbsp;or&nbsp;a&nbsp;scalar&nbsp;which<br>
indicates&nbsp;how&nbsp;many&nbsp;quantiles&nbsp;of&nbsp;data&nbsp;you&nbsp;want&nbsp;ranked</tt></dd></dl>
 <dl><dt><a name="-prepca"><strong>prepca</strong></a>(P, frac<font color="#909090">=0</font>)</dt><dd><tt>Compute&nbsp;the&nbsp;principal&nbsp;components&nbsp;of&nbsp;P.&nbsp;&nbsp;P&nbsp;is&nbsp;a&nbsp;numVars&nbsp;x<br>
numObs&nbsp;array.&nbsp;&nbsp;frac&nbsp;is&nbsp;the&nbsp;minimum&nbsp;fraction&nbsp;of<br>
variance&nbsp;that&nbsp;a&nbsp;component&nbsp;must&nbsp;contain&nbsp;to&nbsp;be&nbsp;included.<br>
&nbsp;<br>
Return&nbsp;value&nbsp;are<br>
Pcomponents&nbsp;:&nbsp;a&nbsp;numVars&nbsp;x&nbsp;numObs&nbsp;array<br>
Trans&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;the&nbsp;weights&nbsp;matrix,&nbsp;ie,&nbsp;Pcomponents&nbsp;=&nbsp;Trans*P<br>
fracVar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;the&nbsp;fraction&nbsp;of&nbsp;the&nbsp;variance&nbsp;accounted&nbsp;for&nbsp;by&nbsp;each<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;component&nbsp;returned<br>
&nbsp;<br>
A&nbsp;similar&nbsp;function&nbsp;of&nbsp;the&nbsp;same&nbsp;name&nbsp;was&nbsp;in&nbsp;the&nbsp;Matlab&nbsp;(TM)<br>
R13&nbsp;Neural&nbsp;Network&nbsp;Toolbox&nbsp;but&nbsp;is&nbsp;not&nbsp;found&nbsp;in&nbsp;later&nbsp;versions;<br>
its&nbsp;successor&nbsp;seems&nbsp;to&nbsp;be&nbsp;called&nbsp;"processpcs".</tt></dd></dl>
 <dl><dt><a name="-psd"><strong>psd</strong></a>(x, NFFT<font color="#909090">=256</font>, Fs<font color="#909090">=2</font>, detrend<font color="#909090">=&lt;function detrend_none at 0xecbed8&gt;</font>, window<font color="#909090">=&lt;function window_hanning at 0xecb578&gt;</font>, noverlap<font color="#909090">=0</font>)</dt><dd><tt>The&nbsp;power&nbsp;spectral&nbsp;density&nbsp;by&nbsp;Welches&nbsp;average&nbsp;periodogram&nbsp;method.<br>
The&nbsp;vector&nbsp;x&nbsp;is&nbsp;divided&nbsp;into&nbsp;NFFT&nbsp;length&nbsp;segments.&nbsp;&nbsp;Each&nbsp;segment<br>
is&nbsp;detrended&nbsp;by&nbsp;function&nbsp;detrend&nbsp;and&nbsp;windowed&nbsp;by&nbsp;function&nbsp;window.<br>
noperlap&nbsp;gives&nbsp;the&nbsp;length&nbsp;of&nbsp;the&nbsp;overlap&nbsp;between&nbsp;segments.&nbsp;&nbsp;The<br>
absolute(fft(segment))**2&nbsp;of&nbsp;each&nbsp;segment&nbsp;are&nbsp;averaged&nbsp;to&nbsp;compute&nbsp;Pxx,<br>
with&nbsp;a&nbsp;scaling&nbsp;to&nbsp;correct&nbsp;for&nbsp;power&nbsp;loss&nbsp;due&nbsp;to&nbsp;windowing.<br>
&nbsp;<br>
Fs&nbsp;is&nbsp;the&nbsp;sampling&nbsp;frequency&nbsp;(samples&nbsp;per&nbsp;time&nbsp;unit).&nbsp;&nbsp;It&nbsp;is&nbsp;used<br>
to&nbsp;calculate&nbsp;the&nbsp;Fourier&nbsp;frequencies,&nbsp;freqs,&nbsp;in&nbsp;cycles&nbsp;per&nbsp;time<br>
unit.<br>
&nbsp;<br>
--&nbsp;NFFT&nbsp;must&nbsp;be&nbsp;even;&nbsp;a&nbsp;power&nbsp;2&nbsp;is&nbsp;most&nbsp;efficient.<br>
--&nbsp;detrend&nbsp;is&nbsp;a&nbsp;functions,&nbsp;unlike&nbsp;in&nbsp;matlab&nbsp;where&nbsp;it&nbsp;is&nbsp;a&nbsp;vector.<br>
--&nbsp;window&nbsp;can&nbsp;be&nbsp;a&nbsp;function&nbsp;or&nbsp;a&nbsp;vector&nbsp;of&nbsp;length&nbsp;NFFT.&nbsp;To&nbsp;create&nbsp;window<br>
&nbsp;&nbsp;&nbsp;vectors&nbsp;see&nbsp;numpy.blackman,&nbsp;numpy.hamming,&nbsp;numpy.bartlett,<br>
&nbsp;&nbsp;&nbsp;scipy.signal,&nbsp;scipy.signal.get_window&nbsp;etc.<br>
--&nbsp;if&nbsp;length&nbsp;x&nbsp;&lt;&nbsp;NFFT,&nbsp;it&nbsp;will&nbsp;be&nbsp;zero&nbsp;padded&nbsp;to&nbsp;NFFT<br>
&nbsp;<br>
&nbsp;<br>
Returns&nbsp;the&nbsp;tuple&nbsp;Pxx,&nbsp;freqs<br>
&nbsp;<br>
Refs:<br>
&nbsp;&nbsp;Bendat&nbsp;&amp;&nbsp;Piersol&nbsp;--&nbsp;Random&nbsp;Data:&nbsp;Analysis&nbsp;and&nbsp;Measurement<br>
&nbsp;&nbsp;&nbsp;&nbsp;Procedures,&nbsp;John&nbsp;Wiley&nbsp;&amp;&nbsp;Sons&nbsp;(1986)</tt></dd></dl>
 <dl><dt><a name="-rank"><strong>rank</strong></a>(x)</dt><dd><tt>Returns&nbsp;the&nbsp;rank&nbsp;of&nbsp;a&nbsp;matrix.<br>
The&nbsp;rank&nbsp;is&nbsp;understood&nbsp;here&nbsp;as&nbsp;the&nbsp;an&nbsp;estimation&nbsp;of&nbsp;the&nbsp;number&nbsp;of<br>
linearly&nbsp;independent&nbsp;rows&nbsp;or&nbsp;columns&nbsp;(depending&nbsp;on&nbsp;the&nbsp;size&nbsp;of&nbsp;the<br>
matrix).<br>
Note&nbsp;that&nbsp;numerix.mlab.<a href="#-rank">rank</a>()&nbsp;is&nbsp;not&nbsp;equivalent&nbsp;to&nbsp;Matlab's&nbsp;rank.<br>
This&nbsp;function&nbsp;is!</tt></dd></dl>
 <dl><dt><a name="-rec2csv"><strong>rec2csv</strong></a>(r, fname, delimiter<font color="#909090">=','</font>, formatd<font color="#909090">=None</font>, missing<font color="#909090">=''</font>, missingd<font color="#909090">=None</font>)</dt><dd><tt>Save&nbsp;the&nbsp;data&nbsp;from&nbsp;numpy&nbsp;(m)recarray&nbsp;r&nbsp;into&nbsp;a&nbsp;comma/space/tab<br>
delimited&nbsp;file.&nbsp;&nbsp;The&nbsp;record&nbsp;array&nbsp;dtype&nbsp;names&nbsp;will&nbsp;be&nbsp;used&nbsp;for<br>
column&nbsp;headers.<br>
&nbsp;<br>
&nbsp;<br>
fname&nbsp;-&nbsp;can&nbsp;be&nbsp;a&nbsp;filename&nbsp;or&nbsp;a&nbsp;file&nbsp;handle.&nbsp;&nbsp;Support&nbsp;for&nbsp;gzipped<br>
files&nbsp;is&nbsp;automatic,&nbsp;if&nbsp;the&nbsp;filename&nbsp;ends&nbsp;in&nbsp;.gz<br>
&nbsp;<br>
See&nbsp;csv2rec&nbsp;and&nbsp;rec2csv&nbsp;for&nbsp;information&nbsp;about&nbsp;missing&nbsp;and<br>
missingd,&nbsp;which&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;fill&nbsp;in&nbsp;masked&nbsp;values&nbsp;into&nbsp;your&nbsp;CSV<br>
file.</tt></dd></dl>
 <dl><dt><a name="-rec2txt"><strong>rec2txt</strong></a>(r, header<font color="#909090">=None</font>, padding<font color="#909090">=3</font>, precision<font color="#909090">=3</font>)</dt><dd><tt>Returns&nbsp;a&nbsp;textual&nbsp;representation&nbsp;of&nbsp;a&nbsp;record&nbsp;array.<br>
&nbsp;<br>
r&nbsp;-&nbsp;numpy&nbsp;recarray<br>
&nbsp;<br>
header&nbsp;-&nbsp;list&nbsp;of&nbsp;column&nbsp;headers<br>
&nbsp;<br>
padding&nbsp;-&nbsp;space&nbsp;between&nbsp;each&nbsp;column<br>
&nbsp;<br>
precision&nbsp;-&nbsp;number&nbsp;of&nbsp;decimal&nbsp;places&nbsp;to&nbsp;use&nbsp;for&nbsp;floats.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Set&nbsp;to&nbsp;an&nbsp;integer&nbsp;to&nbsp;apply&nbsp;to&nbsp;all&nbsp;floats.&nbsp;&nbsp;Set&nbsp;to&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;of&nbsp;integers&nbsp;to&nbsp;apply&nbsp;precision&nbsp;individually.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Precision&nbsp;for&nbsp;non-floats&nbsp;is&nbsp;simply&nbsp;ignored.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Example:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;precision=[0,2,3]<br>
&nbsp;&nbsp;&nbsp;&nbsp;Output:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ID&nbsp;&nbsp;&nbsp;&nbsp;Price&nbsp;&nbsp;&nbsp;Return<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ABC&nbsp;&nbsp;&nbsp;12.54&nbsp;&nbsp;&nbsp;&nbsp;0.234<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;&nbsp;&nbsp;&nbsp;6.32&nbsp;&nbsp;&nbsp;-0.076</tt></dd></dl>
 <dl><dt><a name="-rec_append_field"><strong>rec_append_field</strong></a>(rec, name, arr, dtype<font color="#909090">=None</font>)</dt><dd><tt>return&nbsp;a&nbsp;new&nbsp;record&nbsp;array&nbsp;with&nbsp;field&nbsp;name&nbsp;populated&nbsp;with&nbsp;data&nbsp;from&nbsp;array&nbsp;arr</tt></dd></dl>
 <dl><dt><a name="-rec_append_fields"><strong>rec_append_fields</strong></a>(rec, names, arrs, dtypes<font color="#909090">=None</font>)</dt><dd><tt>return&nbsp;a&nbsp;new&nbsp;record&nbsp;array&nbsp;with&nbsp;field&nbsp;names&nbsp;populated&nbsp;with&nbsp;data<br>
from&nbsp;arrays&nbsp;in&nbsp;arrs.&nbsp;&nbsp;If&nbsp;appending&nbsp;a&nbsp;single&nbsp;field&nbsp;then&nbsp;names,&nbsp;arrs<br>
and&nbsp;dtypes&nbsp;do&nbsp;not&nbsp;have&nbsp;to&nbsp;be&nbsp;lists.&nbsp;They&nbsp;can&nbsp;just&nbsp;be&nbsp;the&nbsp;values&nbsp;themselves.</tt></dd></dl>
 <dl><dt><a name="-rec_drop_fields"><strong>rec_drop_fields</strong></a>(rec, names)</dt><dd><tt>return&nbsp;a&nbsp;new&nbsp;numpy&nbsp;record&nbsp;array&nbsp;with&nbsp;fields&nbsp;in&nbsp;names&nbsp;dropped</tt></dd></dl>
 <dl><dt><a name="-rec_groupby"><strong>rec_groupby</strong></a>(r, groupby, stats)</dt><dd><tt>r&nbsp;is&nbsp;a&nbsp;numpy&nbsp;record&nbsp;array<br>
&nbsp;<br>
groupby&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;record&nbsp;array&nbsp;attribute&nbsp;names&nbsp;that<br>
together&nbsp;form&nbsp;the&nbsp;grouping&nbsp;key.&nbsp;&nbsp;eg&nbsp;('date',&nbsp;'productcode')<br>
&nbsp;<br>
stats&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;(attr,&nbsp;func,&nbsp;outname)&nbsp;which&nbsp;will&nbsp;call&nbsp;x&nbsp;=<br>
func(attr)&nbsp;and&nbsp;assign&nbsp;x&nbsp;to&nbsp;the&nbsp;record&nbsp;array&nbsp;output&nbsp;with&nbsp;attribute<br>
outname.<br>
Eg,&nbsp;&nbsp;stats&nbsp;=&nbsp;(&nbsp;('sales',&nbsp;len,&nbsp;'numsales'),&nbsp;('sales',&nbsp;np.mean,&nbsp;'avgsale')&nbsp;)<br>
&nbsp;<br>
return&nbsp;record&nbsp;array&nbsp;has&nbsp;dtype&nbsp;names&nbsp;for&nbsp;each&nbsp;attribute&nbsp;name&nbsp;in&nbsp;in<br>
the&nbsp;the&nbsp;'groupby'&nbsp;argument,&nbsp;with&nbsp;the&nbsp;associated&nbsp;group&nbsp;values,&nbsp;and<br>
for&nbsp;each&nbsp;outname&nbsp;name&nbsp;in&nbsp;the&nbsp;stats&nbsp;argument,&nbsp;with&nbsp;the&nbsp;associated<br>
stat&nbsp;summary&nbsp;output</tt></dd></dl>
 <dl><dt><a name="-rec_join"><strong>rec_join</strong></a>(key, r1, r2, jointype<font color="#909090">='inner'</font>, defaults<font color="#909090">=None</font>)</dt><dd><tt>join&nbsp;record&nbsp;arrays&nbsp;r1&nbsp;and&nbsp;r2&nbsp;on&nbsp;key;&nbsp;key&nbsp;is&nbsp;a&nbsp;tuple&nbsp;of&nbsp;field<br>
names.&nbsp;&nbsp;if&nbsp;r1&nbsp;and&nbsp;r2&nbsp;have&nbsp;equal&nbsp;values&nbsp;on&nbsp;all&nbsp;the&nbsp;keys&nbsp;in&nbsp;the&nbsp;key<br>
tuple,&nbsp;then&nbsp;their&nbsp;fields&nbsp;will&nbsp;be&nbsp;merged&nbsp;into&nbsp;a&nbsp;new&nbsp;record&nbsp;array<br>
containing&nbsp;the&nbsp;intersection&nbsp;of&nbsp;the&nbsp;fields&nbsp;of&nbsp;r1&nbsp;and&nbsp;r2<br>
&nbsp;<br>
The&nbsp;jointype&nbsp;keyword&nbsp;can&nbsp;be&nbsp;'inner',&nbsp;'outer',&nbsp;'leftouter'.<br>
To&nbsp;do&nbsp;a&nbsp;rightouter&nbsp;join&nbsp;just&nbsp;reverse&nbsp;r1&nbsp;and&nbsp;r2.<br>
&nbsp;<br>
The&nbsp;defaults&nbsp;keyword&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;filled&nbsp;with<br>
{column_name:default_value}&nbsp;pairs.</tt></dd></dl>
 <dl><dt><a name="-rec_summarize"><strong>rec_summarize</strong></a>(r, summaryfuncs)</dt><dd><tt>r&nbsp;is&nbsp;a&nbsp;numpy&nbsp;record&nbsp;array<br>
&nbsp;<br>
summaryfuncs&nbsp;is&nbsp;a&nbsp;list&nbsp;of&nbsp;(attr,&nbsp;func,&nbsp;outname)&nbsp;which&nbsp;will<br>
apply&nbsp;codefunc&nbsp;to&nbsp;the&nbsp;the&nbsp;array&nbsp;r[attr]&nbsp;and&nbsp;assign&nbsp;the&nbsp;output<br>
to&nbsp;a&nbsp;new&nbsp;attribute&nbsp;name&nbsp;outname.&nbsp;&nbsp;The&nbsp;returned&nbsp;record&nbsp;array&nbsp;is<br>
identical&nbsp;to&nbsp;r,&nbsp;with&nbsp;extra&nbsp;arrays&nbsp;for&nbsp;each&nbsp;element&nbsp;in&nbsp;summaryfuncs</tt></dd></dl>
 <dl><dt><a name="-rem"><strong>rem</strong></a>(x, y)</dt><dd><tt>Remainder&nbsp;after&nbsp;division.<br>
<a href="#-rem">rem</a>(x,y)&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;x&nbsp;-&nbsp;y.*<a href="#-fix">fix</a>(x./y)&nbsp;in&nbsp;case&nbsp;y&nbsp;is&nbsp;not&nbsp;zero.<br>
By&nbsp;convention&nbsp;(but&nbsp;contrary&nbsp;to&nbsp;numpy),&nbsp;<a href="#-rem">rem</a>(x,0)&nbsp;returns&nbsp;None.<br>
This&nbsp;also&nbsp;differs&nbsp;from&nbsp;numpy.remainder,&nbsp;which&nbsp;uses&nbsp;floor&nbsp;instead&nbsp;of<br>
fix.</tt></dd></dl>
 <dl><dt><a name="-rk4"><strong>rk4</strong></a>(derivs, y0, t)</dt><dd><tt>Integrate&nbsp;1D&nbsp;or&nbsp;ND&nbsp;system&nbsp;of&nbsp;ODEs&nbsp;from&nbsp;initial&nbsp;state&nbsp;y0&nbsp;at&nbsp;sample<br>
times&nbsp;t.&nbsp;&nbsp;derivs&nbsp;returns&nbsp;the&nbsp;derivative&nbsp;of&nbsp;the&nbsp;system&nbsp;and&nbsp;has&nbsp;the<br>
signature<br>
&nbsp;<br>
&nbsp;dy&nbsp;=&nbsp;derivs(yi,&nbsp;ti)<br>
&nbsp;<br>
Example&nbsp;1&nbsp;:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;2D&nbsp;system<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;derivs6(x,t):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d1&nbsp;=&nbsp;&nbsp;x[0]&nbsp;+&nbsp;2*x[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d2&nbsp;=&nbsp;&nbsp;-3*x[0]&nbsp;+&nbsp;4*x[1]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(d1,&nbsp;d2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;dt&nbsp;=&nbsp;0.0005<br>
&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;arange(0.0,&nbsp;2.0,&nbsp;dt)<br>
&nbsp;&nbsp;&nbsp;&nbsp;y0&nbsp;=&nbsp;(1,2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;yout&nbsp;=&nbsp;<a href="#-rk4">rk4</a>(derivs6,&nbsp;y0,&nbsp;t)<br>
&nbsp;<br>
Example&nbsp;2:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;##&nbsp;1D&nbsp;system<br>
&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;=&nbsp;2<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;derivs(x,t):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;-alpha*x&nbsp;+&nbsp;exp(-t)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;y0&nbsp;=&nbsp;1<br>
&nbsp;&nbsp;&nbsp;&nbsp;yout&nbsp;=&nbsp;<a href="#-rk4">rk4</a>(derivs,&nbsp;y0,&nbsp;t)<br>
&nbsp;<br>
&nbsp;<br>
If&nbsp;you&nbsp;have&nbsp;access&nbsp;to&nbsp;scipy,&nbsp;you&nbsp;should&nbsp;probably&nbsp;be&nbsp;using&nbsp;the<br>
scipy.integrate&nbsp;tools&nbsp;rather&nbsp;than&nbsp;this&nbsp;function.</tt></dd></dl>
 <dl><dt><a name="-rms_flat"><strong>rms_flat</strong></a>(a)</dt><dd><tt>Return&nbsp;the&nbsp;root&nbsp;mean&nbsp;square&nbsp;of&nbsp;all&nbsp;the&nbsp;elements&nbsp;of&nbsp;a,&nbsp;flattened&nbsp;out.</tt></dd></dl>
 <dl><dt><a name="-safe_isinf"><strong>safe_isinf</strong></a>(x)</dt><dd><tt>isnan&nbsp;for&nbsp;arbitrary&nbsp;types</tt></dd></dl>
 <dl><dt><a name="-safe_isnan"><strong>safe_isnan</strong></a>(x)</dt><dd><tt>isnan&nbsp;for&nbsp;arbitrary&nbsp;types</tt></dd></dl>
 <dl><dt><a name="-save"><strong>save</strong></a>(fname, X, fmt<font color="#909090">='%.18e'</font>, delimiter<font color="#909090">=' '</font>)</dt><dd><tt>Save&nbsp;the&nbsp;data&nbsp;in&nbsp;X&nbsp;to&nbsp;file&nbsp;fname&nbsp;using&nbsp;fmt&nbsp;string&nbsp;to&nbsp;convert&nbsp;the<br>
data&nbsp;to&nbsp;strings<br>
&nbsp;<br>
fname&nbsp;can&nbsp;be&nbsp;a&nbsp;filename&nbsp;or&nbsp;a&nbsp;file&nbsp;handle.&nbsp;&nbsp;If&nbsp;the&nbsp;filename&nbsp;ends&nbsp;in&nbsp;.gz,<br>
the&nbsp;file&nbsp;is&nbsp;automatically&nbsp;saved&nbsp;in&nbsp;compressed&nbsp;gzip&nbsp;format.&nbsp;&nbsp;The&nbsp;<a href="#-load">load</a>()<br>
command&nbsp;understands&nbsp;gzipped&nbsp;files&nbsp;transparently.<br>
&nbsp;<br>
Example&nbsp;usage:<br>
&nbsp;<br>
<a href="#-save">save</a>('test.out',&nbsp;X)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;X&nbsp;is&nbsp;an&nbsp;array<br>
<a href="#-save">save</a>('test1.out',&nbsp;(x,y,z))&nbsp;&nbsp;#&nbsp;x,y,z&nbsp;equal&nbsp;sized&nbsp;1D&nbsp;arrays<br>
<a href="#-save">save</a>('test2.out',&nbsp;x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;x&nbsp;is&nbsp;1D<br>
<a href="#-save">save</a>('test3.out',&nbsp;x,&nbsp;fmt='%1.4e')&nbsp;&nbsp;#&nbsp;use&nbsp;exponential&nbsp;notation<br>
&nbsp;<br>
delimiter&nbsp;is&nbsp;used&nbsp;to&nbsp;separate&nbsp;the&nbsp;fields,&nbsp;eg&nbsp;delimiter&nbsp;','&nbsp;for<br>
comma-separated&nbsp;values</tt></dd></dl>
 <dl><dt><a name="-segments_intersect"><strong>segments_intersect</strong></a>(s1, s2)</dt><dd><tt>Return&nbsp;True&nbsp;if&nbsp;s1&nbsp;and&nbsp;s2&nbsp;intersect.<br>
s1&nbsp;and&nbsp;s2&nbsp;are&nbsp;defined&nbsp;as<br>
&nbsp;<br>
s1:&nbsp;(x1,&nbsp;y1),&nbsp;(x2,&nbsp;y2)<br>
s2:&nbsp;(x3,&nbsp;y3),&nbsp;(x4,&nbsp;y4)</tt></dd></dl>
 <dl><dt><a name="-slopes"><strong>slopes</strong></a>(x, y)</dt><dd><tt>SLOPES&nbsp;calculate&nbsp;the&nbsp;slope&nbsp;y'(x)&nbsp;Given&nbsp;data&nbsp;vectors&nbsp;X&nbsp;and&nbsp;Y&nbsp;SLOPES<br>
calculates&nbsp;Y'(X),&nbsp;i.e&nbsp;the&nbsp;slope&nbsp;of&nbsp;a&nbsp;curve&nbsp;Y(X).&nbsp;The&nbsp;slope&nbsp;is<br>
estimated&nbsp;using&nbsp;the&nbsp;slope&nbsp;obtained&nbsp;from&nbsp;that&nbsp;of&nbsp;a&nbsp;parabola&nbsp;through<br>
any&nbsp;three&nbsp;consecutive&nbsp;points.<br>
&nbsp;<br>
This&nbsp;method&nbsp;should&nbsp;be&nbsp;superior&nbsp;to&nbsp;that&nbsp;described&nbsp;in&nbsp;the&nbsp;appendix<br>
of&nbsp;A&nbsp;CONSISTENTLY&nbsp;WELL&nbsp;BEHAVED&nbsp;METHOD&nbsp;OF&nbsp;INTERPOLATION&nbsp;by&nbsp;Russel<br>
W.&nbsp;Stineman&nbsp;(Creative&nbsp;Computing&nbsp;July&nbsp;1980)&nbsp;in&nbsp;at&nbsp;least&nbsp;one&nbsp;aspect:<br>
&nbsp;<br>
Circles&nbsp;for&nbsp;interpolation&nbsp;demand&nbsp;a&nbsp;known&nbsp;aspect&nbsp;ratio&nbsp;between&nbsp;x-<br>
and&nbsp;y-values.&nbsp;&nbsp;For&nbsp;many&nbsp;functions,&nbsp;however,&nbsp;the&nbsp;abscissa&nbsp;are&nbsp;given<br>
in&nbsp;different&nbsp;dimensions,&nbsp;so&nbsp;an&nbsp;aspect&nbsp;ratio&nbsp;is&nbsp;completely<br>
arbitrary.<br>
&nbsp;<br>
The&nbsp;parabola&nbsp;method&nbsp;gives&nbsp;very&nbsp;similar&nbsp;results&nbsp;to&nbsp;the&nbsp;circle<br>
method&nbsp;for&nbsp;most&nbsp;regular&nbsp;cases&nbsp;but&nbsp;behaves&nbsp;much&nbsp;better&nbsp;in&nbsp;special<br>
cases<br>
&nbsp;<br>
Norbert&nbsp;Nemec,&nbsp;Institute&nbsp;of&nbsp;Theoretical&nbsp;Physics,&nbsp;University&nbsp;or<br>
Regensburg,&nbsp;April&nbsp;2006&nbsp;Norbert.Nemec&nbsp;at&nbsp;physik.uni-regensburg.de<br>
&nbsp;<br>
(inspired&nbsp;by&nbsp;a&nbsp;original&nbsp;implementation&nbsp;by&nbsp;Halldor&nbsp;Bjornsson,<br>
Icelandic&nbsp;Meteorological&nbsp;Office,&nbsp;March&nbsp;2006&nbsp;halldor&nbsp;at&nbsp;vedur.is)</tt></dd></dl>
 <dl><dt><a name="-specgram"><strong>specgram</strong></a>(x, NFFT<font color="#909090">=256</font>, Fs<font color="#909090">=2</font>, detrend<font color="#909090">=&lt;function detrend_none at 0xecbed8&gt;</font>, window<font color="#909090">=&lt;function window_hanning at 0xecb578&gt;</font>, noverlap<font color="#909090">=128</font>)</dt><dd><tt>Compute&nbsp;a&nbsp;spectrogram&nbsp;of&nbsp;data&nbsp;in&nbsp;x.&nbsp;&nbsp;Data&nbsp;are&nbsp;split&nbsp;into&nbsp;NFFT<br>
length&nbsp;segements&nbsp;and&nbsp;the&nbsp;PSD&nbsp;of&nbsp;each&nbsp;section&nbsp;is&nbsp;computed.&nbsp;&nbsp;The<br>
windowing&nbsp;function&nbsp;window&nbsp;is&nbsp;applied&nbsp;to&nbsp;each&nbsp;segment,&nbsp;and&nbsp;the<br>
amount&nbsp;of&nbsp;overlap&nbsp;of&nbsp;each&nbsp;segment&nbsp;is&nbsp;specified&nbsp;with&nbsp;noverlap.<br>
&nbsp;<br>
window&nbsp;can&nbsp;be&nbsp;a&nbsp;function&nbsp;or&nbsp;a&nbsp;vector&nbsp;of&nbsp;length&nbsp;NFFT.&nbsp;To&nbsp;create<br>
window&nbsp;vectors&nbsp;see&nbsp;numpy.blackman,&nbsp;numpy.hamming,&nbsp;numpy.bartlett,<br>
scipy.signal,&nbsp;scipy.signal.get_window&nbsp;etc.<br>
&nbsp;<br>
See&nbsp;psd&nbsp;for&nbsp;more&nbsp;info.&nbsp;(psd&nbsp;differs&nbsp;in&nbsp;the&nbsp;default&nbsp;overlap;<br>
in&nbsp;returning&nbsp;the&nbsp;mean&nbsp;of&nbsp;the&nbsp;segment&nbsp;periodograms;&nbsp;and&nbsp;in&nbsp;not<br>
returning&nbsp;times.)<br>
&nbsp;<br>
If&nbsp;x&nbsp;is&nbsp;real&nbsp;(i.e.&nbsp;non-Complex)&nbsp;only&nbsp;the&nbsp;positive&nbsp;spectrum&nbsp;is<br>
given.&nbsp;&nbsp;If&nbsp;x&nbsp;is&nbsp;Complex&nbsp;then&nbsp;the&nbsp;complete&nbsp;spectrum&nbsp;is&nbsp;given.<br>
&nbsp;<br>
returns:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pxx&nbsp;-&nbsp;&nbsp;2-D&nbsp;array,&nbsp;columns&nbsp;are&nbsp;the&nbsp;periodograms&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successive&nbsp;segments<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freqs&nbsp;-&nbsp;1-D&nbsp;array&nbsp;of&nbsp;frequencies&nbsp;corresponding&nbsp;to<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;rows&nbsp;in&nbsp;Pxx<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;-&nbsp;1-D&nbsp;array&nbsp;of&nbsp;times&nbsp;corresponding&nbsp;to&nbsp;midpoints&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;segments.</tt></dd></dl>
 <dl><dt><a name="-sqrtm"><strong>sqrtm</strong></a>(x)</dt><dd><tt>Returns&nbsp;the&nbsp;square&nbsp;root&nbsp;of&nbsp;a&nbsp;square&nbsp;matrix.<br>
This&nbsp;means&nbsp;that&nbsp;s=<a href="#-sqrtm">sqrtm</a>(x)&nbsp;implies&nbsp;dot(s,s)&nbsp;=&nbsp;x.<br>
Note&nbsp;that&nbsp;s&nbsp;and&nbsp;x&nbsp;are&nbsp;matrices.</tt></dd></dl>
 <dl><dt><a name="-stineman_interp"><strong>stineman_interp</strong></a>(xi, x, y, yp<font color="#909090">=None</font>)</dt><dd><tt>STINEMAN_INTERP&nbsp;Well&nbsp;behaved&nbsp;data&nbsp;interpolation.&nbsp;&nbsp;Given&nbsp;data<br>
vectors&nbsp;X&nbsp;and&nbsp;Y,&nbsp;the&nbsp;slope&nbsp;vector&nbsp;YP&nbsp;and&nbsp;a&nbsp;new&nbsp;abscissa&nbsp;vector&nbsp;XI<br>
the&nbsp;function&nbsp;<a href="#-stineman_interp">stineman_interp</a>(xi,x,y,yp)&nbsp;uses&nbsp;Stineman<br>
interpolation&nbsp;to&nbsp;calculate&nbsp;a&nbsp;vector&nbsp;YI&nbsp;corresponding&nbsp;to&nbsp;XI.<br>
&nbsp;<br>
Here's&nbsp;an&nbsp;example&nbsp;that&nbsp;generates&nbsp;a&nbsp;coarse&nbsp;sine&nbsp;curve,&nbsp;then<br>
interpolates&nbsp;over&nbsp;a&nbsp;finer&nbsp;abscissa:<br>
&nbsp;<br>
&nbsp;&nbsp;x&nbsp;=&nbsp;<a href="#-linspace">linspace</a>(0,2*pi,20);&nbsp;&nbsp;y&nbsp;=&nbsp;sin(x);&nbsp;yp&nbsp;=&nbsp;cos(x)<br>
&nbsp;&nbsp;xi&nbsp;=&nbsp;<a href="#-linspace">linspace</a>(0,2*pi,40);<br>
&nbsp;&nbsp;yi&nbsp;=&nbsp;<a href="#-stineman_interp">stineman_interp</a>(xi,x,y,yp);<br>
&nbsp;&nbsp;plot(x,y,'o',xi,yi)<br>
&nbsp;<br>
The&nbsp;interpolation&nbsp;method&nbsp;is&nbsp;described&nbsp;in&nbsp;the&nbsp;article&nbsp;A<br>
CONSISTENTLY&nbsp;WELL&nbsp;BEHAVED&nbsp;METHOD&nbsp;OF&nbsp;INTERPOLATION&nbsp;by&nbsp;Russell<br>
W.&nbsp;Stineman.&nbsp;The&nbsp;article&nbsp;appeared&nbsp;in&nbsp;the&nbsp;July&nbsp;1980&nbsp;issue&nbsp;of<br>
Creative&nbsp;Computing&nbsp;with&nbsp;a&nbsp;note&nbsp;from&nbsp;the&nbsp;editor&nbsp;stating&nbsp;that&nbsp;while<br>
they&nbsp;were<br>
&nbsp;<br>
&nbsp;&nbsp;not&nbsp;an&nbsp;academic&nbsp;journal&nbsp;but&nbsp;once&nbsp;in&nbsp;a&nbsp;while&nbsp;something&nbsp;serious<br>
&nbsp;&nbsp;and&nbsp;original&nbsp;comes&nbsp;in&nbsp;adding&nbsp;that&nbsp;this&nbsp;was<br>
&nbsp;&nbsp;"apparently&nbsp;a&nbsp;real&nbsp;solution"&nbsp;to&nbsp;a&nbsp;well&nbsp;known&nbsp;problem.<br>
&nbsp;<br>
For&nbsp;yp=None,&nbsp;the&nbsp;routine&nbsp;automatically&nbsp;determines&nbsp;the&nbsp;slopes&nbsp;using<br>
the&nbsp;"slopes"&nbsp;routine.<br>
&nbsp;<br>
X&nbsp;is&nbsp;assumed&nbsp;to&nbsp;be&nbsp;sorted&nbsp;in&nbsp;increasing&nbsp;order<br>
&nbsp;<br>
For&nbsp;values&nbsp;xi[j]&nbsp;&lt;&nbsp;x[0]&nbsp;or&nbsp;xi[j]&nbsp;&gt;&nbsp;x[-1],&nbsp;the&nbsp;routine&nbsp;tries&nbsp;a<br>
extrapolation.&nbsp;&nbsp;The&nbsp;relevance&nbsp;of&nbsp;the&nbsp;data&nbsp;obtained&nbsp;from&nbsp;this,&nbsp;of<br>
course,&nbsp;questionable...<br>
&nbsp;<br>
original&nbsp;implementation&nbsp;by&nbsp;Halldor&nbsp;Bjornsson,&nbsp;Icelandic<br>
Meteorolocial&nbsp;Office,&nbsp;March&nbsp;2006&nbsp;halldor&nbsp;at&nbsp;vedur.is<br>
&nbsp;<br>
completely&nbsp;reworked&nbsp;and&nbsp;optimized&nbsp;for&nbsp;Python&nbsp;by&nbsp;Norbert&nbsp;Nemec,<br>
Institute&nbsp;of&nbsp;Theoretical&nbsp;Physics,&nbsp;University&nbsp;or&nbsp;Regensburg,&nbsp;April<br>
2006&nbsp;Norbert.Nemec&nbsp;at&nbsp;physik.uni-regensburg.de</tt></dd></dl>
 <dl><dt><a name="-sum_flat"><strong>sum_flat</strong></a>(a)</dt><dd><tt>Return&nbsp;the&nbsp;sum&nbsp;of&nbsp;all&nbsp;the&nbsp;elements&nbsp;of&nbsp;a,&nbsp;flattened&nbsp;out.<br>
&nbsp;<br>
It&nbsp;uses&nbsp;a.flat,&nbsp;and&nbsp;if&nbsp;a&nbsp;is&nbsp;not&nbsp;contiguous,&nbsp;a&nbsp;call&nbsp;to&nbsp;ravel(a)&nbsp;is&nbsp;made.</tt></dd></dl>
 <dl><dt><a name="-trapz"><strong>trapz</strong></a>(x, y)</dt><dd><tt>Trapezoidal&nbsp;integral&nbsp;of&nbsp;y(x).</tt></dd></dl>
 <dl><dt><a name="-vander"><strong>vander</strong></a>(*args, **kwargs)</dt><dd><tt>X&nbsp;=&nbsp;<a href="#-vander">vander</a>(x,N=None)<br>
&nbsp;<br>
The&nbsp;Vandermonde&nbsp;matrix&nbsp;of&nbsp;vector&nbsp;x.&nbsp;&nbsp;The&nbsp;i-th&nbsp;column&nbsp;of&nbsp;X&nbsp;is&nbsp;the<br>
the&nbsp;i-th&nbsp;power&nbsp;of&nbsp;x.&nbsp;&nbsp;N&nbsp;is&nbsp;the&nbsp;maximum&nbsp;power&nbsp;to&nbsp;compute;&nbsp;if&nbsp;N&nbsp;is<br>
None&nbsp;it&nbsp;defaults&nbsp;to&nbsp;len(x).</tt></dd></dl>
 <dl><dt><a name="-window_hanning"><strong>window_hanning</strong></a>(x)</dt><dd><tt>return&nbsp;x&nbsp;times&nbsp;the&nbsp;hanning&nbsp;window&nbsp;of&nbsp;len(x)</tt></dd></dl>
 <dl><dt><a name="-window_none"><strong>window_none</strong></a>(x)</dt><dd><tt>No&nbsp;window&nbsp;function;&nbsp;simply&nbsp;return&nbsp;x</tt></dd></dl>
 <dl><dt><a name="-zeros_like"><strong>zeros_like</strong></a>(a)</dt><dd><tt>Return&nbsp;an&nbsp;array&nbsp;of&nbsp;zeros&nbsp;of&nbsp;the&nbsp;shape&nbsp;and&nbsp;typecode&nbsp;of&nbsp;a.</tt></dd></dl>
</td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>defaultformatd</strong> = {&lt;type 'numpy.bool_'&gt;: &lt;matplotlib.mlab.FormatBool instance at 0xe51e18&gt;, &lt;type 'numpy.int16'&gt;: &lt;matplotlib.mlab.FormatInt instance at 0xe51f80&gt;, &lt;type 'numpy.int32'&gt;: &lt;matplotlib.mlab.FormatInt instance at 0xec86c8&gt;, &lt;type 'numpy.int64'&gt;: &lt;matplotlib.mlab.FormatInt instance at 0xec8170&gt;, &lt;type 'numpy.float32'&gt;: &lt;matplotlib.mlab.FormatFloat instance at 0xec8680&gt;, &lt;type 'numpy.float64'&gt;: &lt;matplotlib.mlab.FormatFloat instance at 0xec8c20&gt;, &lt;type 'numpy.object_'&gt;: &lt;matplotlib.mlab.FormatObj instance at 0xec8c68&gt;, &lt;type 'numpy.string_'&gt;: &lt;matplotlib.mlab.FormatString instance at 0xec8cb0&gt;}<br>
<strong>division</strong> = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)<br>
<strong>exp_safe_MAX</strong> = 1.7976931348623157e+308<br>
<strong>exp_safe_MIN</strong> = -708.39641853226408<br>
<strong>readme</strong> = '<font color="#c040c0">\n</font>MLab2.py, release 1<font color="#c040c0">\n\n</font>Created on February 2003 b...<font color="#c040c0">\n</font>Look at: http://pdilib.sf.net for new releases.<font color="#c040c0">\n</font>'</td></tr></table>
@footer@