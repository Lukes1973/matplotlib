@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.<a href="matplotlib.backends.html"><font color="#ffffff">backends</font></a>.backend_agg</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/backends/backend_agg.py">/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/backends/backend_agg.py</a></font></td></tr></table>
    <p><tt>An&nbsp;agg&nbsp;<a href="http://antigrain.com/">http://antigrain.com/</a>&nbsp;backend<br>
&nbsp;<br>
Features&nbsp;that&nbsp;are&nbsp;implemented<br>
&nbsp;<br>
&nbsp;*&nbsp;capstyles&nbsp;and&nbsp;join&nbsp;styles<br>
&nbsp;*&nbsp;dashes<br>
&nbsp;*&nbsp;linewidth<br>
&nbsp;*&nbsp;lines,&nbsp;rectangles,&nbsp;ellipses<br>
&nbsp;*&nbsp;clipping&nbsp;to&nbsp;a&nbsp;rectangle<br>
&nbsp;*&nbsp;output&nbsp;to&nbsp;RGBA&nbsp;and&nbsp;PNG<br>
&nbsp;*&nbsp;alpha&nbsp;blending<br>
&nbsp;*&nbsp;DPI&nbsp;scaling&nbsp;properly&nbsp;-&nbsp;everything&nbsp;scales&nbsp;properly&nbsp;(dashes,&nbsp;linewidths,&nbsp;etc)<br>
&nbsp;*&nbsp;draw&nbsp;polygon<br>
&nbsp;*&nbsp;freetype2&nbsp;w/&nbsp;ft2font<br>
&nbsp;<br>
TODO:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;allow&nbsp;save&nbsp;to&nbsp;file&nbsp;handle<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;integrate&nbsp;screen&nbsp;dpi&nbsp;w/&nbsp;ppi&nbsp;and&nbsp;text</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib._png.html">matplotlib._png</a><br>
<a href="matplotlib.html">matplotlib</a><br>
</td><td width="25%" valign=top><a href="numpy.html">numpy</a><br>
<a href="os.html">os</a><br>
</td><td width="25%" valign=top><a href="sys.html">sys</a><br>
<a href="weakref.html">weakref</a><br>
</td><td width="25%" valign=top></td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#FigureCanvasBase">matplotlib.backend_bases.FigureCanvasBase</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backends.backend_agg.html#FigureCanvasAgg">FigureCanvasAgg</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#RendererBase">matplotlib.backend_bases.RendererBase</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backends.backend_agg.html#RendererAgg">RendererAgg</a>
</font></dt></dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FigureCanvasAgg">class <strong>FigureCanvasAgg</strong></a>(<a href="matplotlib.backend_bases.html#FigureCanvasBase">matplotlib.backend_bases.FigureCanvasBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>The&nbsp;canvas&nbsp;the&nbsp;figure&nbsp;renders&nbsp;into.&nbsp;&nbsp;Calls&nbsp;the&nbsp;draw&nbsp;and&nbsp;print&nbsp;fig<br>
methods,&nbsp;creates&nbsp;the&nbsp;renderers,&nbsp;etc...<br>
&nbsp;<br>
Public&nbsp;attribute<br>
&nbsp;<br>
&nbsp;&nbsp;figure&nbsp;-&nbsp;A&nbsp;Figure&nbsp;instance<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FigureCanvasAgg-buffer_rgba"><strong>buffer_rgba</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-copy_from_bbox"><strong>copy_from_bbox</strong></a>(self, bbox)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-draw"><strong>draw</strong></a>(self)</dt><dd><tt>Draw&nbsp;the&nbsp;figure&nbsp;using&nbsp;the&nbsp;renderer</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-get_default_filetype"><strong>get_default_filetype</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-get_renderer"><strong>get_renderer</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_png"><strong>print_png</strong></a>(self, filename_or_obj, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_raw"><strong>print_raw</strong></a>(self, filename_or_obj, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_rgba"><strong>print_rgba</strong></a> = <a href="#FigureCanvasAgg-print_raw">print_raw</a>(self, filename_or_obj, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-restore_region"><strong>restore_region</strong></a>(self, region)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-tostring_argb"><strong>tostring_argb</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-tostring_rgb"><strong>tostring_rgb</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.backend_bases.html#FigureCanvasBase">matplotlib.backend_bases.FigureCanvasBase</a>:<br>
<dl><dt><a name="FigureCanvasAgg-__init__"><strong>__init__</strong></a>(self, figure)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-blit"><strong>blit</strong></a>(self, bbox<font color="#909090">=None</font>)</dt><dd><tt>blit&nbsp;the&nbsp;canvas&nbsp;in&nbsp;bbox&nbsp;(default&nbsp;entire&nbsp;canvas)</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-button_press_event"><strong>button_press_event</strong></a>(self, x, y, button, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any&nbsp;mouse<br>
button&nbsp;press.&nbsp;&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,&nbsp;left.<br>
button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;:class:`MouseEvent`.<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'button_press_event'&nbsp;with&nbsp;a&nbsp;:class:`MouseEvent`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-button_release_event"><strong>button_release_event</strong></a>(self, x, y, button, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any&nbsp;mouse<br>
button&nbsp;release.<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=left<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=bottom<br>
&nbsp;<br>
*guiEvent*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;native&nbsp;UI&nbsp;event&nbsp;that&nbsp;generated&nbsp;the&nbsp;mpl&nbsp;event<br>
&nbsp;<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'button_release_event'&nbsp;with&nbsp;a&nbsp;:class:`MouseEvent`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-draw_cursor"><strong>draw_cursor</strong></a>(self, event)</dt><dd><tt>Draw&nbsp;a&nbsp;cursor&nbsp;in&nbsp;the&nbsp;event.axes&nbsp;if&nbsp;inaxes&nbsp;is&nbsp;not&nbsp;None.&nbsp;&nbsp;Use<br>
native&nbsp;GUI&nbsp;drawing&nbsp;for&nbsp;efficiency&nbsp;if&nbsp;possible</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-draw_event"><strong>draw_event</strong></a>(self, renderer)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'draw_event'&nbsp;with&nbsp;a&nbsp;:class:`DrawEvent`</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-draw_idle"><strong>draw_idle</strong></a>(self, *args, **kwargs)</dt><dd><tt>:meth:`draw`&nbsp;only&nbsp;if&nbsp;idle;&nbsp;defaults&nbsp;to&nbsp;draw&nbsp;but&nbsp;backends&nbsp;can&nbsp;overrride</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-flush_events"><strong>flush_events</strong></a>(self)</dt><dd><tt>Flush&nbsp;the&nbsp;GUI&nbsp;events&nbsp;for&nbsp;the&nbsp;figure.&nbsp;Implemented&nbsp;only&nbsp;for<br>
backends&nbsp;with&nbsp;GUIs.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-get_supported_filetypes"><strong>get_supported_filetypes</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-get_supported_filetypes_grouped"><strong>get_supported_filetypes_grouped</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-get_width_height"><strong>get_width_height</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;width&nbsp;and&nbsp;height&nbsp;in&nbsp;points&nbsp;or&nbsp;pixels<br>
(depending&nbsp;on&nbsp;the&nbsp;backend),&nbsp;truncated&nbsp;to&nbsp;integers</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-idle_event"><strong>idle_event</strong></a>(self, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>call&nbsp;when&nbsp;GUI&nbsp;is&nbsp;idle</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-key_press_event"><strong>key_press_event</strong></a>(self, key, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'key_press_event'&nbsp;with&nbsp;a&nbsp;:class:`KeyEvent`</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-key_release_event"><strong>key_release_event</strong></a>(self, key, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'key_release_event'&nbsp;with&nbsp;a&nbsp;:class:`KeyEvent`</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-motion_notify_event"><strong>motion_notify_event</strong></a>(self, x, y, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any<br>
motion-notify-event.<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=left<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=bottom<br>
&nbsp;<br>
*guiEvent*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;native&nbsp;UI&nbsp;event&nbsp;that&nbsp;generated&nbsp;the&nbsp;mpl&nbsp;event<br>
&nbsp;<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'motion_notify_event'&nbsp;with&nbsp;a&nbsp;:class:`MouseEvent`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-mpl_connect"><strong>mpl_connect</strong></a>(self, s, func)</dt><dd><tt>Connect&nbsp;event&nbsp;with&nbsp;string&nbsp;*s*&nbsp;to&nbsp;*func*.&nbsp;&nbsp;The&nbsp;signature&nbsp;of&nbsp;*func*&nbsp;is::<br>
&nbsp;<br>
&nbsp;&nbsp;def&nbsp;func(event)<br>
&nbsp;<br>
where&nbsp;event&nbsp;is&nbsp;a&nbsp;:class:`matplotlib.backend_bases.Event`.&nbsp;&nbsp;The<br>
following&nbsp;events&nbsp;are&nbsp;recognized<br>
&nbsp;<br>
-&nbsp;'button_press_event'<br>
-&nbsp;'button_release_event'<br>
-&nbsp;'draw_event'<br>
-&nbsp;'key_press_event'<br>
-&nbsp;'key_release_event'<br>
-&nbsp;'motion_notify_event'<br>
-&nbsp;'pick_event'<br>
-&nbsp;'resize_event'<br>
-&nbsp;'scroll_event'<br>
&nbsp;<br>
For&nbsp;the&nbsp;location&nbsp;events&nbsp;(button&nbsp;and&nbsp;key&nbsp;press/release),&nbsp;if&nbsp;the<br>
mouse&nbsp;is&nbsp;over&nbsp;the&nbsp;axes,&nbsp;the&nbsp;variable&nbsp;``event.inaxes``&nbsp;will&nbsp;be<br>
set&nbsp;to&nbsp;the&nbsp;:class:`~matplotlib.axes.Axes`&nbsp;the&nbsp;event&nbsp;occurs&nbsp;is<br>
over,&nbsp;and&nbsp;additionally,&nbsp;the&nbsp;variables&nbsp;``event.xdata``&nbsp;and<br>
``event.ydata``&nbsp;will&nbsp;be&nbsp;defined.&nbsp;&nbsp;This&nbsp;is&nbsp;the&nbsp;mouse&nbsp;location<br>
in&nbsp;data&nbsp;coords.&nbsp;&nbsp;See<br>
:class:`~matplotlib.backend_bases.KeyEvent`&nbsp;and<br>
:class:`~matplotlib.backend_bases.MouseEvent`&nbsp;for&nbsp;more&nbsp;info.<br>
&nbsp;<br>
Return&nbsp;value&nbsp;is&nbsp;a&nbsp;connection&nbsp;id&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;with<br>
:meth:`~matplotlib.backend_bases.Event.mpl_disconnect`.<br>
&nbsp;<br>
Example&nbsp;usage::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;on_press(event):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'you&nbsp;pressed',&nbsp;event.button,&nbsp;event.xdata,&nbsp;event.ydata<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;cid&nbsp;=&nbsp;canvas.<a href="#FigureCanvasAgg-mpl_connect">mpl_connect</a>('button_press_event',&nbsp;on_press)</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-mpl_disconnect"><strong>mpl_disconnect</strong></a>(self, cid)</dt><dd><tt>disconnect&nbsp;callback&nbsp;id&nbsp;cid<br>
&nbsp;<br>
Example&nbsp;usage::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;cid&nbsp;=&nbsp;canvas.<a href="#FigureCanvasAgg-mpl_connect">mpl_connect</a>('button_press_event',&nbsp;on_press)<br>
&nbsp;&nbsp;&nbsp;&nbsp;#...later<br>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.<a href="#FigureCanvasAgg-mpl_disconnect">mpl_disconnect</a>(cid)</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-onHilite"><strong>onHilite</strong></a>(self, ev)</dt><dd><tt>Mouse&nbsp;event&nbsp;processor&nbsp;which&nbsp;highlights&nbsp;the&nbsp;artists<br>
under&nbsp;the&nbsp;cursor.&nbsp;&nbsp;Connect&nbsp;this&nbsp;to&nbsp;the&nbsp;'motion_notify_event'<br>
using::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.<a href="#FigureCanvasAgg-mpl_connect">mpl_connect</a>('motion_notify_event',canvas.onHilite)</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-onRemove"><strong>onRemove</strong></a>(self, ev)</dt><dd><tt>Mouse&nbsp;event&nbsp;processor&nbsp;which&nbsp;removes&nbsp;the&nbsp;top&nbsp;artist<br>
under&nbsp;the&nbsp;cursor.&nbsp;&nbsp;Connect&nbsp;this&nbsp;to&nbsp;the&nbsp;'mouse_press_event'<br>
using::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.<a href="#FigureCanvasAgg-mpl_connect">mpl_connect</a>('mouse_press_event',canvas.onRemove)</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-pick"><strong>pick</strong></a>(self, mouseevent)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-pick_event"><strong>pick_event</strong></a>(self, mouseevent, artist, **kwargs)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;called&nbsp;by&nbsp;artists&nbsp;who&nbsp;are&nbsp;picked&nbsp;and&nbsp;will<br>
fire&nbsp;off&nbsp;:class:`PickEvent`&nbsp;callbacks&nbsp;registered&nbsp;listeners</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-print_bmp"><strong>print_bmp</strong></a> = print_raw(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_emf"><strong>print_emf</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_eps"><strong>print_eps</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_figure"><strong>print_figure</strong></a>(self, filename, dpi<font color="#909090">=None</font>, facecolor<font color="#909090">='w'</font>, edgecolor<font color="#909090">='w'</font>, orientation<font color="#909090">='portrait'</font>, format<font color="#909090">=None</font>, **kwargs)</dt><dd><tt>Render&nbsp;the&nbsp;figure&nbsp;to&nbsp;hardcopy.&nbsp;Set&nbsp;the&nbsp;figure&nbsp;patch&nbsp;face&nbsp;and&nbsp;edge<br>
colors.&nbsp;&nbsp;This&nbsp;is&nbsp;useful&nbsp;because&nbsp;some&nbsp;of&nbsp;the&nbsp;GUIs&nbsp;have&nbsp;a&nbsp;gray&nbsp;figure<br>
face&nbsp;color&nbsp;background&nbsp;and&nbsp;you'll&nbsp;probably&nbsp;want&nbsp;to&nbsp;override&nbsp;this&nbsp;on<br>
hardcopy.<br>
&nbsp;<br>
Arguments&nbsp;are:<br>
&nbsp;<br>
*filename*<br>
&nbsp;&nbsp;&nbsp;&nbsp;can&nbsp;also&nbsp;be&nbsp;a&nbsp;file&nbsp;object&nbsp;on&nbsp;image&nbsp;backends<br>
&nbsp;<br>
*orientation*<br>
&nbsp;&nbsp;&nbsp;&nbsp;only&nbsp;currently&nbsp;applies&nbsp;to&nbsp;PostScript&nbsp;printing.<br>
&nbsp;<br>
*dpi*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;dots&nbsp;per&nbsp;inch&nbsp;to&nbsp;save&nbsp;the&nbsp;figure&nbsp;in;&nbsp;if&nbsp;None,&nbsp;use&nbsp;savefig.dpi<br>
&nbsp;<br>
*facecolor*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;facecolor&nbsp;of&nbsp;the&nbsp;figure<br>
&nbsp;<br>
*edgecolor*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;edgecolor&nbsp;of&nbsp;the&nbsp;figure<br>
&nbsp;<br>
*orientation*&nbsp;&nbsp;'<br>
&nbsp;&nbsp;&nbsp;&nbsp;landscape'&nbsp;|&nbsp;'portrait'&nbsp;(not&nbsp;supported&nbsp;on&nbsp;all&nbsp;backends)<br>
&nbsp;<br>
*format*<br>
&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;set,&nbsp;forcibly&nbsp;set&nbsp;the&nbsp;file&nbsp;format&nbsp;to&nbsp;save&nbsp;to</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-print_pdf"><strong>print_pdf</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_ps"><strong>print_ps</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_rgb"><strong>print_rgb</strong></a> = print_raw(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_svg"><strong>print_svg</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-print_svgz"><strong>print_svgz</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasAgg-resize"><strong>resize</strong></a>(self, w, h)</dt><dd><tt>set&nbsp;the&nbsp;canvas&nbsp;size&nbsp;in&nbsp;pixels</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-resize_event"><strong>resize_event</strong></a>(self)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'resize_event'&nbsp;with&nbsp;a&nbsp;:class:`ResizeEvent`</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-scroll_event"><strong>scroll_event</strong></a>(self, x, y, step, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any<br>
scroll&nbsp;wheel&nbsp;event.&nbsp;&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,<br>
left.&nbsp;&nbsp;button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;MouseEvent.<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'scroll_event'&nbsp;with&nbsp;a&nbsp;:class:`MouseEvent`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-set_window_title"><strong>set_window_title</strong></a>(self, title)</dt><dd><tt>Set&nbsp;the&nbsp;title&nbsp;text&nbsp;of&nbsp;the&nbsp;window&nbsp;containing&nbsp;the&nbsp;figure.&nbsp;&nbsp;Note&nbsp;that<br>
this&nbsp;has&nbsp;no&nbsp;effect&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;window&nbsp;(eg,&nbsp;a&nbsp;PS&nbsp;backend).</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-start_event_loop"><strong>start_event_loop</strong></a>(self, timeout)</dt><dd><tt>Start&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;start&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.&nbsp;&nbsp;This&nbsp;should&nbsp;not&nbsp;be<br>
confused&nbsp;with&nbsp;the&nbsp;main&nbsp;GUI&nbsp;event&nbsp;loop,&nbsp;which&nbsp;is&nbsp;always&nbsp;running<br>
and&nbsp;has&nbsp;nothing&nbsp;to&nbsp;do&nbsp;with&nbsp;this.<br>
&nbsp;<br>
This&nbsp;is&nbsp;implemented&nbsp;only&nbsp;for&nbsp;backends&nbsp;with&nbsp;GUIs.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-start_event_loop_default"><strong>start_event_loop_default</strong></a>(self, timeout<font color="#909090">=0</font>)</dt><dd><tt>Start&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;start&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.&nbsp;&nbsp;This&nbsp;should&nbsp;not&nbsp;be<br>
confused&nbsp;with&nbsp;the&nbsp;main&nbsp;GUI&nbsp;event&nbsp;loop,&nbsp;which&nbsp;is&nbsp;always&nbsp;running<br>
and&nbsp;has&nbsp;nothing&nbsp;to&nbsp;do&nbsp;with&nbsp;this.<br>
&nbsp;<br>
This&nbsp;function&nbsp;provides&nbsp;default&nbsp;event&nbsp;loop&nbsp;functionality&nbsp;based<br>
on&nbsp;time.sleep&nbsp;that&nbsp;is&nbsp;meant&nbsp;to&nbsp;be&nbsp;used&nbsp;until&nbsp;event&nbsp;loop<br>
functions&nbsp;for&nbsp;each&nbsp;of&nbsp;the&nbsp;GUI&nbsp;backends&nbsp;can&nbsp;be&nbsp;written.&nbsp;&nbsp;As<br>
such,&nbsp;it&nbsp;throws&nbsp;a&nbsp;deprecated&nbsp;warning.<br>
&nbsp;<br>
Call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#FigureCanvasAgg-start_event_loop_default">start_event_loop_default</a>(self,timeout=0)<br>
&nbsp;<br>
This&nbsp;call&nbsp;blocks&nbsp;until&nbsp;a&nbsp;callback&nbsp;function&nbsp;triggers<br>
<a href="#FigureCanvasAgg-stop_event_loop">stop_event_loop</a>()&nbsp;or&nbsp;*timeout*&nbsp;is&nbsp;reached.&nbsp;&nbsp;If&nbsp;*timeout*&nbsp;is<br>
&lt;=0,&nbsp;never&nbsp;timeout.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-stop_event_loop"><strong>stop_event_loop</strong></a>(self)</dt><dd><tt>Stop&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;stop&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.<br>
&nbsp;<br>
This&nbsp;is&nbsp;implemented&nbsp;only&nbsp;for&nbsp;backends&nbsp;with&nbsp;GUIs.</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-stop_event_loop_default"><strong>stop_event_loop_default</strong></a>(self)</dt><dd><tt>Stop&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;stop&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.<br>
&nbsp;<br>
Call&nbsp;signature::<br>
&nbsp;<br>
<a href="#FigureCanvasAgg-stop_event_loop_default">stop_event_loop_default</a>(self)</tt></dd></dl>

<dl><dt><a name="FigureCanvasAgg-switch_backends"><strong>switch_backends</strong></a>(self, FigureCanvasClass)</dt><dd><tt>instantiate&nbsp;an&nbsp;instance&nbsp;of&nbsp;FigureCanvasClass<br>
&nbsp;<br>
This&nbsp;is&nbsp;used&nbsp;for&nbsp;backend&nbsp;switching,&nbsp;eg,&nbsp;to&nbsp;instantiate&nbsp;a<br>
FigureCanvasPS&nbsp;from&nbsp;a&nbsp;FigureCanvasGTK.&nbsp;&nbsp;Note,&nbsp;deep&nbsp;copying&nbsp;is<br>
not&nbsp;done,&nbsp;so&nbsp;any&nbsp;changes&nbsp;to&nbsp;one&nbsp;of&nbsp;the&nbsp;instances&nbsp;(eg,&nbsp;setting<br>
figure&nbsp;size&nbsp;or&nbsp;line&nbsp;props),&nbsp;will&nbsp;be&nbsp;reflected&nbsp;in&nbsp;the&nbsp;other</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.backend_bases.html#FigureCanvasBase">matplotlib.backend_bases.FigureCanvasBase</a>:<br>
<dl><dt><strong>events</strong> = ['resize_event', 'draw_event', 'key_press_event', 'key_release_event', 'button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event', 'pick_event', 'idle_event']</dl>

<dl><dt><strong>filetypes</strong> = {'emf': 'Enhanced Metafile', 'eps': 'Encapsulated Postscript', 'pdf': 'Portable Document Format', 'png': 'Portable Network Graphics', 'ps': 'Postscript', 'raw': 'Raw RGBA bitmap', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector Graphics'}</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="RendererAgg">class <strong>RendererAgg</strong></a>(<a href="matplotlib.backend_bases.html#RendererBase">matplotlib.backend_bases.RendererBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>The&nbsp;renderer&nbsp;handles&nbsp;all&nbsp;the&nbsp;drawing&nbsp;primitives&nbsp;using&nbsp;a&nbsp;graphics<br>
context&nbsp;instance&nbsp;that&nbsp;controls&nbsp;the&nbsp;colors/styles<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="RendererAgg-__init__"><strong>__init__</strong></a>(self, width, height, dpi)</dt></dl>

<dl><dt><a name="RendererAgg-buffer_rgba"><strong>buffer_rgba</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="RendererAgg-clear"><strong>clear</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererAgg-draw_mathtext"><strong>draw_mathtext</strong></a>(self, gc, x, y, s, prop, angle)</dt><dd><tt>Draw&nbsp;the&nbsp;math&nbsp;text&nbsp;using&nbsp;matplotlib.mathtext</tt></dd></dl>

<dl><dt><a name="RendererAgg-draw_tex"><strong>draw_tex</strong></a>(self, gc, x, y, s, prop, angle)</dt></dl>

<dl><dt><a name="RendererAgg-draw_text"><strong>draw_text</strong></a>(self, gc, x, y, s, prop, angle, ismath)</dt><dd><tt>Render&nbsp;the&nbsp;text</tt></dd></dl>

<dl><dt><a name="RendererAgg-get_canvas_width_height"><strong>get_canvas_width_height</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;canvas&nbsp;width&nbsp;and&nbsp;height&nbsp;in&nbsp;display&nbsp;coords</tt></dd></dl>

<dl><dt><a name="RendererAgg-get_text_width_height_descent"><strong>get_text_width_height_descent</strong></a>(self, s, prop, ismath)</dt><dd><tt>get&nbsp;the&nbsp;width&nbsp;and&nbsp;height&nbsp;in&nbsp;display&nbsp;coords&nbsp;of&nbsp;the&nbsp;string&nbsp;s<br>
with&nbsp;FontPropertry&nbsp;prop<br>
&nbsp;<br>
#&nbsp;passing&nbsp;rgb&nbsp;is&nbsp;a&nbsp;little&nbsp;hack&nbsp;to&nbsp;make&nbsp;cacheing&nbsp;in&nbsp;the<br>
#&nbsp;texmanager&nbsp;more&nbsp;efficient.&nbsp;&nbsp;It&nbsp;is&nbsp;not&nbsp;meant&nbsp;to&nbsp;be&nbsp;used<br>
#&nbsp;outside&nbsp;the&nbsp;backend</tt></dd></dl>

<dl><dt><a name="RendererAgg-option_image_nocomposite"><strong>option_image_nocomposite</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererAgg-points_to_pixels"><strong>points_to_pixels</strong></a>(self, points)</dt><dd><tt>convert&nbsp;point&nbsp;measures&nbsp;to&nbsp;pixes&nbsp;using&nbsp;dpi&nbsp;and&nbsp;the&nbsp;pixels&nbsp;per<br>
inch&nbsp;of&nbsp;the&nbsp;display</tt></dd></dl>

<dl><dt><a name="RendererAgg-tostring_argb"><strong>tostring_argb</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererAgg-tostring_rgb"><strong>tostring_rgb</strong></a>(self)</dt></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>debug</strong> = 1</dl>

<dl><dt><strong>texd</strong> = {}</dl>

<hr>
Methods inherited from <a href="matplotlib.backend_bases.html#RendererBase">matplotlib.backend_bases.RendererBase</a>:<br>
<dl><dt><a name="RendererAgg-close_group"><strong>close_group</strong></a>(self, s)</dt><dd><tt>Close&nbsp;a&nbsp;grouping&nbsp;element&nbsp;with&nbsp;label&nbsp;*s*<br>
Is&nbsp;only&nbsp;currently&nbsp;used&nbsp;by&nbsp;:mod:`~matplotlib.backends.backend_svg`</tt></dd></dl>

<dl><dt><a name="RendererAgg-draw_image"><strong>draw_image</strong></a>(self, x, y, im, bbox, clippath<font color="#909090">=None</font>, clippath_trans<font color="#909090">=None</font>)</dt><dd><tt>Draw&nbsp;the&nbsp;image&nbsp;instance&nbsp;into&nbsp;the&nbsp;current&nbsp;axes;<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;the&nbsp;distance&nbsp;in&nbsp;pixels&nbsp;from&nbsp;the&nbsp;left&nbsp;hand&nbsp;side&nbsp;of&nbsp;the&nbsp;canvas.<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;distance&nbsp;from&nbsp;the&nbsp;origin.&nbsp;&nbsp;That&nbsp;is,&nbsp;if&nbsp;origin&nbsp;is<br>
&nbsp;&nbsp;&nbsp;&nbsp;upper,&nbsp;y&nbsp;is&nbsp;the&nbsp;distance&nbsp;from&nbsp;top.&nbsp;&nbsp;If&nbsp;origin&nbsp;is&nbsp;lower,&nbsp;y<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;the&nbsp;distance&nbsp;from&nbsp;bottom<br>
&nbsp;<br>
*im*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`matplotlib._image.Image`&nbsp;instance<br>
&nbsp;<br>
*bbox*<br>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;:class:`matplotlib.transforms.Bbox`&nbsp;instance&nbsp;for&nbsp;clipping,&nbsp;or<br>
&nbsp;&nbsp;&nbsp;&nbsp;None</tt></dd></dl>

<dl><dt><a name="RendererAgg-draw_markers"><strong>draw_markers</strong></a>(self, gc, marker_path, marker_trans, path, trans, rgbFace<font color="#909090">=None</font>)</dt><dd><tt>Draws&nbsp;a&nbsp;marker&nbsp;at&nbsp;each&nbsp;of&nbsp;the&nbsp;vertices&nbsp;in&nbsp;path.&nbsp;&nbsp;This&nbsp;includes<br>
all&nbsp;vertices,&nbsp;including&nbsp;control&nbsp;points&nbsp;on&nbsp;curves.&nbsp;&nbsp;To&nbsp;avoid<br>
that&nbsp;behavior,&nbsp;those&nbsp;vertices&nbsp;should&nbsp;be&nbsp;removed&nbsp;before&nbsp;calling<br>
this&nbsp;function.<br>
&nbsp;<br>
*gc*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`GraphicsContextBase`&nbsp;instance<br>
&nbsp;<br>
*marker_trans*<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;an&nbsp;affine&nbsp;transform&nbsp;applied&nbsp;to&nbsp;the&nbsp;marker.<br>
&nbsp;<br>
*trans*<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;an&nbsp;affine&nbsp;transform&nbsp;applied&nbsp;to&nbsp;the&nbsp;path.<br>
&nbsp;<br>
This&nbsp;provides&nbsp;a&nbsp;fallback&nbsp;implementation&nbsp;of&nbsp;draw_markers&nbsp;that<br>
makes&nbsp;multiple&nbsp;calls&nbsp;to&nbsp;:meth:`draw_path`.&nbsp;&nbsp;Some&nbsp;backends&nbsp;may<br>
want&nbsp;to&nbsp;override&nbsp;this&nbsp;method&nbsp;in&nbsp;order&nbsp;to&nbsp;draw&nbsp;the&nbsp;marker&nbsp;only<br>
once&nbsp;and&nbsp;reuse&nbsp;it&nbsp;multiple&nbsp;times.</tt></dd></dl>

<dl><dt><a name="RendererAgg-draw_path"><strong>draw_path</strong></a>(self, gc, path, transform, rgbFace<font color="#909090">=None</font>)</dt><dd><tt>Draws&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;using&nbsp;the<br>
given&nbsp;affine&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="RendererAgg-draw_path_collection"><strong>draw_path_collection</strong></a>(self, master_transform, cliprect, clippath, clippath_trans, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds)</dt><dd><tt>Draws&nbsp;a&nbsp;collection&nbsp;of&nbsp;paths,&nbsp;selecting&nbsp;drawing&nbsp;properties&nbsp;from<br>
the&nbsp;lists&nbsp;*facecolors*,&nbsp;*edgecolors*,&nbsp;*linewidths*,<br>
*linestyles*&nbsp;and&nbsp;*antialiaseds*.&nbsp;*offsets*&nbsp;is&nbsp;a&nbsp;list&nbsp;of<br>
offsets&nbsp;to&nbsp;apply&nbsp;to&nbsp;each&nbsp;of&nbsp;the&nbsp;paths.&nbsp;&nbsp;The&nbsp;offsets&nbsp;in<br>
*offsets*&nbsp;are&nbsp;first&nbsp;transformed&nbsp;by&nbsp;*offsetTrans*&nbsp;before<br>
being&nbsp;applied.<br>
&nbsp;<br>
This&nbsp;provides&nbsp;a&nbsp;fallback&nbsp;implementation&nbsp;of<br>
:meth:`draw_path_collection`&nbsp;that&nbsp;makes&nbsp;multiple&nbsp;calls&nbsp;to<br>
draw_path.&nbsp;&nbsp;Some&nbsp;backends&nbsp;may&nbsp;want&nbsp;to&nbsp;override&nbsp;this&nbsp;in&nbsp;order<br>
to&nbsp;render&nbsp;each&nbsp;set&nbsp;of&nbsp;path&nbsp;data&nbsp;only&nbsp;once,&nbsp;and&nbsp;then&nbsp;reference<br>
that&nbsp;path&nbsp;multiple&nbsp;times&nbsp;with&nbsp;the&nbsp;different&nbsp;offsets,&nbsp;colors,<br>
styles&nbsp;etc.&nbsp;&nbsp;The&nbsp;generator&nbsp;methods<br>
:meth:`_iter_collection_raw_paths`&nbsp;and<br>
:meth:`_iter_collection`&nbsp;are&nbsp;provided&nbsp;to&nbsp;help&nbsp;with&nbsp;(and<br>
standardize)&nbsp;the&nbsp;implementation&nbsp;across&nbsp;backends.&nbsp;&nbsp;It&nbsp;is&nbsp;highly<br>
recommended&nbsp;to&nbsp;use&nbsp;those&nbsp;generators,&nbsp;so&nbsp;that&nbsp;changes&nbsp;to&nbsp;the<br>
behavior&nbsp;of&nbsp;:meth:`draw_path_collection`&nbsp;can&nbsp;be&nbsp;made&nbsp;globally.</tt></dd></dl>

<dl><dt><a name="RendererAgg-draw_quad_mesh"><strong>draw_quad_mesh</strong></a>(self, master_transform, cliprect, clippath, clippath_trans, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, showedges)</dt><dd><tt>This&nbsp;provides&nbsp;a&nbsp;fallback&nbsp;implementation&nbsp;of<br>
:meth:`draw_quad_mesh`&nbsp;that&nbsp;generates&nbsp;paths&nbsp;and&nbsp;then&nbsp;calls<br>
:meth:`draw_path_collection`.</tt></dd></dl>

<dl><dt><a name="RendererAgg-flipy"><strong>flipy</strong></a>(self)</dt><dd><tt>Return&nbsp;true&nbsp;if&nbsp;y&nbsp;small&nbsp;numbers&nbsp;are&nbsp;top&nbsp;for&nbsp;renderer&nbsp;Is&nbsp;used<br>
for&nbsp;drawing&nbsp;text&nbsp;(:mod:`matplotlib.text`)&nbsp;and&nbsp;images<br>
(:mod:`matplotlib.image`)&nbsp;only</tt></dd></dl>

<dl><dt><a name="RendererAgg-get_image_magnification"><strong>get_image_magnification</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;factor&nbsp;by&nbsp;which&nbsp;to&nbsp;magnify&nbsp;images&nbsp;passed&nbsp;to&nbsp;:meth:`draw_image`.<br>
Allows&nbsp;a&nbsp;backend&nbsp;to&nbsp;have&nbsp;images&nbsp;at&nbsp;a&nbsp;different&nbsp;resolution&nbsp;to&nbsp;other<br>
artists.</tt></dd></dl>

<dl><dt><a name="RendererAgg-get_texmanager"><strong>get_texmanager</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;:class:`matplotlib.texmanager.TexManager`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RendererAgg-new_gc"><strong>new_gc</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;:class:`GraphicsContextBase`</tt></dd></dl>

<dl><dt><a name="RendererAgg-open_group"><strong>open_group</strong></a>(self, s)</dt><dd><tt>Open&nbsp;a&nbsp;grouping&nbsp;element&nbsp;with&nbsp;label&nbsp;*s*.&nbsp;Is&nbsp;only&nbsp;currently&nbsp;used&nbsp;by<br>
:mod:`~matplotlib.backends.backend_svg`</tt></dd></dl>

<dl><dt><a name="RendererAgg-start_rasterizing"><strong>start_rasterizing</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererAgg-stop_rasterizing"><strong>stop_rasterizing</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererAgg-strip_math"><strong>strip_math</strong></a>(self, s)</dt></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-FT2Font"><strong>FT2Font</strong></a>(...)</dt><dd><tt>FT2Font</tt></dd></dl>
 <dl><dt><a name="-fromarray"><strong>fromarray</strong></a>(...)</dt><dd><tt>fromarray</tt></dd></dl>
 <dl><dt><a name="-new_figure_manager"><strong>new_figure_manager</strong></a>(num, *args, **kwargs)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;figure&nbsp;manager&nbsp;instance</tt></dd></dl>
</td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>LOAD_FORCE_AUTOHINT</strong> = 32L<br>
<strong>backend_version</strong> = 'v2.2'<br>
<strong>division</strong> = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)<br>
<strong>rcParams</strong> = {'figure.subplot.right': 0.90000000000000002, 'm...persize': 'letter', 'svg.embed_char_paths': True}<br>
<strong>verbose</strong> = &lt;matplotlib.Verbose instance at 0x7fe18db42248&gt;</td></tr></table>
@footer@