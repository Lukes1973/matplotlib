@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.backend_bases</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib/python2.5/site-packages/matplotlib/backend_bases.py">/home/jdhunter/dev/lib/python2.5/site-packages/matplotlib/backend_bases.py</a></font></td></tr></table>
    <p><tt>Abstract&nbsp;base&nbsp;classes&nbsp;define&nbsp;the&nbsp;primitives&nbsp;that&nbsp;renderers&nbsp;and<br>
graphics&nbsp;contexts&nbsp;must&nbsp;implement&nbsp;to&nbsp;serve&nbsp;as&nbsp;a&nbsp;matplotlib&nbsp;backend</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib.cbook.html">matplotlib.cbook</a><br>
<a href="matplotlib.colors.html">matplotlib.colors</a><br>
<a href="matplotlib.numerix.npyma.html">matplotlib.numerix.npyma</a><br>
</td><td width="25%" valign=top><a href="numpy.html">numpy</a><br>
<a href="os.html">os</a><br>
<a href="sys.html">sys</a><br>
</td><td width="25%" valign=top><a href="matplotlib.transforms.html">matplotlib.transforms</a><br>
<a href="warnings.html">warnings</a><br>
<a href="matplotlib.widgets.html">matplotlib.widgets</a><br>
</td><td width="25%" valign=top></td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#Cursors">Cursors</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#Event">Event</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#DrawEvent">DrawEvent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#KeyEvent">KeyEvent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#MouseEvent">MouseEvent</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#PickEvent">PickEvent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#ResizeEvent">ResizeEvent</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#FigureCanvasBase">FigureCanvasBase</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#FigureManagerBase">FigureManagerBase</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#GraphicsContextBase">GraphicsContextBase</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#NavigationToolbar2">NavigationToolbar2</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#RendererBase">RendererBase</a>
</font></dt></dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Cursors">class <strong>Cursors</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>#&nbsp;cursors<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Data and other attributes defined here:<br>
<dl><dt><strong>HAND</strong> = 0</dl>

<dl><dt><strong>MOVE</strong> = 3</dl>

<dl><dt><strong>POINTER</strong> = 1</dl>

<dl><dt><strong>SELECT_REGION</strong> = 2</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="DrawEvent">class <strong>DrawEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;event&nbsp;triggered&nbsp;by&nbsp;a&nbsp;draw&nbsp;operation&nbsp;on&nbsp;the&nbsp;canvas<br>
&nbsp;<br>
Attributes&nbsp;are<br>
&nbsp;&nbsp;name<br>
&nbsp;&nbsp;canvas<br>
&nbsp;&nbsp;renderer&nbsp;-&nbsp;the&nbsp;Renderer&nbsp;instance<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="DrawEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, renderer)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Event">class <strong>Event</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;matplotlib&nbsp;event.&nbsp;&nbsp;Attach&nbsp;additional&nbsp;attributes&nbsp;as&nbsp;defined&nbsp;in<br>
FigureCanvas.connect.&nbsp;&nbsp;The&nbsp;following&nbsp;attributes&nbsp;are&nbsp;defined&nbsp;and<br>
shown&nbsp;with&nbsp;their&nbsp;default&nbsp;values<br>
name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;event&nbsp;name<br>
canvas&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;FigureCanvas&nbsp;instance&nbsp;generating&nbsp;the&nbsp;event<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Event-__init__"><strong>__init__</strong></a>(self, name, canvas, guiEvent<font color="#909090">=None</font>)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FigureCanvasBase">class <strong>FigureCanvasBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>The&nbsp;canvas&nbsp;the&nbsp;figure&nbsp;renders&nbsp;into.<br>
&nbsp;<br>
Public&nbsp;attribute<br>
&nbsp;<br>
&nbsp;&nbsp;figure&nbsp;-&nbsp;A&nbsp;Figure&nbsp;instance<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FigureCanvasBase-__init__"><strong>__init__</strong></a>(self, figure)</dt></dl>

<dl><dt><a name="FigureCanvasBase-blit"><strong>blit</strong></a>(self, bbox<font color="#909090">=None</font>)</dt><dd><tt>blit&nbsp;the&nbsp;canvas&nbsp;in&nbsp;bbox&nbsp;(default&nbsp;entire&nbsp;canvas)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-button_press_event"><strong>button_press_event</strong></a>(self, x, y, button, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any&nbsp;mouse<br>
button&nbsp;press.&nbsp;&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,&nbsp;left.<br>
button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;<a href="#MouseEvent">MouseEvent</a></tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-button_release_event"><strong>button_release_event</strong></a>(self, x, y, button, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any&nbsp;mouse<br>
button&nbsp;release.&nbsp;&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,&nbsp;left.<br>
button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;<a href="#MouseEvent">MouseEvent</a></tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-draw"><strong>draw</strong></a>(self, *args, **kwargs)</dt><dd><tt>Render&nbsp;the&nbsp;figure</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-draw_cursor"><strong>draw_cursor</strong></a>(self, event)</dt><dd><tt>Draw&nbsp;a&nbsp;cursor&nbsp;in&nbsp;the&nbsp;event.axes&nbsp;if&nbsp;inaxes&nbsp;is&nbsp;not&nbsp;None.&nbsp;&nbsp;Use<br>
native&nbsp;GUI&nbsp;drawing&nbsp;for&nbsp;efficiency&nbsp;if&nbsp;possible</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-draw_event"><strong>draw_event</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="FigureCanvasBase-draw_idle"><strong>draw_idle</strong></a>(self, *args, **kwargs)</dt><dd><tt>draw&nbsp;only&nbsp;if&nbsp;idle;&nbsp;defaults&nbsp;to&nbsp;draw&nbsp;but&nbsp;backends&nbsp;can&nbsp;overrride</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-get_default_filetype"><strong>get_default_filetype</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasBase-get_supported_filetypes"><strong>get_supported_filetypes</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasBase-get_supported_filetypes_grouped"><strong>get_supported_filetypes_grouped</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasBase-get_width_height"><strong>get_width_height</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;width&nbsp;and&nbsp;height&nbsp;in&nbsp;points&nbsp;or&nbsp;pixels<br>
(depending&nbsp;on&nbsp;the&nbsp;backend),&nbsp;truncated&nbsp;to&nbsp;integers</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-key_press_event"><strong>key_press_event</strong></a>(self, key, guiEvent<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="FigureCanvasBase-key_release_event"><strong>key_release_event</strong></a>(self, key, guiEvent<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="FigureCanvasBase-motion_notify_event"><strong>motion_notify_event</strong></a>(self, x, y, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any<br>
motion-notify-event.&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,&nbsp;left.<br>
button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;<a href="#MouseEvent">MouseEvent</a></tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-mpl_connect"><strong>mpl_connect</strong></a>(self, s, func)</dt><dd><tt>Connect&nbsp;event&nbsp;with&nbsp;string&nbsp;s&nbsp;to&nbsp;func.&nbsp;&nbsp;The&nbsp;signature&nbsp;of&nbsp;func&nbsp;is<br>
&nbsp;<br>
&nbsp;&nbsp;def&nbsp;func(event)<br>
&nbsp;<br>
where&nbsp;event&nbsp;is&nbsp;a&nbsp;MplEvent.&nbsp;&nbsp;The&nbsp;following&nbsp;events&nbsp;are&nbsp;recognized<br>
&nbsp;<br>
'resize_event',<br>
'draw_event',<br>
'key_press_event',<br>
'key_release_event',<br>
'button_press_event',<br>
'button_release_event',<br>
'scroll_event',<br>
'motion_notify_event',<br>
'pick_event',<br>
&nbsp;<br>
&nbsp;<br>
For&nbsp;the&nbsp;three&nbsp;events&nbsp;above,&nbsp;if&nbsp;the&nbsp;mouse&nbsp;is&nbsp;over&nbsp;the&nbsp;axes,<br>
the&nbsp;variable&nbsp;event.inaxes&nbsp;will&nbsp;be&nbsp;set&nbsp;to&nbsp;the&nbsp;axes&nbsp;it&nbsp;is&nbsp;over,<br>
and&nbsp;additionally,&nbsp;the&nbsp;variables&nbsp;event.xdata&nbsp;and&nbsp;event.ydata<br>
will&nbsp;be&nbsp;defined.&nbsp;&nbsp;This&nbsp;is&nbsp;the&nbsp;mouse&nbsp;location&nbsp;in&nbsp;data&nbsp;coords.<br>
See&nbsp;backend_bases.MplEvent.<br>
&nbsp;<br>
return&nbsp;value&nbsp;is&nbsp;a&nbsp;connection&nbsp;id&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;with<br>
mpl_disconnect</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-mpl_disconnect"><strong>mpl_disconnect</strong></a>(self, cid)</dt><dd><tt>disconnect&nbsp;callback&nbsp;id&nbsp;cid</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-onHilite"><strong>onHilite</strong></a>(self, ev)</dt><dd><tt>Mouse&nbsp;event&nbsp;processor&nbsp;which&nbsp;highlights&nbsp;the&nbsp;artists<br>
under&nbsp;the&nbsp;cursor.&nbsp;&nbsp;Connect&nbsp;this&nbsp;to&nbsp;the&nbsp;motion_notify_event<br>
using&nbsp;canvas.<a href="#FigureCanvasBase-mpl_connect">mpl_connect</a>('motion_notify_event',canvas.onHilite)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-onRemove"><strong>onRemove</strong></a>(self, ev)</dt><dd><tt>Mouse&nbsp;event&nbsp;processor&nbsp;which&nbsp;removes&nbsp;the&nbsp;top&nbsp;artist<br>
under&nbsp;the&nbsp;cursor.&nbsp;&nbsp;Connect&nbsp;this&nbsp;to&nbsp;the&nbsp;mouse_press_event<br>
using&nbsp;canvas.<a href="#FigureCanvasBase-mpl_connect">mpl_connect</a>('mouse_press_event',canvas.onRemove)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-pick"><strong>pick</strong></a>(self, mouseevent)</dt></dl>

<dl><dt><a name="FigureCanvasBase-pick_event"><strong>pick_event</strong></a>(self, mouseevent, artist, **kwargs)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;called&nbsp;by&nbsp;artists&nbsp;who&nbsp;are&nbsp;picked&nbsp;and&nbsp;will<br>
fire&nbsp;off&nbsp;<a href="#PickEvent">PickEvent</a>&nbsp;callbacks&nbsp;registered&nbsp;listeners</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-print_bmp"><strong>print_bmp</strong></a> = <a href="#FigureCanvasBase-print_raw">print_raw</a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_emf"><strong>print_emf</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_eps"><strong>print_eps</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_figure"><strong>print_figure</strong></a>(self, filename, dpi<font color="#909090">=None</font>, facecolor<font color="#909090">='w'</font>, edgecolor<font color="#909090">='w'</font>, orientation<font color="#909090">='portrait'</font>, format<font color="#909090">=None</font>, **kwargs)</dt><dd><tt>Render&nbsp;the&nbsp;figure&nbsp;to&nbsp;hardcopy.&nbsp;Set&nbsp;the&nbsp;figure&nbsp;patch&nbsp;face&nbsp;and&nbsp;edge<br>
colors.&nbsp;&nbsp;This&nbsp;is&nbsp;useful&nbsp;because&nbsp;some&nbsp;of&nbsp;the&nbsp;GUIs&nbsp;have&nbsp;a&nbsp;gray&nbsp;figure<br>
face&nbsp;color&nbsp;background&nbsp;and&nbsp;you'll&nbsp;probably&nbsp;want&nbsp;to&nbsp;override&nbsp;this&nbsp;on<br>
hardcopy.<br>
&nbsp;<br>
filename&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;can&nbsp;also&nbsp;be&nbsp;a&nbsp;file&nbsp;object&nbsp;on&nbsp;image&nbsp;backends<br>
orientation&nbsp;-&nbsp;only&nbsp;currently&nbsp;applies&nbsp;to&nbsp;PostScript&nbsp;printing.<br>
dpi&nbsp;-&nbsp;the&nbsp;dots&nbsp;per&nbsp;inch&nbsp;to&nbsp;save&nbsp;the&nbsp;figure&nbsp;in;&nbsp;if&nbsp;None,&nbsp;use&nbsp;savefig.dpi<br>
facecolor&nbsp;-&nbsp;the&nbsp;facecolor&nbsp;of&nbsp;the&nbsp;figure<br>
edgecolor&nbsp;-&nbsp;the&nbsp;edgecolor&nbsp;of&nbsp;the&nbsp;figure<br>
orientation&nbsp;-&nbsp;'landscape'&nbsp;|&nbsp;'portrait'&nbsp;(not&nbsp;supported&nbsp;on&nbsp;all&nbsp;backends)<br>
format&nbsp;-&nbsp;when&nbsp;set,&nbsp;forcibly&nbsp;set&nbsp;the&nbsp;file&nbsp;format&nbsp;to&nbsp;save&nbsp;to</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-print_pdf"><strong>print_pdf</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_png"><strong>print_png</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_ps"><strong>print_ps</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_raw"><strong>print_raw</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_rgb"><strong>print_rgb</strong></a> = <a href="#FigureCanvasBase-print_raw">print_raw</a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_svg"><strong>print_svg</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_svgz"><strong>print_svgz</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-resize"><strong>resize</strong></a>(self, w, h)</dt><dd><tt>set&nbsp;the&nbsp;canvas&nbsp;size&nbsp;in&nbsp;pixels</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-resize_event"><strong>resize_event</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasBase-scroll_event"><strong>scroll_event</strong></a>(self, x, y, button, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any<br>
scroll&nbsp;wheel&nbsp;event.&nbsp;&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,<br>
left.&nbsp;&nbsp;button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;<a href="#MouseEvent">MouseEvent</a></tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-set_window_title"><strong>set_window_title</strong></a>(self, title)</dt><dd><tt>Set&nbsp;the&nbsp;title&nbsp;text&nbsp;of&nbsp;the&nbsp;window&nbsp;containing&nbsp;the&nbsp;figure.&nbsp;&nbsp;Note&nbsp;that<br>
this&nbsp;has&nbsp;no&nbsp;effect&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;window&nbsp;(eg,&nbsp;a&nbsp;PS&nbsp;backend).</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-switch_backends"><strong>switch_backends</strong></a>(self, FigureCanvasClass)</dt><dd><tt>instantiate&nbsp;an&nbsp;instance&nbsp;of&nbsp;FigureCanvasClass<br>
&nbsp;<br>
This&nbsp;is&nbsp;used&nbsp;for&nbsp;backend&nbsp;switching,&nbsp;eg,&nbsp;to&nbsp;instantiate&nbsp;a<br>
FigureCanvasPS&nbsp;from&nbsp;a&nbsp;FigureCanvasGTK.&nbsp;&nbsp;Note,&nbsp;deep&nbsp;copying&nbsp;is<br>
not&nbsp;done,&nbsp;so&nbsp;any&nbsp;changes&nbsp;to&nbsp;one&nbsp;of&nbsp;the&nbsp;instances&nbsp;(eg,&nbsp;setting<br>
figure&nbsp;size&nbsp;or&nbsp;line&nbsp;props),&nbsp;will&nbsp;be&nbsp;reflected&nbsp;in&nbsp;the&nbsp;other</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>events</strong> = ('resize_event', 'draw_event', 'key_press_event', 'key_release_event', 'button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event', 'pick_event')</dl>

<dl><dt><strong>filetypes</strong> = {'emf': 'Enhanced Metafile', 'eps': 'Encapsulated Postscript', 'pdf': 'Portable Document Format', 'png': 'Portable Network Graphics', 'ps': 'Postscript', 'raw': 'Raw RGBA bitmap', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector Graphics'}</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FigureManagerBase">class <strong>FigureManagerBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Helper&nbsp;class&nbsp;for&nbsp;matlab&nbsp;mode,&nbsp;wraps&nbsp;everything&nbsp;up&nbsp;into&nbsp;a&nbsp;neat&nbsp;bundle<br>
&nbsp;<br>
Public&nbsp;attibutes<br>
canvas&nbsp;-&nbsp;A&nbsp;FigureCanvas&nbsp;instance<br>
num&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;The&nbsp;figure&nbsp;number<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FigureManagerBase-__init__"><strong>__init__</strong></a>(self, canvas, num)</dt></dl>

<dl><dt><a name="FigureManagerBase-destroy"><strong>destroy</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureManagerBase-full_screen_toggle"><strong>full_screen_toggle</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureManagerBase-key_press"><strong>key_press</strong></a>(self, event)</dt></dl>

<dl><dt><a name="FigureManagerBase-resize"><strong>resize</strong></a>(self, w, h)</dt><dd><tt>For&nbsp;gui&nbsp;backends:&nbsp;resize&nbsp;window&nbsp;in&nbsp;pixels</tt></dd></dl>

<dl><dt><a name="FigureManagerBase-set_window_title"><strong>set_window_title</strong></a>(self, title)</dt><dd><tt>Set&nbsp;the&nbsp;title&nbsp;text&nbsp;of&nbsp;the&nbsp;window&nbsp;containing&nbsp;the&nbsp;figure.&nbsp;&nbsp;Note&nbsp;that<br>
this&nbsp;has&nbsp;no&nbsp;effect&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;window&nbsp;(eg,&nbsp;a&nbsp;PS&nbsp;backend).</tt></dd></dl>

<dl><dt><a name="FigureManagerBase-show_popup"><strong>show_popup</strong></a>(self, msg)</dt><dd><tt>Display&nbsp;message&nbsp;in&nbsp;a&nbsp;popup&nbsp;--&nbsp;GUI&nbsp;only</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="GraphicsContextBase">class <strong>GraphicsContextBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;abstract&nbsp;base&nbsp;class&nbsp;that&nbsp;provides&nbsp;color,&nbsp;line&nbsp;styles,&nbsp;etc...<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="GraphicsContextBase-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<dl><dt><a name="GraphicsContextBase-copy_properties"><strong>copy_properties</strong></a>(self, gc)</dt><dd><tt>Copy&nbsp;properties&nbsp;from&nbsp;gc&nbsp;to&nbsp;self</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt><dd><tt>Return&nbsp;true&nbsp;if&nbsp;the&nbsp;object&nbsp;should&nbsp;try&nbsp;to&nbsp;do&nbsp;antialiased&nbsp;rendering</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_capstyle"><strong>get_capstyle</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;capstyle&nbsp;as&nbsp;a&nbsp;string&nbsp;in&nbsp;('butt',&nbsp;'round',&nbsp;'projecting')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_clip_rectangle"><strong>get_clip_rectangle</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;rectangle&nbsp;as&nbsp;(left,&nbsp;bottom,&nbsp;width,&nbsp;height)</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_dashes"><strong>get_dashes</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;dash&nbsp;information&nbsp;as&nbsp;an&nbsp;offset&nbsp;dashlist&nbsp;tuple&nbsp;The<br>
dash&nbsp;list&nbsp;is&nbsp;a&nbsp;even&nbsp;size&nbsp;list&nbsp;that&nbsp;gives&nbsp;the&nbsp;ink&nbsp;on,&nbsp;ink&nbsp;off<br>
in&nbsp;pixels.&nbsp;&nbsp;See&nbsp;p107&nbsp;of&nbsp;to&nbsp;postscript&nbsp;BLUEBOOK&nbsp;for&nbsp;more&nbsp;info<br>
&nbsp;<br>
Default&nbsp;value&nbsp;is&nbsp;None</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>Gets&nbsp;the&nbsp;current&nbsp;hatch&nbsp;style</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_joinstyle"><strong>get_joinstyle</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;line&nbsp;join&nbsp;style&nbsp;as&nbsp;one&nbsp;of&nbsp;('miter',&nbsp;'round',&nbsp;'bevel')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_linestyle"><strong>get_linestyle</strong></a>(self, style)</dt><dd><tt>Return&nbsp;the&nbsp;linestyle:&nbsp;one&nbsp;of&nbsp;('solid',&nbsp;'dashed',&nbsp;'dashdot',<br>
'dotted').</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;line&nbsp;width&nbsp;in&nbsp;points&nbsp;as&nbsp;a&nbsp;scalar</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_rgb"><strong>get_rgb</strong></a>(self)</dt><dd><tt>returns&nbsp;a&nbsp;tuple&nbsp;of&nbsp;three&nbsp;floats&nbsp;from&nbsp;0-1.&nbsp;&nbsp;color&nbsp;can&nbsp;be&nbsp;a<br>
matlab&nbsp;format&nbsp;string,&nbsp;a&nbsp;html&nbsp;hex&nbsp;color&nbsp;string,&nbsp;or&nbsp;a&nbsp;rgb&nbsp;tuple</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_antialiased"><strong>set_antialiased</strong></a>(self, b)</dt><dd><tt>True&nbsp;if&nbsp;object&nbsp;should&nbsp;be&nbsp;drawn&nbsp;with&nbsp;antialiased&nbsp;rendering</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_capstyle"><strong>set_capstyle</strong></a>(self, cs)</dt><dd><tt>Set&nbsp;the&nbsp;capstyle&nbsp;as&nbsp;a&nbsp;string&nbsp;in&nbsp;('butt',&nbsp;'round',&nbsp;'projecting')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_clip_path"><strong>set_clip_path</strong></a>(self, path)</dt><dd><tt>Set&nbsp;the&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_clip_rectangle"><strong>set_clip_rectangle</strong></a>(self, rectangle)</dt><dd><tt>Set&nbsp;the&nbsp;clip&nbsp;rectangle&nbsp;with&nbsp;sequence&nbsp;(left,&nbsp;bottom,&nbsp;width,&nbsp;height)</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_dashes"><strong>set_dashes</strong></a>(self, dash_offset, dash_list)</dt><dd><tt>Set&nbsp;the&nbsp;dash&nbsp;style&nbsp;for&nbsp;the&nbsp;gc.<br>
dash_offset&nbsp;is&nbsp;the&nbsp;offset&nbsp;(usually&nbsp;0).<br>
dash_list&nbsp;specifies&nbsp;the&nbsp;on-off&nbsp;sequence&nbsp;as&nbsp;points<br>
(None,&nbsp;None)&nbsp;specifies&nbsp;a&nbsp;solid&nbsp;line</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_foreground"><strong>set_foreground</strong></a>(self, fg, isRGB<font color="#909090">=False</font>)</dt><dd><tt>Set&nbsp;the&nbsp;foreground&nbsp;color.&nbsp;&nbsp;fg&nbsp;can&nbsp;be&nbsp;a&nbsp;matlab&nbsp;format&nbsp;string,&nbsp;a<br>
html&nbsp;hex&nbsp;color&nbsp;string,&nbsp;an&nbsp;rgb&nbsp;unit&nbsp;tuple,&nbsp;or&nbsp;a&nbsp;float&nbsp;between&nbsp;0<br>
and&nbsp;1.&nbsp;&nbsp;In&nbsp;the&nbsp;latter&nbsp;case,&nbsp;grayscale&nbsp;is&nbsp;used.<br>
&nbsp;<br>
The&nbsp;GraphicsContext&nbsp;converts&nbsp;colors&nbsp;to&nbsp;rgb&nbsp;internally.&nbsp;&nbsp;If&nbsp;you<br>
know&nbsp;the&nbsp;color&nbsp;is&nbsp;rgb&nbsp;already,&nbsp;you&nbsp;can&nbsp;set&nbsp;isRGB&nbsp;to&nbsp;True&nbsp;to<br>
avoid&nbsp;the&nbsp;performace&nbsp;hit&nbsp;of&nbsp;the&nbsp;conversion</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_graylevel"><strong>set_graylevel</strong></a>(self, frac)</dt><dd><tt>Set&nbsp;the&nbsp;foreground&nbsp;color&nbsp;to&nbsp;be&nbsp;a&nbsp;gray&nbsp;level&nbsp;with&nbsp;frac&nbsp;frac</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_hatch"><strong>set_hatch</strong></a>(self, hatch)</dt><dd><tt>Sets&nbsp;the&nbsp;hatch&nbsp;style&nbsp;for&nbsp;filling</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_joinstyle"><strong>set_joinstyle</strong></a>(self, js)</dt><dd><tt>Set&nbsp;the&nbsp;join&nbsp;style&nbsp;to&nbsp;be&nbsp;one&nbsp;of&nbsp;('miter',&nbsp;'round',&nbsp;'bevel')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_linestyle"><strong>set_linestyle</strong></a>(self, style)</dt><dd><tt>Set&nbsp;the&nbsp;linestyle&nbsp;to&nbsp;be&nbsp;one&nbsp;of&nbsp;('solid',&nbsp;'dashed',&nbsp;'dashdot',<br>
'dotted').</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth&nbsp;in&nbsp;points</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>dashd</strong> = {'dashdot': (0, (3.0, 5.0, 1.0, 5.0)), 'dashed': (0, (6.0, 6.0)), 'dotted': (0, (1.0, 3.0)), 'solid': (None, None)}</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="KeyEvent">class <strong>KeyEvent</strong></a>(<a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;key&nbsp;event&nbsp;(key&nbsp;press,&nbsp;key&nbsp;release).<br>
&nbsp;<br>
Attach&nbsp;additional&nbsp;attributes&nbsp;as&nbsp;defined&nbsp;in<br>
FigureCanvas.connect.<br>
&nbsp;<br>
The&nbsp;following&nbsp;attributes&nbsp;are&nbsp;defined&nbsp;and&nbsp;shown&nbsp;with&nbsp;their&nbsp;default<br>
values<br>
&nbsp;<br>
x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;x&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;left&nbsp;of&nbsp;canvas<br>
y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;y&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;bottom&nbsp;of&nbsp;canvas<br>
key&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;key&nbsp;pressed:&nbsp;None,&nbsp;chr(range(255),&nbsp;shift,&nbsp;win,&nbsp;or&nbsp;control<br>
inaxes&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;Axes&nbsp;instance&nbsp;if&nbsp;mouse&nbsp;us&nbsp;over&nbsp;axes<br>
xdata&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;x&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>
ydata&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;y&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>
&nbsp;<br>
This&nbsp;interface&nbsp;may&nbsp;change&nbsp;slightly&nbsp;when&nbsp;better&nbsp;support&nbsp;for<br>
modifier&nbsp;keys&nbsp;is&nbsp;included<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.backend_bases.html#KeyEvent">KeyEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#Event">Event</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="KeyEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, key, x<font color="#909090">=0</font>, y<font color="#909090">=0</font>, guiEvent<font color="#909090">=None</font>)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>:<br>
<dl><dt><strong>button</strong> = None</dl>

<dl><dt><strong>inaxes</strong> = None</dl>

<dl><dt><strong>x</strong> = None</dl>

<dl><dt><strong>xdata</strong> = None</dl>

<dl><dt><strong>y</strong> = None</dl>

<dl><dt><strong>ydata</strong> = None</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="LocationEvent">class <strong>LocationEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;event&nbsp;that&nbsp;has&nbsp;a&nbsp;screen&nbsp;location<br>
&nbsp;<br>
The&nbsp;following&nbsp;additional&nbsp;attributes&nbsp;are&nbsp;defined&nbsp;and&nbsp;shown&nbsp;with<br>
their&nbsp;default&nbsp;values<br>
&nbsp;<br>
x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;x&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;left&nbsp;of&nbsp;canvas<br>
y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;y&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;bottom&nbsp;of&nbsp;canvas<br>
inaxes&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;Axes&nbsp;instance&nbsp;if&nbsp;mouse&nbsp;us&nbsp;over&nbsp;axes<br>
xdata&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;x&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>
ydata&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;y&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="LocationEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, x, y, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>x,&nbsp;y&nbsp;in&nbsp;figure&nbsp;coords,&nbsp;0,0&nbsp;=&nbsp;bottom,&nbsp;left<br>
button&nbsp;pressed&nbsp;None,&nbsp;1,&nbsp;2,&nbsp;3</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>button</strong> = None</dl>

<dl><dt><strong>inaxes</strong> = None</dl>

<dl><dt><strong>x</strong> = None</dl>

<dl><dt><strong>xdata</strong> = None</dl>

<dl><dt><strong>y</strong> = None</dl>

<dl><dt><strong>ydata</strong> = None</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="MouseEvent">class <strong>MouseEvent</strong></a>(<a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;mouse&nbsp;event&nbsp;(button_press_event,&nbsp;button_release_event,&nbsp;scroll_event,<br>
motion_notify_event).<br>
&nbsp;<br>
The&nbsp;following&nbsp;attributes&nbsp;are&nbsp;defined&nbsp;and&nbsp;shown&nbsp;with&nbsp;their&nbsp;default<br>
values<br>
&nbsp;<br>
x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;x&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;left&nbsp;of&nbsp;canvas<br>
y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;y&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;bottom&nbsp;of&nbsp;canvas<br>
button&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;button&nbsp;pressed&nbsp;None,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;'up',&nbsp;'down'<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(up&nbsp;and&nbsp;down&nbsp;are&nbsp;used&nbsp;for&nbsp;scroll&nbsp;events)<br>
key&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;key&nbsp;pressed:&nbsp;None,&nbsp;chr(range(255),&nbsp;shift,&nbsp;win,&nbsp;or&nbsp;control<br>
inaxes&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;Axes&nbsp;instance&nbsp;if&nbsp;mouse&nbsp;us&nbsp;over&nbsp;axes<br>
xdata&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;x&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>
ydata&nbsp;&nbsp;=&nbsp;None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;y&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.backend_bases.html#MouseEvent">MouseEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#Event">Event</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="MouseEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, x, y, button<font color="#909090">=None</font>, key<font color="#909090">=None</font>, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>x,&nbsp;y&nbsp;in&nbsp;figure&nbsp;coords,&nbsp;0,0&nbsp;=&nbsp;bottom,&nbsp;left<br>
button&nbsp;pressed&nbsp;None,&nbsp;1,&nbsp;2,&nbsp;3</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>button</strong> = None</dl>

<dl><dt><strong>inaxes</strong> = None</dl>

<dl><dt><strong>x</strong> = None</dl>

<dl><dt><strong>xdata</strong> = None</dl>

<dl><dt><strong>y</strong> = None</dl>

<dl><dt><strong>ydata</strong> = None</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="NavigationToolbar2">class <strong>NavigationToolbar2</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Base&nbsp;class&nbsp;for&nbsp;the&nbsp;navigation&nbsp;cursor,&nbsp;version&nbsp;2<br>
&nbsp;<br>
backends&nbsp;must&nbsp;implement&nbsp;a&nbsp;canvas&nbsp;that&nbsp;handles&nbsp;connections&nbsp;for<br>
'button_press_event'&nbsp;and&nbsp;'button_release_event'.&nbsp;&nbsp;See<br>
FigureCanvas.connect&nbsp;for&nbsp;more&nbsp;information<br>
&nbsp;<br>
&nbsp;<br>
They&nbsp;must&nbsp;also&nbsp;define<br>
&nbsp;<br>
&nbsp;*&nbsp;save_figure&nbsp;-&nbsp;save&nbsp;the&nbsp;current&nbsp;figure<br>
&nbsp;<br>
&nbsp;*&nbsp;set_cursor&nbsp;-&nbsp;if&nbsp;you&nbsp;want&nbsp;the&nbsp;pointer&nbsp;icon&nbsp;to&nbsp;change<br>
&nbsp;<br>
&nbsp;*&nbsp;_init_toolbar&nbsp;-&nbsp;create&nbsp;your&nbsp;toolbar&nbsp;widget<br>
&nbsp;<br>
&nbsp;*&nbsp;draw_rubberband&nbsp;(optional)&nbsp;:&nbsp;draw&nbsp;the&nbsp;zoom&nbsp;to&nbsp;rect<br>
&nbsp;&nbsp;&nbsp;"rubberband"&nbsp;rectangle<br>
&nbsp;<br>
*&nbsp;press&nbsp;:&nbsp;(optional)&nbsp;whenever&nbsp;a&nbsp;mouse&nbsp;button&nbsp;is&nbsp;pressed,&nbsp;you'll&nbsp;be<br>
&nbsp;&nbsp;&nbsp;notified&nbsp;with&nbsp;the&nbsp;event<br>
&nbsp;<br>
*&nbsp;release&nbsp;:&nbsp;(optional)&nbsp;whenever&nbsp;a&nbsp;mouse&nbsp;button&nbsp;is&nbsp;released,<br>
&nbsp;&nbsp;&nbsp;you'll&nbsp;be&nbsp;notified&nbsp;with&nbsp;the&nbsp;event<br>
&nbsp;<br>
*&nbsp;dynamic_update&nbsp;(optional)&nbsp;dynamically&nbsp;update&nbsp;the&nbsp;window&nbsp;while<br>
&nbsp;&nbsp;navigating<br>
&nbsp;<br>
*&nbsp;set_message&nbsp;(optional)&nbsp;-&nbsp;display&nbsp;message<br>
&nbsp;<br>
*&nbsp;set_history_buttons&nbsp;(optional)&nbsp;-&nbsp;you&nbsp;can&nbsp;change&nbsp;the&nbsp;history<br>
&nbsp;&nbsp;&nbsp;back&nbsp;/&nbsp;forward&nbsp;buttons&nbsp;to&nbsp;indicate&nbsp;disabled&nbsp;/&nbsp;enabled&nbsp;state.<br>
&nbsp;<br>
That's&nbsp;it,&nbsp;we'll&nbsp;do&nbsp;the&nbsp;rest!<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="NavigationToolbar2-__init__"><strong>__init__</strong></a>(self, canvas)</dt></dl>

<dl><dt><a name="NavigationToolbar2-back"><strong>back</strong></a>(self, *args)</dt><dd><tt>move&nbsp;back&nbsp;up&nbsp;the&nbsp;view&nbsp;lim&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-drag_pan"><strong>drag_pan</strong></a>(self, event)</dt><dd><tt>the&nbsp;drag&nbsp;callback&nbsp;in&nbsp;pan/zoom&nbsp;mode</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-draw"><strong>draw</strong></a>(self)</dt><dd><tt>redraw&nbsp;the&nbsp;canvases,&nbsp;update&nbsp;the&nbsp;locators</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-draw_rubberband"><strong>draw_rubberband</strong></a>(self, event, x0, y0, x1, y1)</dt><dd><tt>draw&nbsp;a&nbsp;rectangle&nbsp;rubberband&nbsp;to&nbsp;indicate&nbsp;zoom&nbsp;limits</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-dynamic_update"><strong>dynamic_update</strong></a>(self)</dt></dl>

<dl><dt><a name="NavigationToolbar2-forward"><strong>forward</strong></a>(self, *args)</dt><dd><tt>move&nbsp;forward&nbsp;in&nbsp;the&nbsp;view&nbsp;lim&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-home"><strong>home</strong></a>(self, *args)</dt><dd><tt>restore&nbsp;the&nbsp;original&nbsp;view</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-mouse_move"><strong>mouse_move</strong></a>(self, event)</dt></dl>

<dl><dt><a name="NavigationToolbar2-pan"><strong>pan</strong></a>(self, *args)</dt><dd><tt>Activate&nbsp;the&nbsp;pan/zoom&nbsp;tool.&nbsp;pan&nbsp;with&nbsp;left&nbsp;button,&nbsp;zoom&nbsp;with&nbsp;right</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-press"><strong>press</strong></a>(self, event)</dt><dd><tt>this&nbsp;will&nbsp;be&nbsp;called&nbsp;whenver&nbsp;a&nbsp;mouse&nbsp;button&nbsp;is&nbsp;pressed</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-press_pan"><strong>press_pan</strong></a>(self, event)</dt><dd><tt>the&nbsp;press&nbsp;mouse&nbsp;button&nbsp;in&nbsp;pan/zoom&nbsp;mode&nbsp;callback</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-press_zoom"><strong>press_zoom</strong></a>(self, event)</dt><dd><tt>the&nbsp;press&nbsp;mouse&nbsp;button&nbsp;in&nbsp;zoom&nbsp;to&nbsp;rect&nbsp;mode&nbsp;callback</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-push_current"><strong>push_current</strong></a>(self)</dt><dd><tt>push&nbsp;the&nbsp;current&nbsp;view&nbsp;limits&nbsp;and&nbsp;position&nbsp;onto&nbsp;the&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-release"><strong>release</strong></a>(self, event)</dt><dd><tt>this&nbsp;will&nbsp;be&nbsp;called&nbsp;whenever&nbsp;mouse&nbsp;button&nbsp;is&nbsp;released</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-release_pan"><strong>release_pan</strong></a>(self, event)</dt><dd><tt>the&nbsp;release&nbsp;mouse&nbsp;button&nbsp;callback&nbsp;in&nbsp;pan/zoom&nbsp;mode</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-release_zoom"><strong>release_zoom</strong></a>(self, event)</dt><dd><tt>the&nbsp;release&nbsp;mouse&nbsp;button&nbsp;callback&nbsp;in&nbsp;zoom&nbsp;to&nbsp;rect&nbsp;mode</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-save_figure"><strong>save_figure</strong></a>(self, *args)</dt><dd><tt>save&nbsp;the&nbsp;current&nbsp;figure</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-set_cursor"><strong>set_cursor</strong></a>(self, cursor)</dt><dd><tt>Set&nbsp;the&nbsp;current&nbsp;cursor&nbsp;to&nbsp;one&nbsp;of&nbsp;the&nbsp;backend_bases.<a href="#Cursors">Cursors</a><br>
enums&nbsp;values</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-set_history_buttons"><strong>set_history_buttons</strong></a>(self)</dt><dd><tt>enable&nbsp;or&nbsp;disable&nbsp;back/forward&nbsp;button</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-set_message"><strong>set_message</strong></a>(self, s)</dt><dd><tt>display&nbsp;a&nbsp;message&nbsp;on&nbsp;toolbar&nbsp;or&nbsp;in&nbsp;status&nbsp;bar</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-update"><strong>update</strong></a>(self)</dt><dd><tt>reset&nbsp;the&nbsp;axes&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-zoom"><strong>zoom</strong></a>(self, *args)</dt><dd><tt>activate&nbsp;zoom&nbsp;to&nbsp;rect&nbsp;mode</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="PickEvent">class <strong>PickEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>a&nbsp;pick&nbsp;event,&nbsp;fired&nbsp;when&nbsp;the&nbsp;user&nbsp;picks&nbsp;a&nbsp;location&nbsp;on&nbsp;the&nbsp;canvas<br>
sufficiently&nbsp;close&nbsp;to&nbsp;an&nbsp;artist.<br>
&nbsp;<br>
Attrs:&nbsp;all&nbsp;the&nbsp;<a href="#Event">Event</a>&nbsp;attrs&nbsp;plus<br>
mouseevent&nbsp;:&nbsp;the&nbsp;<a href="#MouseEvent">MouseEvent</a>&nbsp;that&nbsp;generated&nbsp;the&nbsp;pick<br>
artist&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;the&nbsp;artist&nbsp;picked<br>
&nbsp;<br>
extra&nbsp;class&nbsp;dependent&nbsp;attrs&nbsp;--&nbsp;eg&nbsp;a&nbsp;Line2D&nbsp;pick&nbsp;may&nbsp;define<br>
different&nbsp;extra&nbsp;attributes&nbsp;than&nbsp;a&nbsp;PatchCollection&nbsp;pick&nbsp;event<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="PickEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, mouseevent, artist, guiEvent<font color="#909090">=None</font>, **kwargs)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="RendererBase">class <strong>RendererBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;abstract&nbsp;base&nbsp;class&nbsp;to&nbsp;handle&nbsp;drawing/rendering&nbsp;operations<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="RendererBase-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererBase-close_group"><strong>close_group</strong></a>(self, s)</dt><dd><tt>close&nbsp;a&nbsp;grouping&nbsp;element&nbsp;with&nbsp;label&nbsp;s<br>
Is&nbsp;only&nbsp;currently&nbsp;used&nbsp;by&nbsp;backend_svg</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_arc"><strong>draw_arc</strong></a>(self, gc, rgbFace, x, y, width, height, angle1, angle2, rotation)</dt><dd><tt>Draw&nbsp;an&nbsp;arc&nbsp;using&nbsp;GraphicsContext&nbsp;instance&nbsp;gcEdge,&nbsp;centered&nbsp;at&nbsp;x,y,<br>
with&nbsp;width&nbsp;and&nbsp;height&nbsp;and&nbsp;angles&nbsp;from&nbsp;0.0&nbsp;to&nbsp;360.0<br>
0&nbsp;degrees&nbsp;is&nbsp;at&nbsp;3-o'clock<br>
positive&nbsp;angles&nbsp;are&nbsp;anti-clockwise<br>
draw&nbsp;rotated&nbsp;'rotation'&nbsp;degrees&nbsp;anti-clockwise&nbsp;about&nbsp;x,y<br>
&nbsp;<br>
If&nbsp;the&nbsp;color&nbsp;rgbFace&nbsp;is&nbsp;not&nbsp;None,&nbsp;fill&nbsp;the&nbsp;arc&nbsp;with&nbsp;it.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_image"><strong>draw_image</strong></a>(self, x, y, im, bbox)</dt><dd><tt>Draw&nbsp;the&nbsp;Image&nbsp;instance&nbsp;into&nbsp;the&nbsp;current&nbsp;axes;&nbsp;x&nbsp;is&nbsp;the<br>
distance&nbsp;in&nbsp;pixels&nbsp;from&nbsp;the&nbsp;left&nbsp;hand&nbsp;side&nbsp;of&nbsp;the&nbsp;canvas.&nbsp;y&nbsp;is<br>
the&nbsp;distance&nbsp;from&nbsp;the&nbsp;origin.&nbsp;&nbsp;That&nbsp;is,&nbsp;if&nbsp;origin&nbsp;is&nbsp;upper,&nbsp;y<br>
is&nbsp;the&nbsp;distance&nbsp;from&nbsp;top.&nbsp;&nbsp;If&nbsp;origin&nbsp;is&nbsp;lower,&nbsp;y&nbsp;is&nbsp;the<br>
distance&nbsp;from&nbsp;bottom<br>
&nbsp;<br>
bbox&nbsp;is&nbsp;a&nbsp;matplotlib.transforms.BBox&nbsp;instance&nbsp;for&nbsp;clipping,&nbsp;or<br>
None</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_line"><strong>draw_line</strong></a>(self, gc, x1, y1, x2, y2)</dt><dd><tt>Draw&nbsp;a&nbsp;single&nbsp;line&nbsp;from&nbsp;x1,y1&nbsp;to&nbsp;x2,y2</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_line_collection"><strong>draw_line_collection</strong></a>(self, segments, transform, clipbox, colors, linewidths, linestyle, antialiaseds, offsets, transOffset)</dt><dd><tt>This&nbsp;is&nbsp;a&nbsp;function&nbsp;for&nbsp;optimized&nbsp;line&nbsp;drawing.&nbsp;If&nbsp;you&nbsp;need&nbsp;to&nbsp;draw<br>
many&nbsp;line&nbsp;segments&nbsp;with&nbsp;similar&nbsp;properties,&nbsp;it&nbsp;is&nbsp;faster&nbsp;to&nbsp;avoid&nbsp;the<br>
overhead&nbsp;of&nbsp;all&nbsp;the&nbsp;object&nbsp;creation&nbsp;etc.&nbsp;The&nbsp;lack&nbsp;of&nbsp;total<br>
configurability&nbsp;is&nbsp;compensated&nbsp;for&nbsp;with&nbsp;efficiency.&nbsp;Hence&nbsp;we&nbsp;don't&nbsp;use<br>
a&nbsp;GC&nbsp;and&nbsp;many&nbsp;of&nbsp;the&nbsp;line&nbsp;props&nbsp;it&nbsp;supports.&nbsp;See<br>
matplotlib.collections&nbsp;for&nbsp;more&nbsp;details.<br>
&nbsp;<br>
segments&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;(&nbsp;line0,&nbsp;line1,&nbsp;line2),&nbsp;where&nbsp;linen&nbsp;=<br>
is&nbsp;an&nbsp;Mx2&nbsp;array&nbsp;with&nbsp;columns&nbsp;x,&nbsp;y.&nbsp;&nbsp;Each&nbsp;line&nbsp;can&nbsp;be&nbsp;a<br>
different&nbsp;length<br>
&nbsp;<br>
transform&nbsp;is&nbsp;used&nbsp;to&nbsp;Transform&nbsp;the&nbsp;lines<br>
&nbsp;<br>
clipbox&nbsp;is&nbsp;a&nbsp;&nbsp;xmin,&nbsp;ymin,&nbsp;width,&nbsp;height&nbsp;clip&nbsp;rect<br>
&nbsp;<br>
colors&nbsp;is&nbsp;a&nbsp;tuple&nbsp;of&nbsp;RGBA&nbsp;tuples<br>
&nbsp;<br>
linewidths&nbsp;is&nbsp;a&nbsp;tuple&nbsp;of&nbsp;linewidths<br>
***&nbsp;really&nbsp;should&nbsp;be&nbsp;called&nbsp;'dashes'&nbsp;not&nbsp;'linestyle',&nbsp;since<br>
we&nbsp;call&nbsp;gc.set_dashes()&nbsp;not&nbsp;gc.set_linestyle()&nbsp;***<br>
&nbsp;<br>
linestyle&nbsp;is&nbsp;an&nbsp;(offset,&nbsp;onoffseq)&nbsp;tuple&nbsp;or&nbsp;None,None&nbsp;for&nbsp;solid<br>
&nbsp;<br>
antialiseds&nbsp;is&nbsp;a&nbsp;tuple&nbsp;of&nbsp;ones&nbsp;or&nbsp;zeros&nbsp;indicating&nbsp;whether&nbsp;the<br>
segment&nbsp;should&nbsp;be&nbsp;aa&nbsp;or&nbsp;not<br>
&nbsp;<br>
offsets,&nbsp;if&nbsp;not&nbsp;None,&nbsp;is&nbsp;an&nbsp;Nx2&nbsp;array&nbsp;of&nbsp;x,y&nbsp;offsets&nbsp;to<br>
translate&nbsp;the&nbsp;lines&nbsp;by&nbsp;after&nbsp;transform&nbsp;is&nbsp;used&nbsp;to&nbsp;transform<br>
the&nbsp;offset&nbsp;coords<br>
&nbsp;<br>
This&nbsp;function&nbsp;could&nbsp;be&nbsp;overridden&nbsp;in&nbsp;the&nbsp;backend&nbsp;to&nbsp;possibly&nbsp;implement<br>
faster&nbsp;drawing,&nbsp;but&nbsp;it&nbsp;is&nbsp;already&nbsp;much&nbsp;faster&nbsp;than&nbsp;using&nbsp;<a href="#RendererBase-draw_lines">draw_lines</a>()<br>
by&nbsp;itself.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_lines"><strong>draw_lines</strong></a>(self, gc, x, y, transform<font color="#909090">=None</font>)</dt><dd><tt>x&nbsp;and&nbsp;y&nbsp;are&nbsp;equal&nbsp;length&nbsp;arrays,&nbsp;draw&nbsp;lines&nbsp;connecting&nbsp;each<br>
point&nbsp;in&nbsp;x,&nbsp;y</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_point"><strong>draw_point</strong></a>(self, gc, x, y)</dt><dd><tt>Draw&nbsp;a&nbsp;single&nbsp;point&nbsp;at&nbsp;x,y<br>
Where&nbsp;'point'&nbsp;is&nbsp;a&nbsp;device-unit&nbsp;point&nbsp;(or&nbsp;pixel),&nbsp;not&nbsp;a&nbsp;matplotlib&nbsp;point</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_poly_collection"><strong>draw_poly_collection</strong></a>(self, verts, transform, clipbox, facecolors, edgecolors, linewidths, antialiaseds, offsets, transOffset)</dt><dd><tt>Draw&nbsp;a&nbsp;polygon&nbsp;collection<br>
&nbsp;<br>
verts&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;polygon&nbsp;vectors,&nbsp;where&nbsp;each&nbsp;polygon<br>
vector&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;x,y&nbsp;tuples&nbsp;of&nbsp;vertices<br>
&nbsp;<br>
facecolors&nbsp;and&nbsp;edgecolors&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;RGBA&nbsp;tuples<br>
linewidths&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;linewidths<br>
antialiaseds&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;0,1&nbsp;integers&nbsp;whether&nbsp;to&nbsp;use&nbsp;aa<br>
&nbsp;<br>
If&nbsp;a&nbsp;linewidth&nbsp;is&nbsp;zero&nbsp;or&nbsp;an&nbsp;edgecolor&nbsp;alpha&nbsp;is&nbsp;zero,&nbsp;the<br>
line&nbsp;will&nbsp;be&nbsp;omitted;&nbsp;similarly,&nbsp;the&nbsp;fill&nbsp;will&nbsp;be&nbsp;omitted<br>
if&nbsp;the&nbsp;facecolor&nbsp;alpha&nbsp;is&nbsp;zero.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_polygon"><strong>draw_polygon</strong></a>(self, gc, rgbFace, points)</dt><dd><tt>Draw&nbsp;a&nbsp;polygon&nbsp;using&nbsp;the&nbsp;GraphicsContext&nbsp;instance&nbsp;gc.<br>
points&nbsp;is&nbsp;a&nbsp;len&nbsp;vertices&nbsp;tuple,&nbsp;each&nbsp;element<br>
giving&nbsp;the&nbsp;x,y&nbsp;coords&nbsp;a&nbsp;vertex<br>
&nbsp;<br>
If&nbsp;the&nbsp;color&nbsp;rgbFace&nbsp;is&nbsp;not&nbsp;None,&nbsp;fill&nbsp;the&nbsp;polygon&nbsp;with&nbsp;it</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_quad_mesh"><strong>draw_quad_mesh</strong></a>(self, meshWidth, meshHeight, colors, xCoords, yCoords, clipbox, transform, offsets, transOffset, showedges)</dt><dd><tt>Draw&nbsp;a&nbsp;quadrilateral&nbsp;mesh<br>
See&nbsp;documentation&nbsp;in&nbsp;QuadMesh&nbsp;class&nbsp;in&nbsp;collections.py&nbsp;for&nbsp;details</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_rectangle"><strong>draw_rectangle</strong></a>(self, gcEdge, rgbFace, x, y, width, height)</dt><dd><tt>Draw&nbsp;a&nbsp;non-filled&nbsp;rectangle&nbsp;using&nbsp;the&nbsp;GraphicsContext&nbsp;instance&nbsp;gcEdge,<br>
with&nbsp;lower&nbsp;left&nbsp;at&nbsp;x,y&nbsp;with&nbsp;width&nbsp;and&nbsp;height.<br>
&nbsp;<br>
If&nbsp;rgbFace&nbsp;is&nbsp;not&nbsp;None,&nbsp;fill&nbsp;the&nbsp;rectangle&nbsp;with&nbsp;it.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_regpoly_collection"><strong>draw_regpoly_collection</strong></a>(self, clipbox, offsets, transOffset, verts, sizes, facecolors, edgecolors, linewidths, antialiaseds)</dt><dd><tt>Draw&nbsp;a&nbsp;regular&nbsp;poly&nbsp;collection<br>
&nbsp;<br>
offsets&nbsp;&nbsp;&nbsp;-&nbsp;is&nbsp;a&nbsp;sequence&nbsp;is&nbsp;x,y&nbsp;tuples<br>
transOffset&nbsp;-&nbsp;maps&nbsp;this&nbsp;to&nbsp;display&nbsp;coords<br>
&nbsp;<br>
verts&nbsp;-&nbsp;are&nbsp;the&nbsp;vertices&nbsp;of&nbsp;the&nbsp;regular&nbsp;polygon&nbsp;at&nbsp;the&nbsp;origin<br>
&nbsp;<br>
sizes&nbsp;are&nbsp;the&nbsp;area&nbsp;of&nbsp;the&nbsp;circle&nbsp;that&nbsp;circumscribes&nbsp;the<br>
polygon&nbsp;in&nbsp;points^2<br>
&nbsp;<br>
facecolors&nbsp;and&nbsp;edgecolors&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;RGBA&nbsp;tuples<br>
linewidths&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;linewidths<br>
antialiaseds&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;0,1&nbsp;integers&nbsp;whether&nbsp;to&nbsp;use&nbsp;aa</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_tex"><strong>draw_tex</strong></a>(self, gc, x, y, s, prop, angle, ismath<font color="#909090">='TeX!'</font>)</dt></dl>

<dl><dt><a name="RendererBase-draw_text"><strong>draw_text</strong></a>(self, gc, x, y, s, prop, angle, ismath<font color="#909090">=False</font>)</dt><dd><tt>Draw&nbsp;the&nbsp;text.Text&nbsp;instance&nbsp;s&nbsp;at&nbsp;x,y&nbsp;(display&nbsp;coords)&nbsp;with&nbsp;font<br>
properties&nbsp;instance&nbsp;prop&nbsp;at&nbsp;angle&nbsp;in&nbsp;degrees,&nbsp;using&nbsp;GraphicsContext&nbsp;gc<br>
&nbsp;<br>
**backend&nbsp;implementers&nbsp;note**<br>
&nbsp;<br>
When&nbsp;you&nbsp;are&nbsp;trying&nbsp;to&nbsp;determine&nbsp;if&nbsp;you&nbsp;have&nbsp;gotten&nbsp;your&nbsp;bounding&nbsp;box<br>
right&nbsp;(which&nbsp;is&nbsp;what&nbsp;enables&nbsp;the&nbsp;text&nbsp;layout/alignment&nbsp;to&nbsp;work<br>
properly),&nbsp;it&nbsp;helps&nbsp;to&nbsp;change&nbsp;the&nbsp;line&nbsp;in&nbsp;text.py<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;0:&nbsp;bbox_artist(self,&nbsp;renderer)<br>
&nbsp;<br>
to&nbsp;if&nbsp;1,&nbsp;and&nbsp;then&nbsp;the&nbsp;actual&nbsp;bounding&nbsp;box&nbsp;will&nbsp;be&nbsp;blotted&nbsp;along&nbsp;with<br>
your&nbsp;text.</tt></dd></dl>

<dl><dt><a name="RendererBase-flipy"><strong>flipy</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;y&nbsp;small&nbsp;numbers&nbsp;are&nbsp;top&nbsp;for&nbsp;renderer<br>
Is&nbsp;used&nbsp;for&nbsp;drawing&nbsp;text&nbsp;(text.py)&nbsp;and&nbsp;images&nbsp;(image.py)&nbsp;only</tt></dd></dl>

<dl><dt><a name="RendererBase-get_canvas_width_height"><strong>get_canvas_width_height</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;canvas&nbsp;width&nbsp;and&nbsp;height&nbsp;in&nbsp;display&nbsp;coords</tt></dd></dl>

<dl><dt><a name="RendererBase-get_image_magnification"><strong>get_image_magnification</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;factor&nbsp;by&nbsp;which&nbsp;to&nbsp;magnify&nbsp;images&nbsp;passed&nbsp;to&nbsp;draw_image.<br>
Allows&nbsp;a&nbsp;backend&nbsp;to&nbsp;have&nbsp;images&nbsp;at&nbsp;a&nbsp;different&nbsp;resolution&nbsp;to&nbsp;other<br>
artists.</tt></dd></dl>

<dl><dt><a name="RendererBase-get_texmanager"><strong>get_texmanager</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererBase-get_text_extent"><strong>get_text_extent</strong></a>(self, text)</dt><dd><tt>Get&nbsp;the&nbsp;text&nbsp;extent&nbsp;in&nbsp;window&nbsp;coords</tt></dd></dl>

<dl><dt><a name="RendererBase-get_text_width_height_descent"><strong>get_text_width_height_descent</strong></a>(self, s, prop, ismath)</dt><dd><tt>get&nbsp;the&nbsp;width&nbsp;and&nbsp;height,&nbsp;and&nbsp;the&nbsp;offset&nbsp;from&nbsp;the&nbsp;bottom&nbsp;to&nbsp;the<br>
baseline&nbsp;(descent),&nbsp;in&nbsp;display&nbsp;coords&nbsp;of&nbsp;the&nbsp;string&nbsp;s&nbsp;with<br>
FontPropertry&nbsp;prop</tt></dd></dl>

<dl><dt><a name="RendererBase-new_gc"><strong>new_gc</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;<a href="#GraphicsContextBase">GraphicsContextBase</a></tt></dd></dl>

<dl><dt><a name="RendererBase-open_group"><strong>open_group</strong></a>(self, s)</dt><dd><tt>open&nbsp;a&nbsp;grouping&nbsp;element&nbsp;with&nbsp;label&nbsp;s<br>
Is&nbsp;only&nbsp;currently&nbsp;used&nbsp;by&nbsp;backend_svg</tt></dd></dl>

<dl><dt><a name="RendererBase-option_image_nocomposite"><strong>option_image_nocomposite</strong></a>(self)</dt><dd><tt>overwrite&nbsp;this&nbsp;method&nbsp;for&nbsp;renderers&nbsp;that&nbsp;do&nbsp;not&nbsp;necessarily<br>
want&nbsp;to&nbsp;rescale&nbsp;and&nbsp;composite&nbsp;raster&nbsp;images.&nbsp;(like&nbsp;SVG)</tt></dd></dl>

<dl><dt><a name="RendererBase-points_to_pixels"><strong>points_to_pixels</strong></a>(self, points)</dt><dd><tt>Convert&nbsp;points&nbsp;to&nbsp;display&nbsp;units<br>
points&nbsp;-&nbsp;a&nbsp;float&nbsp;or&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;float<br>
return&nbsp;points&nbsp;converted&nbsp;to&nbsp;pixels<br>
&nbsp;<br>
You&nbsp;need&nbsp;to&nbsp;override&nbsp;this&nbsp;function&nbsp;(unless&nbsp;your&nbsp;backend&nbsp;doesn't&nbsp;have&nbsp;a<br>
dpi,&nbsp;eg,&nbsp;postscript&nbsp;or&nbsp;svg).<br>
Some&nbsp;imaging&nbsp;systems&nbsp;assume&nbsp;some&nbsp;value&nbsp;for&nbsp;pixels&nbsp;per&nbsp;inch.<br>
points&nbsp;to&nbsp;pixels&nbsp;=&nbsp;points&nbsp;*&nbsp;pixels_per_inch/72.0&nbsp;*&nbsp;dpi/72.0</tt></dd></dl>

<dl><dt><a name="RendererBase-strip_math"><strong>strip_math</strong></a>(self, s)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="ResizeEvent">class <strong>ResizeEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;event&nbsp;triggered&nbsp;by&nbsp;a&nbsp;canvas&nbsp;resize<br>
&nbsp;<br>
Attributes&nbsp;are<br>
&nbsp;&nbsp;name<br>
&nbsp;&nbsp;canvas<br>
&nbsp;&nbsp;width&nbsp;&nbsp;&nbsp;#&nbsp;width&nbsp;of&nbsp;the&nbsp;canvas&nbsp;in&nbsp;pixels<br>
&nbsp;&nbsp;height&nbsp;&nbsp;#&nbsp;height&nbsp;of&nbsp;the&nbsp;canvas&nbsp;in&nbsp;pixels<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="ResizeEvent-__init__"><strong>__init__</strong></a>(self, name, canvas)</dt></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>cursors</strong> = &lt;matplotlib.backend_bases.Cursors instance at 0x86761cc&gt;<br>
<strong>division</strong> = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)<br>
<strong>rcParams</strong> = {'figure.subplot.right': 0.90000000000000002, 'm...persize': 'letter', 'svg.embed_char_paths': True}</td></tr></table>
@footer@