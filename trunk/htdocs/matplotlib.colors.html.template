@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.colors</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/colors.py">/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/colors.py</a></font></td></tr></table>
    <p><tt>A&nbsp;class&nbsp;for&nbsp;converting&nbsp;color&nbsp;arguments&nbsp;to&nbsp;RGB&nbsp;or&nbsp;RGBA<br>
&nbsp;<br>
This&nbsp;class&nbsp;instantiates&nbsp;a&nbsp;single&nbsp;instance&nbsp;colorConverter&nbsp;that&nbsp;is&nbsp;used<br>
to&nbsp;convert&nbsp;matlab&nbsp;color&nbsp;strings&nbsp;to&nbsp;RGB.&nbsp;&nbsp;RGB&nbsp;is&nbsp;a&nbsp;tuple&nbsp;of&nbsp;float&nbsp;RGB<br>
values&nbsp;in&nbsp;the&nbsp;range&nbsp;0-1.<br>
&nbsp;<br>
Commands&nbsp;which&nbsp;take&nbsp;color&nbsp;arguments&nbsp;can&nbsp;use&nbsp;several&nbsp;formats&nbsp;to&nbsp;specify<br>
the&nbsp;colors.&nbsp;&nbsp;For&nbsp;the&nbsp;basic&nbsp;builtin&nbsp;colors,&nbsp;you&nbsp;can&nbsp;use&nbsp;a&nbsp;single&nbsp;letter<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;&nbsp;:&nbsp;blue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g&nbsp;&nbsp;:&nbsp;green<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;&nbsp;:&nbsp;red<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;&nbsp;:&nbsp;cyan<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m&nbsp;&nbsp;:&nbsp;magenta<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;:&nbsp;yellow<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k&nbsp;&nbsp;:&nbsp;black<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w&nbsp;&nbsp;:&nbsp;white<br>
&nbsp;<br>
Gray&nbsp;shades&nbsp;can&nbsp;be&nbsp;given&nbsp;as&nbsp;a&nbsp;string&nbsp;encoding&nbsp;a&nbsp;float&nbsp;in&nbsp;the&nbsp;0-1<br>
range,&nbsp;e.g.,<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;color&nbsp;=&nbsp;'0.75'<br>
&nbsp;<br>
For&nbsp;a&nbsp;greater&nbsp;range&nbsp;of&nbsp;colors,&nbsp;you&nbsp;have&nbsp;two&nbsp;options.&nbsp;&nbsp;You&nbsp;can&nbsp;specify<br>
the&nbsp;color&nbsp;using&nbsp;an&nbsp;html&nbsp;hex&nbsp;string,&nbsp;as&nbsp;in<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color&nbsp;=&nbsp;'#eeefff'<br>
&nbsp;<br>
or&nbsp;you&nbsp;can&nbsp;pass&nbsp;an&nbsp;R,G,B&nbsp;tuple,&nbsp;where&nbsp;each&nbsp;of&nbsp;R,G,B&nbsp;are&nbsp;in&nbsp;the&nbsp;range<br>
[0,1].<br>
&nbsp;<br>
Finally,&nbsp;legal&nbsp;html&nbsp;names&nbsp;for&nbsp;colors,&nbsp;like&nbsp;'red',&nbsp;'burlywood'&nbsp;and<br>
'chartreuse'&nbsp;are&nbsp;supported.</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib.cbook.html">matplotlib.cbook</a><br>
</td><td width="25%" valign=top><a href="numpy.ma.html">numpy.ma</a><br>
</td><td width="25%" valign=top><a href="numpy.html">numpy</a><br>
</td><td width="25%" valign=top><a href="re.html">re</a><br>
</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#ColorConverter">ColorConverter</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.colors.html#Colormap">Colormap</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#LinearSegmentedColormap">LinearSegmentedColormap</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#ListedColormap">ListedColormap</a>
</font></dt></dl>
</dd>
</dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#Normalize">Normalize</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.colors.html#BoundaryNorm">BoundaryNorm</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.colors.html#LogNorm">LogNorm</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.colors.html#NoNorm">NoNorm</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.colors.html#NoNorm">NoNorm</a>
</font></dt></dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BoundaryNorm">class <strong>BoundaryNorm</strong></a>(<a href="matplotlib.colors.html#Normalize">Normalize</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Generate&nbsp;a&nbsp;colormap&nbsp;index&nbsp;based&nbsp;on&nbsp;discrete&nbsp;intervals.<br>
&nbsp;<br>
Unlike&nbsp;<a href="#Normalize">Normalize</a>&nbsp;or&nbsp;<a href="#LogNorm">LogNorm</a>,&nbsp;<a href="#BoundaryNorm">BoundaryNorm</a>&nbsp;maps&nbsp;values<br>
to&nbsp;integers&nbsp;instead&nbsp;of&nbsp;to&nbsp;the&nbsp;interval&nbsp;0-1.<br>
&nbsp;<br>
Mapping&nbsp;to&nbsp;the&nbsp;0-1&nbsp;interval&nbsp;could&nbsp;have&nbsp;been&nbsp;done&nbsp;via<br>
piece-wise&nbsp;linear&nbsp;interpolation,&nbsp;but&nbsp;using&nbsp;integers&nbsp;seems<br>
simpler,&nbsp;and&nbsp;reduces&nbsp;the&nbsp;number&nbsp;of&nbsp;conversions&nbsp;back&nbsp;and&nbsp;forth<br>
between&nbsp;integer&nbsp;and&nbsp;floating&nbsp;point.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="BoundaryNorm-__call__"><strong>__call__</strong></a>(self, x, clip<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="BoundaryNorm-__init__"><strong>__init__</strong></a>(self, boundaries, ncolors, clip<font color="#909090">=False</font>)</dt><dd><tt>args:<br>
&nbsp;&nbsp;&nbsp;&nbsp;boundaries:&nbsp;a&nbsp;monotonically&nbsp;increasing&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;ncolors:&nbsp;number&nbsp;of&nbsp;colors&nbsp;in&nbsp;the&nbsp;colormap&nbsp;to&nbsp;be&nbsp;used<br>
&nbsp;<br>
If&nbsp;b[i]&nbsp;&lt;=&nbsp;v&nbsp;&lt;&nbsp;b[i+1]&nbsp;then&nbsp;v&nbsp;is&nbsp;mapped&nbsp;to&nbsp;color&nbsp;j;<br>
as&nbsp;i&nbsp;varies&nbsp;from&nbsp;0&nbsp;to&nbsp;len(boundaries)-2,<br>
j&nbsp;goes&nbsp;from&nbsp;0&nbsp;to&nbsp;ncolors-1.<br>
&nbsp;<br>
Out-of-range&nbsp;values&nbsp;are&nbsp;mapped&nbsp;to&nbsp;-1&nbsp;if&nbsp;low&nbsp;and&nbsp;ncolors<br>
if&nbsp;high;&nbsp;these&nbsp;are&nbsp;converted&nbsp;to&nbsp;valid&nbsp;indices&nbsp;by<br>
<a href="#Colormap">Colormap</a>.__call__.</tt></dd></dl>

<dl><dt><a name="BoundaryNorm-inverse"><strong>inverse</strong></a>(self, value)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.colors.html#Normalize">Normalize</a>:<br>
<dl><dt><a name="BoundaryNorm-autoscale"><strong>autoscale</strong></a>(self, A)</dt><dd><tt>Set&nbsp;vmin,&nbsp;vmax&nbsp;to&nbsp;min,&nbsp;max&nbsp;of&nbsp;A.</tt></dd></dl>

<dl><dt><a name="BoundaryNorm-autoscale_None"><strong>autoscale_None</strong></a>(self, A)</dt><dd><tt>autoscale&nbsp;only&nbsp;None-valued&nbsp;vmin&nbsp;or&nbsp;vmax</tt></dd></dl>

<dl><dt><a name="BoundaryNorm-scaled"><strong>scaled</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;vmin&nbsp;and&nbsp;vmax&nbsp;set</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="ColorConverter">class <strong>ColorConverter</strong></a></font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="ColorConverter-to_rgb"><strong>to_rgb</strong></a>(self, arg)</dt><dd><tt>Returns&nbsp;an&nbsp;RGB&nbsp;tuple&nbsp;of&nbsp;three&nbsp;floats&nbsp;from&nbsp;0-1.<br>
&nbsp;<br>
arg&nbsp;can&nbsp;be&nbsp;an&nbsp;RGB&nbsp;or&nbsp;RGBA&nbsp;sequence&nbsp;or&nbsp;a&nbsp;string&nbsp;in&nbsp;any&nbsp;of&nbsp;several&nbsp;forms:<br>
&nbsp;&nbsp;&nbsp;&nbsp;1)&nbsp;a&nbsp;letter&nbsp;from&nbsp;the&nbsp;set&nbsp;'rgbcmykw'<br>
&nbsp;&nbsp;&nbsp;&nbsp;2)&nbsp;a&nbsp;hex&nbsp;color&nbsp;string,&nbsp;like&nbsp;'#00FFFF'<br>
&nbsp;&nbsp;&nbsp;&nbsp;3)&nbsp;a&nbsp;standard&nbsp;name,&nbsp;like&nbsp;'aqua'<br>
&nbsp;&nbsp;&nbsp;&nbsp;4)&nbsp;a&nbsp;float,&nbsp;like&nbsp;'0.4',&nbsp;indicating&nbsp;gray&nbsp;on&nbsp;a&nbsp;0-1&nbsp;scale<br>
&nbsp;<br>
if&nbsp;arg&nbsp;is&nbsp;RGBA,&nbsp;the&nbsp;A&nbsp;will&nbsp;simply&nbsp;be&nbsp;discarded.</tt></dd></dl>

<dl><dt><a name="ColorConverter-to_rgba"><strong>to_rgba</strong></a>(self, arg, alpha<font color="#909090">=None</font>)</dt><dd><tt>Returns&nbsp;an&nbsp;RGBA&nbsp;tuple&nbsp;of&nbsp;four&nbsp;floats&nbsp;from&nbsp;0-1.<br>
&nbsp;<br>
For&nbsp;acceptable&nbsp;values&nbsp;of&nbsp;arg,&nbsp;see&nbsp;to_rgb.<br>
If&nbsp;arg&nbsp;is&nbsp;an&nbsp;RGBA&nbsp;sequence&nbsp;and&nbsp;alpha&nbsp;is&nbsp;not&nbsp;None,<br>
alpha&nbsp;will&nbsp;replace&nbsp;the&nbsp;original&nbsp;A.</tt></dd></dl>

<dl><dt><a name="ColorConverter-to_rgba_array"><strong>to_rgba_array</strong></a>(self, c, alpha<font color="#909090">=None</font>)</dt><dd><tt>Returns&nbsp;an&nbsp;Numpy&nbsp;array&nbsp;of&nbsp;rgba&nbsp;tuples.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;single&nbsp;mpl&nbsp;color&nbsp;spec&nbsp;or&nbsp;a&nbsp;sequence&nbsp;of&nbsp;specs.<br>
If&nbsp;the&nbsp;sequence&nbsp;is&nbsp;a&nbsp;list&nbsp;or&nbsp;array,&nbsp;the&nbsp;items&nbsp;are&nbsp;changed&nbsp;in&nbsp;place,<br>
but&nbsp;an&nbsp;array&nbsp;copy&nbsp;is&nbsp;still&nbsp;returned.<br>
&nbsp;<br>
Special&nbsp;case&nbsp;to&nbsp;handle&nbsp;"no&nbsp;color":&nbsp;if&nbsp;c&nbsp;is&nbsp;"none"&nbsp;(case-insensitive),<br>
then&nbsp;an&nbsp;empty&nbsp;array&nbsp;will&nbsp;be&nbsp;returned.&nbsp;&nbsp;Same&nbsp;for&nbsp;an&nbsp;empty&nbsp;list.</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>cache</strong> = {}</dl>

<dl><dt><strong>colors</strong> = {'b': (0.0, 0.0, 1.0), 'c': (0.0, 0.75, 0.75), 'g': (0.0, 0.5, 0.0), 'k': (0.0, 0.0, 0.0), 'm': (0.75, 0, 0.75), 'r': (1.0, 0.0, 0.0), 'w': (1.0, 1.0, 1.0), 'y': (0.75, 0.75, 0)}</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Colormap">class <strong>Colormap</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Base&nbsp;class&nbsp;for&nbsp;all&nbsp;scalar&nbsp;to&nbsp;rgb&nbsp;mappings<br>
&nbsp;<br>
Important&nbsp;methods:<br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Colormap-set_bad">set_bad</a>()<br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Colormap-set_under">set_under</a>()<br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Colormap-set_over">set_over</a>()<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Colormap-__call__"><strong>__call__</strong></a>(self, X, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>X&nbsp;is&nbsp;either&nbsp;a&nbsp;scalar&nbsp;or&nbsp;an&nbsp;array&nbsp;(of&nbsp;any&nbsp;dimension).<br>
If&nbsp;scalar,&nbsp;a&nbsp;tuple&nbsp;of&nbsp;rgba&nbsp;values&nbsp;is&nbsp;returned,&nbsp;otherwise<br>
an&nbsp;array&nbsp;with&nbsp;the&nbsp;new&nbsp;shape&nbsp;=&nbsp;oldshape+(4,).&nbsp;If&nbsp;the&nbsp;X-values<br>
are&nbsp;integers,&nbsp;then&nbsp;they&nbsp;are&nbsp;used&nbsp;as&nbsp;indices&nbsp;into&nbsp;the&nbsp;array.<br>
If&nbsp;they&nbsp;are&nbsp;floating&nbsp;point,&nbsp;then&nbsp;they&nbsp;must&nbsp;be&nbsp;in&nbsp;the<br>
interval&nbsp;(0.0,&nbsp;1.0).<br>
Alpha&nbsp;must&nbsp;be&nbsp;a&nbsp;scalar.<br>
If&nbsp;bytes&nbsp;is&nbsp;False,&nbsp;the&nbsp;rgba&nbsp;values&nbsp;will&nbsp;be&nbsp;floats&nbsp;on&nbsp;a<br>
0-1&nbsp;scale;&nbsp;if&nbsp;True,&nbsp;they&nbsp;will&nbsp;be&nbsp;uint8,&nbsp;0-255.</tt></dd></dl>

<dl><dt><a name="Colormap-__init__"><strong>__init__</strong></a>(self, name, N<font color="#909090">=256</font>)</dt><dd><tt>Public&nbsp;class&nbsp;attributes:<br>
self.<strong>N</strong>:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;of&nbsp;rgb&nbsp;quantization&nbsp;levels<br>
self.<strong>name</strong>:&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;of&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="Colormap-is_gray"><strong>is_gray</strong></a>(self)</dt></dl>

<dl><dt><a name="Colormap-set_bad"><strong>set_bad</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;masked&nbsp;values.</tt></dd></dl>

<dl><dt><a name="Colormap-set_over"><strong>set_over</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;high&nbsp;out-of-range&nbsp;values.<br>
Requires&nbsp;norm.clip&nbsp;=&nbsp;False</tt></dd></dl>

<dl><dt><a name="Colormap-set_under"><strong>set_under</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;low&nbsp;out-of-range&nbsp;values.<br>
Requires&nbsp;norm.clip&nbsp;=&nbsp;False</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="LinearSegmentedColormap">class <strong>LinearSegmentedColormap</strong></a>(<a href="matplotlib.colors.html#Colormap">Colormap</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#Colormap">Colormap</a>&nbsp;objects&nbsp;based&nbsp;on&nbsp;lookup&nbsp;tables&nbsp;using&nbsp;linear&nbsp;segments.<br>
&nbsp;<br>
The&nbsp;lookup&nbsp;transfer&nbsp;function&nbsp;is&nbsp;a&nbsp;simple&nbsp;linear&nbsp;function&nbsp;between<br>
defined&nbsp;intensities.&nbsp;There&nbsp;is&nbsp;no&nbsp;limit&nbsp;to&nbsp;the&nbsp;number&nbsp;of&nbsp;segments<br>
that&nbsp;may&nbsp;be&nbsp;defined.&nbsp;Though&nbsp;as&nbsp;the&nbsp;segment&nbsp;intervals&nbsp;start&nbsp;containing<br>
fewer&nbsp;and&nbsp;fewer&nbsp;array&nbsp;locations,&nbsp;there&nbsp;will&nbsp;be&nbsp;inevitable&nbsp;quantization<br>
errors<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="LinearSegmentedColormap-__init__"><strong>__init__</strong></a>(self, name, segmentdata, N<font color="#909090">=256</font>)</dt><dd><tt>Create&nbsp;color&nbsp;map&nbsp;from&nbsp;linear&nbsp;mapping&nbsp;segments<br>
&nbsp;<br>
segmentdata&nbsp;argument&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;with&nbsp;a&nbsp;red,&nbsp;green&nbsp;and&nbsp;blue<br>
entries.&nbsp;Each&nbsp;entry&nbsp;should&nbsp;be&nbsp;a&nbsp;list&nbsp;of&nbsp;x,&nbsp;y0,&nbsp;y1&nbsp;tuples.<br>
See&nbsp;makeMappingArray&nbsp;for&nbsp;details</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.colors.html#Colormap">Colormap</a>:<br>
<dl><dt><a name="LinearSegmentedColormap-__call__"><strong>__call__</strong></a>(self, X, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>X&nbsp;is&nbsp;either&nbsp;a&nbsp;scalar&nbsp;or&nbsp;an&nbsp;array&nbsp;(of&nbsp;any&nbsp;dimension).<br>
If&nbsp;scalar,&nbsp;a&nbsp;tuple&nbsp;of&nbsp;rgba&nbsp;values&nbsp;is&nbsp;returned,&nbsp;otherwise<br>
an&nbsp;array&nbsp;with&nbsp;the&nbsp;new&nbsp;shape&nbsp;=&nbsp;oldshape+(4,).&nbsp;If&nbsp;the&nbsp;X-values<br>
are&nbsp;integers,&nbsp;then&nbsp;they&nbsp;are&nbsp;used&nbsp;as&nbsp;indices&nbsp;into&nbsp;the&nbsp;array.<br>
If&nbsp;they&nbsp;are&nbsp;floating&nbsp;point,&nbsp;then&nbsp;they&nbsp;must&nbsp;be&nbsp;in&nbsp;the<br>
interval&nbsp;(0.0,&nbsp;1.0).<br>
Alpha&nbsp;must&nbsp;be&nbsp;a&nbsp;scalar.<br>
If&nbsp;bytes&nbsp;is&nbsp;False,&nbsp;the&nbsp;rgba&nbsp;values&nbsp;will&nbsp;be&nbsp;floats&nbsp;on&nbsp;a<br>
0-1&nbsp;scale;&nbsp;if&nbsp;True,&nbsp;they&nbsp;will&nbsp;be&nbsp;uint8,&nbsp;0-255.</tt></dd></dl>

<dl><dt><a name="LinearSegmentedColormap-is_gray"><strong>is_gray</strong></a>(self)</dt></dl>

<dl><dt><a name="LinearSegmentedColormap-set_bad"><strong>set_bad</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;masked&nbsp;values.</tt></dd></dl>

<dl><dt><a name="LinearSegmentedColormap-set_over"><strong>set_over</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;high&nbsp;out-of-range&nbsp;values.<br>
Requires&nbsp;norm.clip&nbsp;=&nbsp;False</tt></dd></dl>

<dl><dt><a name="LinearSegmentedColormap-set_under"><strong>set_under</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;low&nbsp;out-of-range&nbsp;values.<br>
Requires&nbsp;norm.clip&nbsp;=&nbsp;False</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="ListedColormap">class <strong>ListedColormap</strong></a>(<a href="matplotlib.colors.html#LinearSegmentedColormap">LinearSegmentedColormap</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#Colormap">Colormap</a>&nbsp;object&nbsp;generated&nbsp;from&nbsp;a&nbsp;list&nbsp;of&nbsp;colors.<br>
&nbsp;<br>
Color&nbsp;boundaries&nbsp;are&nbsp;evenly&nbsp;spaced.&nbsp;&nbsp;This&nbsp;is&nbsp;intended&nbsp;for&nbsp;simulating<br>
indexed&nbsp;color&nbsp;selection,&nbsp;but&nbsp;may&nbsp;be&nbsp;useful&nbsp;for&nbsp;generating<br>
special&nbsp;colormaps&nbsp;also.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.colors.html#ListedColormap">ListedColormap</a></dd>
<dd><a href="matplotlib.colors.html#LinearSegmentedColormap">LinearSegmentedColormap</a></dd>
<dd><a href="matplotlib.colors.html#Colormap">Colormap</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="ListedColormap-__init__"><strong>__init__</strong></a>(self, colors, name<font color="#909090">='from_list'</font>, N<font color="#909090">=None</font>)</dt><dd><tt>Make&nbsp;a&nbsp;colormap&nbsp;from&nbsp;a&nbsp;list&nbsp;of&nbsp;colors.<br>
&nbsp;<br>
colors&nbsp;is&nbsp;a&nbsp;list&nbsp;of&nbsp;matplotlib&nbsp;color&nbsp;specifications<br>
name&nbsp;is&nbsp;a&nbsp;string&nbsp;to&nbsp;identify&nbsp;the&nbsp;colormap<br>
N&nbsp;is&nbsp;the&nbsp;number&nbsp;of&nbsp;entries&nbsp;in&nbsp;the&nbsp;map.&nbsp;&nbsp;The&nbsp;default&nbsp;is&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;in&nbsp;which&nbsp;case&nbsp;there&nbsp;is&nbsp;one&nbsp;colormap&nbsp;entry&nbsp;for&nbsp;each<br>
&nbsp;&nbsp;&nbsp;&nbsp;element&nbsp;in&nbsp;the&nbsp;list&nbsp;of&nbsp;colors.&nbsp;&nbsp;If&nbsp;N&nbsp;&lt;&nbsp;len(colors)<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;list&nbsp;will&nbsp;be&nbsp;truncated&nbsp;at&nbsp;N.&nbsp;&nbsp;If&nbsp;N&nbsp;&gt;&nbsp;len(colors),<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;list&nbsp;will&nbsp;be&nbsp;extended&nbsp;by&nbsp;repetition.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.colors.html#Colormap">Colormap</a>:<br>
<dl><dt><a name="ListedColormap-__call__"><strong>__call__</strong></a>(self, X, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>X&nbsp;is&nbsp;either&nbsp;a&nbsp;scalar&nbsp;or&nbsp;an&nbsp;array&nbsp;(of&nbsp;any&nbsp;dimension).<br>
If&nbsp;scalar,&nbsp;a&nbsp;tuple&nbsp;of&nbsp;rgba&nbsp;values&nbsp;is&nbsp;returned,&nbsp;otherwise<br>
an&nbsp;array&nbsp;with&nbsp;the&nbsp;new&nbsp;shape&nbsp;=&nbsp;oldshape+(4,).&nbsp;If&nbsp;the&nbsp;X-values<br>
are&nbsp;integers,&nbsp;then&nbsp;they&nbsp;are&nbsp;used&nbsp;as&nbsp;indices&nbsp;into&nbsp;the&nbsp;array.<br>
If&nbsp;they&nbsp;are&nbsp;floating&nbsp;point,&nbsp;then&nbsp;they&nbsp;must&nbsp;be&nbsp;in&nbsp;the<br>
interval&nbsp;(0.0,&nbsp;1.0).<br>
Alpha&nbsp;must&nbsp;be&nbsp;a&nbsp;scalar.<br>
If&nbsp;bytes&nbsp;is&nbsp;False,&nbsp;the&nbsp;rgba&nbsp;values&nbsp;will&nbsp;be&nbsp;floats&nbsp;on&nbsp;a<br>
0-1&nbsp;scale;&nbsp;if&nbsp;True,&nbsp;they&nbsp;will&nbsp;be&nbsp;uint8,&nbsp;0-255.</tt></dd></dl>

<dl><dt><a name="ListedColormap-is_gray"><strong>is_gray</strong></a>(self)</dt></dl>

<dl><dt><a name="ListedColormap-set_bad"><strong>set_bad</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;masked&nbsp;values.</tt></dd></dl>

<dl><dt><a name="ListedColormap-set_over"><strong>set_over</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;high&nbsp;out-of-range&nbsp;values.<br>
Requires&nbsp;norm.clip&nbsp;=&nbsp;False</tt></dd></dl>

<dl><dt><a name="ListedColormap-set_under"><strong>set_under</strong></a>(self, color<font color="#909090">='k'</font>, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Set&nbsp;color&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;low&nbsp;out-of-range&nbsp;values.<br>
Requires&nbsp;norm.clip&nbsp;=&nbsp;False</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="LogNorm">class <strong>LogNorm</strong></a>(<a href="matplotlib.colors.html#Normalize">Normalize</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#Normalize">Normalize</a>&nbsp;a&nbsp;given&nbsp;value&nbsp;to&nbsp;the&nbsp;0-1&nbsp;range&nbsp;on&nbsp;a&nbsp;log&nbsp;scale<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="LogNorm-__call__"><strong>__call__</strong></a>(self, value, clip<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="LogNorm-inverse"><strong>inverse</strong></a>(self, value)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.colors.html#Normalize">Normalize</a>:<br>
<dl><dt><a name="LogNorm-__init__"><strong>__init__</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>, clip<font color="#909090">=False</font>)</dt><dd><tt>If&nbsp;vmin&nbsp;or&nbsp;vmax&nbsp;is&nbsp;not&nbsp;given,&nbsp;they&nbsp;are&nbsp;taken&nbsp;from&nbsp;the&nbsp;input's<br>
minimum&nbsp;and&nbsp;maximum&nbsp;value&nbsp;respectively.&nbsp;&nbsp;If&nbsp;clip&nbsp;is&nbsp;True&nbsp;and<br>
the&nbsp;given&nbsp;value&nbsp;falls&nbsp;outside&nbsp;the&nbsp;range,&nbsp;the&nbsp;returned&nbsp;value<br>
will&nbsp;be&nbsp;0&nbsp;or&nbsp;1,&nbsp;whichever&nbsp;is&nbsp;closer.&nbsp;Returns&nbsp;0&nbsp;if&nbsp;vmin==vmax.<br>
Works&nbsp;with&nbsp;scalars&nbsp;or&nbsp;arrays,&nbsp;including&nbsp;masked&nbsp;arrays.&nbsp;&nbsp;If<br>
clip&nbsp;is&nbsp;True,&nbsp;masked&nbsp;values&nbsp;are&nbsp;set&nbsp;to&nbsp;1;&nbsp;otherwise&nbsp;they<br>
remain&nbsp;masked.&nbsp;&nbsp;Clipping&nbsp;silently&nbsp;defeats&nbsp;the&nbsp;purpose&nbsp;of&nbsp;setting<br>
the&nbsp;over,&nbsp;under,&nbsp;and&nbsp;masked&nbsp;colors&nbsp;in&nbsp;the&nbsp;colormap,&nbsp;so&nbsp;it&nbsp;is<br>
likely&nbsp;to&nbsp;lead&nbsp;to&nbsp;surprises;&nbsp;therefore&nbsp;the&nbsp;default&nbsp;is<br>
clip=False.</tt></dd></dl>

<dl><dt><a name="LogNorm-autoscale"><strong>autoscale</strong></a>(self, A)</dt><dd><tt>Set&nbsp;vmin,&nbsp;vmax&nbsp;to&nbsp;min,&nbsp;max&nbsp;of&nbsp;A.</tt></dd></dl>

<dl><dt><a name="LogNorm-autoscale_None"><strong>autoscale_None</strong></a>(self, A)</dt><dd><tt>autoscale&nbsp;only&nbsp;None-valued&nbsp;vmin&nbsp;or&nbsp;vmax</tt></dd></dl>

<dl><dt><a name="LogNorm-scaled"><strong>scaled</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;vmin&nbsp;and&nbsp;vmax&nbsp;set</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="NoNorm">class <strong>NoNorm</strong></a>(<a href="matplotlib.colors.html#Normalize">Normalize</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Dummy&nbsp;replacement&nbsp;for&nbsp;<a href="#Normalize">Normalize</a>,&nbsp;for&nbsp;the&nbsp;case&nbsp;where&nbsp;we<br>
want&nbsp;to&nbsp;use&nbsp;indices&nbsp;directly&nbsp;in&nbsp;a&nbsp;ScalarMappable.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="NoNorm-__call__"><strong>__call__</strong></a>(self, value, clip<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="NoNorm-inverse"><strong>inverse</strong></a>(self, value)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.colors.html#Normalize">Normalize</a>:<br>
<dl><dt><a name="NoNorm-__init__"><strong>__init__</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>, clip<font color="#909090">=False</font>)</dt><dd><tt>If&nbsp;vmin&nbsp;or&nbsp;vmax&nbsp;is&nbsp;not&nbsp;given,&nbsp;they&nbsp;are&nbsp;taken&nbsp;from&nbsp;the&nbsp;input's<br>
minimum&nbsp;and&nbsp;maximum&nbsp;value&nbsp;respectively.&nbsp;&nbsp;If&nbsp;clip&nbsp;is&nbsp;True&nbsp;and<br>
the&nbsp;given&nbsp;value&nbsp;falls&nbsp;outside&nbsp;the&nbsp;range,&nbsp;the&nbsp;returned&nbsp;value<br>
will&nbsp;be&nbsp;0&nbsp;or&nbsp;1,&nbsp;whichever&nbsp;is&nbsp;closer.&nbsp;Returns&nbsp;0&nbsp;if&nbsp;vmin==vmax.<br>
Works&nbsp;with&nbsp;scalars&nbsp;or&nbsp;arrays,&nbsp;including&nbsp;masked&nbsp;arrays.&nbsp;&nbsp;If<br>
clip&nbsp;is&nbsp;True,&nbsp;masked&nbsp;values&nbsp;are&nbsp;set&nbsp;to&nbsp;1;&nbsp;otherwise&nbsp;they<br>
remain&nbsp;masked.&nbsp;&nbsp;Clipping&nbsp;silently&nbsp;defeats&nbsp;the&nbsp;purpose&nbsp;of&nbsp;setting<br>
the&nbsp;over,&nbsp;under,&nbsp;and&nbsp;masked&nbsp;colors&nbsp;in&nbsp;the&nbsp;colormap,&nbsp;so&nbsp;it&nbsp;is<br>
likely&nbsp;to&nbsp;lead&nbsp;to&nbsp;surprises;&nbsp;therefore&nbsp;the&nbsp;default&nbsp;is<br>
clip=False.</tt></dd></dl>

<dl><dt><a name="NoNorm-autoscale"><strong>autoscale</strong></a>(self, A)</dt><dd><tt>Set&nbsp;vmin,&nbsp;vmax&nbsp;to&nbsp;min,&nbsp;max&nbsp;of&nbsp;A.</tt></dd></dl>

<dl><dt><a name="NoNorm-autoscale_None"><strong>autoscale_None</strong></a>(self, A)</dt><dd><tt>autoscale&nbsp;only&nbsp;None-valued&nbsp;vmin&nbsp;or&nbsp;vmax</tt></dd></dl>

<dl><dt><a name="NoNorm-scaled"><strong>scaled</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;vmin&nbsp;and&nbsp;vmax&nbsp;set</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Normalize">class <strong>Normalize</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#Normalize">Normalize</a>&nbsp;a&nbsp;given&nbsp;value&nbsp;to&nbsp;the&nbsp;0-1&nbsp;range<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Normalize-__call__"><strong>__call__</strong></a>(self, value, clip<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Normalize-__init__"><strong>__init__</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>, clip<font color="#909090">=False</font>)</dt><dd><tt>If&nbsp;vmin&nbsp;or&nbsp;vmax&nbsp;is&nbsp;not&nbsp;given,&nbsp;they&nbsp;are&nbsp;taken&nbsp;from&nbsp;the&nbsp;input's<br>
minimum&nbsp;and&nbsp;maximum&nbsp;value&nbsp;respectively.&nbsp;&nbsp;If&nbsp;clip&nbsp;is&nbsp;True&nbsp;and<br>
the&nbsp;given&nbsp;value&nbsp;falls&nbsp;outside&nbsp;the&nbsp;range,&nbsp;the&nbsp;returned&nbsp;value<br>
will&nbsp;be&nbsp;0&nbsp;or&nbsp;1,&nbsp;whichever&nbsp;is&nbsp;closer.&nbsp;Returns&nbsp;0&nbsp;if&nbsp;vmin==vmax.<br>
Works&nbsp;with&nbsp;scalars&nbsp;or&nbsp;arrays,&nbsp;including&nbsp;masked&nbsp;arrays.&nbsp;&nbsp;If<br>
clip&nbsp;is&nbsp;True,&nbsp;masked&nbsp;values&nbsp;are&nbsp;set&nbsp;to&nbsp;1;&nbsp;otherwise&nbsp;they<br>
remain&nbsp;masked.&nbsp;&nbsp;Clipping&nbsp;silently&nbsp;defeats&nbsp;the&nbsp;purpose&nbsp;of&nbsp;setting<br>
the&nbsp;over,&nbsp;under,&nbsp;and&nbsp;masked&nbsp;colors&nbsp;in&nbsp;the&nbsp;colormap,&nbsp;so&nbsp;it&nbsp;is<br>
likely&nbsp;to&nbsp;lead&nbsp;to&nbsp;surprises;&nbsp;therefore&nbsp;the&nbsp;default&nbsp;is<br>
clip=False.</tt></dd></dl>

<dl><dt><a name="Normalize-autoscale"><strong>autoscale</strong></a>(self, A)</dt><dd><tt>Set&nbsp;vmin,&nbsp;vmax&nbsp;to&nbsp;min,&nbsp;max&nbsp;of&nbsp;A.</tt></dd></dl>

<dl><dt><a name="Normalize-autoscale_None"><strong>autoscale_None</strong></a>(self, A)</dt><dd><tt>autoscale&nbsp;only&nbsp;None-valued&nbsp;vmin&nbsp;or&nbsp;vmax</tt></dd></dl>

<dl><dt><a name="Normalize-inverse"><strong>inverse</strong></a>(self, value)</dt></dl>

<dl><dt><a name="Normalize-scaled"><strong>scaled</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;vmin&nbsp;and&nbsp;vmax&nbsp;set</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><strong>no_norm</strong> = <a name="no_norm">class NoNorm</a>(<a href="matplotlib.colors.html#Normalize">Normalize</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Dummy&nbsp;replacement&nbsp;for&nbsp;<a href="#Normalize">Normalize</a>,&nbsp;for&nbsp;the&nbsp;case&nbsp;where&nbsp;we<br>
want&nbsp;to&nbsp;use&nbsp;indices&nbsp;directly&nbsp;in&nbsp;a&nbsp;ScalarMappable.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="NoNorm-__call__"><strong>__call__</strong></a>(self, value, clip<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="NoNorm-inverse"><strong>inverse</strong></a>(self, value)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.colors.html#Normalize">Normalize</a>:<br>
<dl><dt><a name="NoNorm-__init__"><strong>__init__</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>, clip<font color="#909090">=False</font>)</dt><dd><tt>If&nbsp;vmin&nbsp;or&nbsp;vmax&nbsp;is&nbsp;not&nbsp;given,&nbsp;they&nbsp;are&nbsp;taken&nbsp;from&nbsp;the&nbsp;input's<br>
minimum&nbsp;and&nbsp;maximum&nbsp;value&nbsp;respectively.&nbsp;&nbsp;If&nbsp;clip&nbsp;is&nbsp;True&nbsp;and<br>
the&nbsp;given&nbsp;value&nbsp;falls&nbsp;outside&nbsp;the&nbsp;range,&nbsp;the&nbsp;returned&nbsp;value<br>
will&nbsp;be&nbsp;0&nbsp;or&nbsp;1,&nbsp;whichever&nbsp;is&nbsp;closer.&nbsp;Returns&nbsp;0&nbsp;if&nbsp;vmin==vmax.<br>
Works&nbsp;with&nbsp;scalars&nbsp;or&nbsp;arrays,&nbsp;including&nbsp;masked&nbsp;arrays.&nbsp;&nbsp;If<br>
clip&nbsp;is&nbsp;True,&nbsp;masked&nbsp;values&nbsp;are&nbsp;set&nbsp;to&nbsp;1;&nbsp;otherwise&nbsp;they<br>
remain&nbsp;masked.&nbsp;&nbsp;Clipping&nbsp;silently&nbsp;defeats&nbsp;the&nbsp;purpose&nbsp;of&nbsp;setting<br>
the&nbsp;over,&nbsp;under,&nbsp;and&nbsp;masked&nbsp;colors&nbsp;in&nbsp;the&nbsp;colormap,&nbsp;so&nbsp;it&nbsp;is<br>
likely&nbsp;to&nbsp;lead&nbsp;to&nbsp;surprises;&nbsp;therefore&nbsp;the&nbsp;default&nbsp;is<br>
clip=False.</tt></dd></dl>

<dl><dt><a name="NoNorm-autoscale"><strong>autoscale</strong></a>(self, A)</dt><dd><tt>Set&nbsp;vmin,&nbsp;vmax&nbsp;to&nbsp;min,&nbsp;max&nbsp;of&nbsp;A.</tt></dd></dl>

<dl><dt><a name="NoNorm-autoscale_None"><strong>autoscale_None</strong></a>(self, A)</dt><dd><tt>autoscale&nbsp;only&nbsp;None-valued&nbsp;vmin&nbsp;or&nbsp;vmax</tt></dd></dl>

<dl><dt><a name="NoNorm-scaled"><strong>scaled</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;vmin&nbsp;and&nbsp;vmax&nbsp;set</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><strong>normalize</strong> = <a name="normalize">class Normalize</a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#Normalize">Normalize</a>&nbsp;a&nbsp;given&nbsp;value&nbsp;to&nbsp;the&nbsp;0-1&nbsp;range<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Normalize-__call__"><strong>__call__</strong></a>(self, value, clip<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Normalize-__init__"><strong>__init__</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>, clip<font color="#909090">=False</font>)</dt><dd><tt>If&nbsp;vmin&nbsp;or&nbsp;vmax&nbsp;is&nbsp;not&nbsp;given,&nbsp;they&nbsp;are&nbsp;taken&nbsp;from&nbsp;the&nbsp;input's<br>
minimum&nbsp;and&nbsp;maximum&nbsp;value&nbsp;respectively.&nbsp;&nbsp;If&nbsp;clip&nbsp;is&nbsp;True&nbsp;and<br>
the&nbsp;given&nbsp;value&nbsp;falls&nbsp;outside&nbsp;the&nbsp;range,&nbsp;the&nbsp;returned&nbsp;value<br>
will&nbsp;be&nbsp;0&nbsp;or&nbsp;1,&nbsp;whichever&nbsp;is&nbsp;closer.&nbsp;Returns&nbsp;0&nbsp;if&nbsp;vmin==vmax.<br>
Works&nbsp;with&nbsp;scalars&nbsp;or&nbsp;arrays,&nbsp;including&nbsp;masked&nbsp;arrays.&nbsp;&nbsp;If<br>
clip&nbsp;is&nbsp;True,&nbsp;masked&nbsp;values&nbsp;are&nbsp;set&nbsp;to&nbsp;1;&nbsp;otherwise&nbsp;they<br>
remain&nbsp;masked.&nbsp;&nbsp;Clipping&nbsp;silently&nbsp;defeats&nbsp;the&nbsp;purpose&nbsp;of&nbsp;setting<br>
the&nbsp;over,&nbsp;under,&nbsp;and&nbsp;masked&nbsp;colors&nbsp;in&nbsp;the&nbsp;colormap,&nbsp;so&nbsp;it&nbsp;is<br>
likely&nbsp;to&nbsp;lead&nbsp;to&nbsp;surprises;&nbsp;therefore&nbsp;the&nbsp;default&nbsp;is<br>
clip=False.</tt></dd></dl>

<dl><dt><a name="Normalize-autoscale"><strong>autoscale</strong></a>(self, A)</dt><dd><tt>Set&nbsp;vmin,&nbsp;vmax&nbsp;to&nbsp;min,&nbsp;max&nbsp;of&nbsp;A.</tt></dd></dl>

<dl><dt><a name="Normalize-autoscale_None"><strong>autoscale_None</strong></a>(self, A)</dt><dd><tt>autoscale&nbsp;only&nbsp;None-valued&nbsp;vmin&nbsp;or&nbsp;vmax</tt></dd></dl>

<dl><dt><a name="Normalize-inverse"><strong>inverse</strong></a>(self, value)</dt></dl>

<dl><dt><a name="Normalize-scaled"><strong>scaled</strong></a>(self)</dt><dd><tt>return&nbsp;true&nbsp;if&nbsp;vmin&nbsp;and&nbsp;vmax&nbsp;set</tt></dd></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-hex2color"><strong>hex2color</strong></a>(s)</dt><dd><tt>Take&nbsp;a&nbsp;hex&nbsp;string&nbsp;'s'&nbsp;and&nbsp;return&nbsp;the&nbsp;corresponding&nbsp;rgb&nbsp;3-tuple<br>
Example:&nbsp;#efefef&nbsp;-&gt;&nbsp;(0.93725,&nbsp;0.93725,&nbsp;0.93725)</tt></dd></dl>
 <dl><dt><a name="-is_color_like"><strong>is_color_like</strong></a>(c)</dt></dl>
 <dl><dt><a name="-makeMappingArray"><strong>makeMappingArray</strong></a>(N, data)</dt><dd><tt>Create&nbsp;an&nbsp;N-element&nbsp;1-d&nbsp;lookup&nbsp;table<br>
&nbsp;<br>
data&nbsp;represented&nbsp;by&nbsp;a&nbsp;list&nbsp;of&nbsp;x,y0,y1&nbsp;mapping&nbsp;correspondences.<br>
Each&nbsp;element&nbsp;in&nbsp;this&nbsp;list&nbsp;represents&nbsp;how&nbsp;a&nbsp;value&nbsp;between&nbsp;0&nbsp;and&nbsp;1<br>
(inclusive)&nbsp;represented&nbsp;by&nbsp;x&nbsp;is&nbsp;mapped&nbsp;to&nbsp;a&nbsp;corresponding&nbsp;value<br>
between&nbsp;0&nbsp;and&nbsp;1&nbsp;(inclusive).&nbsp;The&nbsp;two&nbsp;values&nbsp;of&nbsp;y&nbsp;are&nbsp;to&nbsp;allow<br>
for&nbsp;discontinuous&nbsp;mapping&nbsp;functions&nbsp;(say&nbsp;as&nbsp;might&nbsp;be&nbsp;found&nbsp;in&nbsp;a<br>
sawtooth)&nbsp;where&nbsp;y0&nbsp;represents&nbsp;the&nbsp;value&nbsp;of&nbsp;y&nbsp;for&nbsp;values&nbsp;of&nbsp;x<br>
&lt;=&nbsp;to&nbsp;that&nbsp;given,&nbsp;and&nbsp;y1&nbsp;is&nbsp;the&nbsp;value&nbsp;to&nbsp;be&nbsp;used&nbsp;for&nbsp;x&nbsp;&gt;&nbsp;than<br>
that&nbsp;given).&nbsp;The&nbsp;list&nbsp;must&nbsp;start&nbsp;with&nbsp;x=0,&nbsp;end&nbsp;with&nbsp;x=1,&nbsp;and<br>
all&nbsp;values&nbsp;of&nbsp;x&nbsp;must&nbsp;be&nbsp;in&nbsp;increasing&nbsp;order.&nbsp;Values&nbsp;between<br>
the&nbsp;given&nbsp;mapping&nbsp;points&nbsp;are&nbsp;determined&nbsp;by&nbsp;simple&nbsp;linear&nbsp;interpolation.<br>
&nbsp;<br>
The&nbsp;function&nbsp;returns&nbsp;an&nbsp;array&nbsp;"result"&nbsp;where&nbsp;result[x*(N-1)]<br>
gives&nbsp;the&nbsp;closest&nbsp;value&nbsp;for&nbsp;values&nbsp;of&nbsp;x&nbsp;between&nbsp;0&nbsp;and&nbsp;1.</tt></dd></dl>
 <dl><dt><a name="-rgb2hex"><strong>rgb2hex</strong></a>(rgb)</dt><dd><tt>Given&nbsp;a&nbsp;len&nbsp;3&nbsp;rgb&nbsp;tuple&nbsp;of&nbsp;0-1&nbsp;floats,&nbsp;return&nbsp;the&nbsp;hex&nbsp;string</tt></dd></dl>
</td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>cnames</strong> = {'aliceblue': '#F0F8FF', 'antiquewhite': '#FAEBD7', 'aqua': '#00FFFF', 'aquamarine': '#7FFFD4', 'azure': '#F0FFFF', 'beige': '#F5F5DC', 'bisque': '#FFE4C4', 'black': '#000000', 'blanchedalmond': '#FFEBCD', 'blue': '#0000FF', ...}<br>
<strong>colorConverter</strong> = &lt;matplotlib.colors.ColorConverter instance at 0xe29710&gt;<br>
<strong>hexColorPattern</strong> = &lt;_sre.SRE_Pattern object at 0xcf69f0&gt;<br>
<strong>k</strong> = 'peachpuff'<br>
<strong>v</strong> = '#FFDAB9'</td></tr></table>
@footer@