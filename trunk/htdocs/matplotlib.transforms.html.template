@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.transforms</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/transforms.py">/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/transforms.py</a></font></td></tr></table>
    <p><tt>This&nbsp;module&nbsp;contains&nbsp;a&nbsp;framework&nbsp;for&nbsp;arbitrary&nbsp;transformations.<br>
&nbsp;<br>
Transforms&nbsp;are&nbsp;composed&nbsp;into&nbsp;a&nbsp;'transform&nbsp;tree',&nbsp;made&nbsp;of&nbsp;transforms<br>
whose&nbsp;value&nbsp;depends&nbsp;on&nbsp;other&nbsp;transforms&nbsp;(their&nbsp;children).&nbsp;&nbsp;When&nbsp;the<br>
contents&nbsp;of&nbsp;children&nbsp;change,&nbsp;their&nbsp;parents&nbsp;are&nbsp;automatically&nbsp;updated<br>
to&nbsp;reflect&nbsp;those&nbsp;changes.&nbsp;&nbsp;To&nbsp;do&nbsp;this&nbsp;an&nbsp;"invalidation"&nbsp;method&nbsp;is<br>
used:&nbsp;when&nbsp;children&nbsp;change,&nbsp;all&nbsp;of&nbsp;their&nbsp;ancestors&nbsp;are&nbsp;marked&nbsp;as<br>
"invalid".&nbsp;&nbsp;When&nbsp;the&nbsp;value&nbsp;of&nbsp;a&nbsp;transform&nbsp;is&nbsp;accessed&nbsp;at&nbsp;a&nbsp;later&nbsp;time,<br>
its&nbsp;value&nbsp;is&nbsp;recomputed&nbsp;only&nbsp;if&nbsp;it&nbsp;is&nbsp;invalid,&nbsp;otherwise&nbsp;a&nbsp;cached<br>
value&nbsp;may&nbsp;be&nbsp;used.&nbsp;&nbsp;This&nbsp;prevents&nbsp;unnecessary&nbsp;recomputations&nbsp;of<br>
transforms,&nbsp;and&nbsp;contributes&nbsp;to&nbsp;better&nbsp;interactive&nbsp;performance.<br>
&nbsp;<br>
The&nbsp;framework&nbsp;can&nbsp;be&nbsp;used&nbsp;for&nbsp;both&nbsp;affine&nbsp;and&nbsp;non-affine<br>
transformations.&nbsp;&nbsp;However,&nbsp;for&nbsp;speed,&nbsp;we&nbsp;want&nbsp;use&nbsp;the&nbsp;backend<br>
renderers&nbsp;to&nbsp;perform&nbsp;affine&nbsp;transformations&nbsp;whenever&nbsp;possible.<br>
Therefore,&nbsp;it&nbsp;is&nbsp;possible&nbsp;to&nbsp;perform&nbsp;just&nbsp;the&nbsp;affine&nbsp;or&nbsp;non-affine<br>
part&nbsp;of&nbsp;a&nbsp;transformation&nbsp;on&nbsp;a&nbsp;set&nbsp;of&nbsp;data.&nbsp;&nbsp;The&nbsp;affine&nbsp;is&nbsp;always<br>
assumed&nbsp;to&nbsp;occur&nbsp;after&nbsp;the&nbsp;non-affine.&nbsp;&nbsp;For&nbsp;any&nbsp;transform:<br>
&nbsp;<br>
&nbsp;&nbsp;full&nbsp;transform&nbsp;==&nbsp;non-affine&nbsp;+&nbsp;affine<br>
&nbsp;<br>
2007&nbsp;Michael&nbsp;Droettboom</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib.cbook.html">matplotlib.cbook</a><br>
</td><td width="25%" valign=top><a href="numpy.ma.html">numpy.ma</a><br>
</td><td width="25%" valign=top><a href="numpy.html">numpy</a><br>
</td><td width="25%" valign=top><a href="warnings.html">warnings</a><br>
</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="__builtin__.html#object">__builtin__.object</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#TransformNode">TransformNode</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#BboxBase">BboxBase</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#Bbox">Bbox</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#TransformedBbox">TransformedBbox</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#Transform">Transform</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#AffineBase">AffineBase</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#Affine2D">Affine2D</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#BboxTransform">BboxTransform</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#BboxTransformFrom">BboxTransformFrom</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#BboxTransformTo">BboxTransformTo</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#BlendedAffine2D">BlendedAffine2D</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#CompositeAffine2D">CompositeAffine2D</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#IdentityTransform">IdentityTransform</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#ScaledTranslation">ScaledTranslation</a>
</font></dt></dl>
</dd>
</dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#BlendedGenericTransform">BlendedGenericTransform</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#CompositeGenericTransform">CompositeGenericTransform</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#TransformWrapper">TransformWrapper</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.transforms.html#TransformedPath">TransformedPath</a>
</font></dt></dl>
</dd>
</dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Affine2D">class <strong>Affine2D</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#Affine2D">Affine2D</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Affine2D-__cmp__"><strong>__cmp__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="Affine2D-__init__"><strong>__init__</strong></a>(self, matrix<font color="#909090">=None</font>)</dt><dd><tt>Initialize&nbsp;an&nbsp;Affine&nbsp;transform&nbsp;from&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;float&nbsp;array:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1<br>
&nbsp;<br>
If&nbsp;matrix&nbsp;is&nbsp;None,&nbsp;initialize&nbsp;with&nbsp;the&nbsp;identity&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="Affine2D-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="Affine2D-__str__"><strong>__str__</strong></a> = <a href="#Affine2D-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="Affine2D-clear"><strong>clear</strong></a>(self)</dt><dd><tt>Reset&nbsp;the&nbsp;underlying&nbsp;matrix&nbsp;to&nbsp;the&nbsp;identity&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="Affine2D-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<dl><dt><a name="Affine2D-rotate"><strong>rotate</strong></a>(self, theta)</dt><dd><tt>Add&nbsp;a&nbsp;rotation&nbsp;(in&nbsp;radians)&nbsp;to&nbsp;this&nbsp;transform&nbsp;in&nbsp;place.<br>
&nbsp;<br>
Returns&nbsp;self,&nbsp;so&nbsp;this&nbsp;method&nbsp;can&nbsp;easily&nbsp;be&nbsp;chained&nbsp;with&nbsp;more<br>
calls&nbsp;to&nbsp;<a href="#Affine2D-rotate">rotate</a>(),&nbsp;<a href="#Affine2D-rotate_deg">rotate_deg</a>(),&nbsp;<a href="#Affine2D-translate">translate</a>()&nbsp;and&nbsp;<a href="#Affine2D-scale">scale</a>().</tt></dd></dl>

<dl><dt><a name="Affine2D-rotate_around"><strong>rotate_around</strong></a>(self, x, y, theta)</dt><dd><tt>Add&nbsp;a&nbsp;rotation&nbsp;(in&nbsp;radians)&nbsp;around&nbsp;the&nbsp;point&nbsp;(x,&nbsp;y)&nbsp;in&nbsp;place.<br>
&nbsp;<br>
Returns&nbsp;self,&nbsp;so&nbsp;this&nbsp;method&nbsp;can&nbsp;easily&nbsp;be&nbsp;chained&nbsp;with&nbsp;more<br>
calls&nbsp;to&nbsp;<a href="#Affine2D-rotate">rotate</a>(),&nbsp;<a href="#Affine2D-rotate_deg">rotate_deg</a>(),&nbsp;<a href="#Affine2D-translate">translate</a>()&nbsp;and&nbsp;<a href="#Affine2D-scale">scale</a>().</tt></dd></dl>

<dl><dt><a name="Affine2D-rotate_deg"><strong>rotate_deg</strong></a>(self, degrees)</dt><dd><tt>Add&nbsp;a&nbsp;rotation&nbsp;(in&nbsp;degrees)&nbsp;to&nbsp;this&nbsp;transform&nbsp;in&nbsp;place.<br>
&nbsp;<br>
Returns&nbsp;self,&nbsp;so&nbsp;this&nbsp;method&nbsp;can&nbsp;easily&nbsp;be&nbsp;chained&nbsp;with&nbsp;more<br>
calls&nbsp;to&nbsp;<a href="#Affine2D-rotate">rotate</a>(),&nbsp;<a href="#Affine2D-rotate_deg">rotate_deg</a>(),&nbsp;<a href="#Affine2D-translate">translate</a>()&nbsp;and&nbsp;<a href="#Affine2D-scale">scale</a>().</tt></dd></dl>

<dl><dt><a name="Affine2D-rotate_deg_around"><strong>rotate_deg_around</strong></a>(self, x, y, degrees)</dt><dd><tt>Add&nbsp;a&nbsp;rotation&nbsp;(in&nbsp;degrees)&nbsp;around&nbsp;the&nbsp;point&nbsp;(x,&nbsp;y)&nbsp;in&nbsp;place.<br>
&nbsp;<br>
Returns&nbsp;self,&nbsp;so&nbsp;this&nbsp;method&nbsp;can&nbsp;easily&nbsp;be&nbsp;chained&nbsp;with&nbsp;more<br>
calls&nbsp;to&nbsp;<a href="#Affine2D-rotate">rotate</a>(),&nbsp;<a href="#Affine2D-rotate_deg">rotate_deg</a>(),&nbsp;<a href="#Affine2D-translate">translate</a>()&nbsp;and&nbsp;<a href="#Affine2D-scale">scale</a>().</tt></dd></dl>

<dl><dt><a name="Affine2D-scale"><strong>scale</strong></a>(self, sx, sy<font color="#909090">=None</font>)</dt><dd><tt>Adds&nbsp;a&nbsp;scale&nbsp;in&nbsp;place.<br>
&nbsp;<br>
If&nbsp;sy&nbsp;is&nbsp;None,&nbsp;the&nbsp;same&nbsp;scale&nbsp;is&nbsp;applied&nbsp;in&nbsp;both&nbsp;the&nbsp;x-&nbsp;and<br>
y-directions.<br>
&nbsp;<br>
Returns&nbsp;self,&nbsp;so&nbsp;this&nbsp;method&nbsp;can&nbsp;easily&nbsp;be&nbsp;chained&nbsp;with&nbsp;more<br>
calls&nbsp;to&nbsp;<a href="#Affine2D-rotate">rotate</a>(),&nbsp;<a href="#Affine2D-rotate_deg">rotate_deg</a>(),&nbsp;<a href="#Affine2D-translate">translate</a>()&nbsp;and&nbsp;<a href="#Affine2D-scale">scale</a>().</tt></dd></dl>

<dl><dt><a name="Affine2D-set"><strong>set</strong></a>(self, other)</dt><dd><tt>Set&nbsp;this&nbsp;transformation&nbsp;from&nbsp;the&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;another<br>
<a href="#Affine2DBase">Affine2DBase</a>&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="Affine2D-set_matrix"><strong>set_matrix</strong></a>(self, mtx)</dt><dd><tt>Set&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;from&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<dl><dt><a name="Affine2D-translate"><strong>translate</strong></a>(self, tx, ty)</dt><dd><tt>Adds&nbsp;a&nbsp;translation&nbsp;in&nbsp;place.<br>
&nbsp;<br>
Returns&nbsp;self,&nbsp;so&nbsp;this&nbsp;method&nbsp;can&nbsp;easily&nbsp;be&nbsp;chained&nbsp;with&nbsp;more<br>
calls&nbsp;to&nbsp;<a href="#Affine2D-rotate">rotate</a>(),&nbsp;<a href="#Affine2D-rotate_deg">rotate_deg</a>(),&nbsp;<a href="#Affine2D-translate">translate</a>()&nbsp;and&nbsp;<a href="#Affine2D-scale">scale</a>().</tt></dd></dl>

<hr>
Static methods defined here:<br>
<dl><dt><a name="Affine2D-from_values"><strong>from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;<a href="#Affine2D">Affine2D</a>&nbsp;instance&nbsp;from&nbsp;the&nbsp;given&nbsp;values:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<dl><dt><a name="Affine2D-identity"><strong>identity</strong></a>()</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Affine2D">Affine2D</a>&nbsp;instance&nbsp;that&nbsp;is&nbsp;the&nbsp;identity&nbsp;transform.<br>
&nbsp;<br>
Unless&nbsp;this&nbsp;transform&nbsp;will&nbsp;be&nbsp;mutated&nbsp;later&nbsp;on,&nbsp;consider&nbsp;using<br>
the&nbsp;faster&nbsp;<a href="#IdentityTransform">IdentityTransform</a>&nbsp;class&nbsp;instead.</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>is_separable</strong></dt>
</dl>
<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="Affine2D-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="Affine2D-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="Affine2D-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#Affine2D-inverted">inverted</a>().<a href="#Affine2D-transform">transform</a>(<a href="#Affine2D-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="Affine2D-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="Affine2D-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#Affine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform_affine">transform_affine</a>(<a href="#Affine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Affine2D-transform_affine"><strong>transform_affine</strong></a> = transform(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#Affine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform_affine">transform_affine</a>(<a href="#Affine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Affine2D-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="Affine2D-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="Affine2D-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="Affine2D-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#Affine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform_affine">transform_affine</a>(<a href="#Affine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Affine2D-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#Affine2D-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform_path_affine">transform_path_affine</a>(<a href="#Affine2D-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="Affine2D-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#Affine2D-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2D-transform_path_affine">transform_path_affine</a>(<a href="#Affine2D-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="Affine2D-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="Affine2D-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="Affine2D-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="Affine2D-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="Affine2D-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="Affine2D-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="Affine2D-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="Affine2D-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Affine2DBase">class <strong>Affine2DBase</strong></a>(<a href="matplotlib.transforms.html#AffineBase">AffineBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>The&nbsp;base&nbsp;class&nbsp;of&nbsp;all&nbsp;2D&nbsp;affine&nbsp;transformations.<br>
&nbsp;<br>
2D&nbsp;affine&nbsp;transformations&nbsp;are&nbsp;performed&nbsp;using&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;0&nbsp;1<br>
&nbsp;<br>
Provides&nbsp;the&nbsp;read-only&nbsp;interface.<br>
&nbsp;<br>
Subclasses&nbsp;of&nbsp;this&nbsp;class&nbsp;will&nbsp;generally&nbsp;only&nbsp;need&nbsp;to&nbsp;override&nbsp;a<br>
constructor&nbsp;and&nbsp;'get_matrix'&nbsp;that&nbsp;generates&nbsp;a&nbsp;custom&nbsp;3x3&nbsp;matrix.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Affine2DBase-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="Affine2DBase-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="Affine2DBase-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#Affine2DBase-inverted">inverted</a>().<a href="#Affine2DBase-transform">transform</a>(<a href="#Affine2DBase-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="Affine2DBase-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="Affine2DBase-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#Affine2DBase-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2DBase-transform_affine">transform_affine</a>(<a href="#Affine2DBase-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2DBase-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Affine2DBase-transform_affine"><strong>transform_affine</strong></a> = <a href="#Affine2DBase-transform">transform</a>(self, points)</dt></dl>

<dl><dt><a name="Affine2DBase-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods defined here:<br>
<dl><dt><a name="Affine2DBase-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>is_separable</strong></dt>
</dl>
<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="Affine2DBase-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<dl><dt><a name="Affine2DBase-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="Affine2DBase-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<dl><dt><a name="Affine2DBase-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#Affine2DBase-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2DBase-transform_affine">transform_affine</a>(<a href="#Affine2DBase-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2DBase-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Affine2DBase-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#Affine2DBase-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2DBase-transform_path_affine">transform_path_affine</a>(<a href="#Affine2DBase-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="Affine2DBase-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#Affine2DBase-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Affine2DBase-transform_path_affine">transform_path_affine</a>(<a href="#Affine2DBase-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="Affine2DBase-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="Affine2DBase-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="Affine2DBase-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="Affine2DBase-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="Affine2DBase-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="Affine2DBase-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="Affine2DBase-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="Affine2DBase-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="AffineBase">class <strong>AffineBase</strong></a>(<a href="matplotlib.transforms.html#Transform">Transform</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>The&nbsp;base&nbsp;class&nbsp;of&nbsp;all&nbsp;affine&nbsp;transformations&nbsp;of&nbsp;any&nbsp;number&nbsp;of<br>
dimensions.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="AffineBase-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="AffineBase-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<dl><dt><a name="AffineBase-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="AffineBase-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<dl><dt><a name="AffineBase-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#AffineBase-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#AffineBase-transform_affine">transform_affine</a>(<a href="#AffineBase-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#AffineBase-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="AffineBase-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#AffineBase-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#AffineBase-transform_path_affine">transform_path_affine</a>(<a href="#AffineBase-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="AffineBase-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#AffineBase-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#AffineBase-transform_path_affine">transform_path_affine</a>(<a href="#AffineBase-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="AffineBase-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="AffineBase-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="AffineBase-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#AffineBase-inverted">inverted</a>().<a href="#AffineBase-transform">transform</a>(<a href="#AffineBase-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="AffineBase-transform"><strong>transform</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;the&nbsp;transformation&nbsp;on&nbsp;the&nbsp;given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="AffineBase-transform_affine"><strong>transform_affine</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#AffineBase-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#AffineBase-transform_affine">transform_affine</a>(<a href="#AffineBase-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#AffineBase-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="AffineBase-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<dl><dt><a name="AffineBase-transform_point"><strong>transform_point</strong></a>(self, point)</dt><dd><tt>A&nbsp;convenience&nbsp;function&nbsp;that&nbsp;returns&nbsp;the&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;a<br>
single&nbsp;point.<br>
&nbsp;<br>
The&nbsp;point&nbsp;is&nbsp;given&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length&nbsp;self.<strong>input_dims</strong>.<br>
The&nbsp;transformed&nbsp;point&nbsp;is&nbsp;returned&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length<br>
self.<strong>output_dims</strong>.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<dl><dt><strong>input_dims</strong> = None</dl>

<dl><dt><strong>is_separable</strong> = False</dl>

<dl><dt><strong>output_dims</strong> = None</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="AffineBase-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="AffineBase-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="AffineBase-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="AffineBase-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="AffineBase-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="AffineBase-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Bbox">class <strong>Bbox</strong></a>(<a href="matplotlib.transforms.html#BboxBase">BboxBase</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#Bbox">Bbox</a></dd>
<dd><a href="matplotlib.transforms.html#BboxBase">BboxBase</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Bbox-__init__"><strong>__init__</strong></a>(self, points)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;bounding&nbsp;box.<br>
&nbsp;<br>
points:&nbsp;a&nbsp;2x2&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form&nbsp;[[x0,&nbsp;y0],&nbsp;[x1,&nbsp;y1]]<br>
&nbsp;<br>
If&nbsp;you&nbsp;need&nbsp;to&nbsp;create&nbsp;<a href="#Bbox">Bbox</a>&nbsp;from&nbsp;another&nbsp;form&nbsp;of&nbsp;data,&nbsp;consider&nbsp;the<br>
class&nbsp;methods&nbsp;unit,&nbsp;from_bounds&nbsp;and&nbsp;from_extents.</tt></dd></dl>

<dl><dt><a name="Bbox-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="Bbox-__str__"><strong>__str__</strong></a> = <a href="#Bbox-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="Bbox-get_points"><strong>get_points</strong></a>(self)</dt><dd><tt>Set&nbsp;the&nbsp;points&nbsp;of&nbsp;the&nbsp;bounding&nbsp;box&nbsp;directly&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array<br>
of&nbsp;the&nbsp;form:&nbsp;[[x0,&nbsp;y0],&nbsp;[x1,&nbsp;y1]].</tt></dd></dl>

<dl><dt><a name="Bbox-ignore"><strong>ignore</strong></a>(self, value)</dt><dd><tt>Set&nbsp;whether&nbsp;the&nbsp;existing&nbsp;bounds&nbsp;of&nbsp;the&nbsp;box&nbsp;should&nbsp;be&nbsp;ignored<br>
by&nbsp;subsequent&nbsp;calls&nbsp;to&nbsp;update_from_data&nbsp;or<br>
update_from_data_xy.<br>
&nbsp;<br>
value:&nbsp;When&nbsp;True,&nbsp;subsequent&nbsp;calls&nbsp;to&nbsp;update_from_data&nbsp;will<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ignore&nbsp;the&nbsp;existing&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When&nbsp;False,&nbsp;subsequent&nbsp;calls&nbsp;to&nbsp;update_from_data&nbsp;will<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;the&nbsp;existing&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.</tt></dd></dl>

<dl><dt><a name="Bbox-set"><strong>set</strong></a>(self, other)</dt><dd><tt>Set&nbsp;this&nbsp;bounding&nbsp;box&nbsp;from&nbsp;the&nbsp;"frozen"&nbsp;bounds&nbsp;of&nbsp;another&nbsp;<a href="#Bbox">Bbox</a>.</tt></dd></dl>

<dl><dt><a name="Bbox-set_points"><strong>set_points</strong></a>(self, points)</dt><dd><tt>Set&nbsp;the&nbsp;points&nbsp;of&nbsp;the&nbsp;bounding&nbsp;box&nbsp;directly&nbsp;from&nbsp;a&nbsp;numpy&nbsp;array<br>
of&nbsp;the&nbsp;form:&nbsp;[[x0,&nbsp;y0],&nbsp;[x1,&nbsp;y1]].&nbsp;&nbsp;No&nbsp;error&nbsp;checking<br>
is&nbsp;performed,&nbsp;as&nbsp;this&nbsp;method&nbsp;is&nbsp;mainly&nbsp;for&nbsp;internal&nbsp;use.</tt></dd></dl>

<dl><dt><a name="Bbox-update_from_data"><strong>update_from_data</strong></a>(self, x, y, ignore<font color="#909090">=None</font>)</dt><dd><tt>Update&nbsp;the&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>&nbsp;based&nbsp;on&nbsp;the&nbsp;passed&nbsp;in&nbsp;data.<br>
&nbsp;<br>
x:&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;x-values<br>
y:&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;y-values<br>
ignore:<br>
&nbsp;&nbsp;&nbsp;when&nbsp;True,&nbsp;ignore&nbsp;the&nbsp;existing&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;&nbsp;&nbsp;when&nbsp;False,&nbsp;include&nbsp;the&nbsp;existing&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;&nbsp;&nbsp;when&nbsp;None,&nbsp;use&nbsp;the&nbsp;last&nbsp;value&nbsp;passed&nbsp;to&nbsp;<a href="#Bbox">Bbox</a>.<a href="#Bbox-ignore">ignore</a>().</tt></dd></dl>

<dl><dt><a name="Bbox-update_from_data_xy"><strong>update_from_data_xy</strong></a>(self, xy, ignore<font color="#909090">=None</font>)</dt><dd><tt>Update&nbsp;the&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>&nbsp;based&nbsp;on&nbsp;the&nbsp;passed&nbsp;in&nbsp;data.<br>
&nbsp;<br>
xy:&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;2D&nbsp;points<br>
ignore:<br>
&nbsp;&nbsp;&nbsp;when&nbsp;True,&nbsp;ignore&nbsp;the&nbsp;existing&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;&nbsp;&nbsp;when&nbsp;False,&nbsp;include&nbsp;the&nbsp;existing&nbsp;bounds&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;&nbsp;&nbsp;when&nbsp;None,&nbsp;use&nbsp;the&nbsp;last&nbsp;value&nbsp;passed&nbsp;to&nbsp;<a href="#Bbox">Bbox</a>.<a href="#Bbox-ignore">ignore</a>().</tt></dd></dl>

<hr>
Static methods defined here:<br>
<dl><dt><a name="Bbox-from_bounds"><strong>from_bounds</strong></a>(x0, y0, width, height)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;from&nbsp;x0,&nbsp;y0,&nbsp;width&nbsp;and&nbsp;height.<br>
&nbsp;<br>
width&nbsp;and&nbsp;height&nbsp;may&nbsp;be&nbsp;negative.</tt></dd></dl>

<dl><dt><a name="Bbox-from_extents"><strong>from_extents</strong></a>(*args)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;from&nbsp;left,&nbsp;bottom,&nbsp;right&nbsp;and&nbsp;top.<br>
&nbsp;<br>
The&nbsp;y-axis&nbsp;increases&nbsp;upwards.</tt></dd></dl>

<dl><dt><a name="Bbox-unit"><strong>unit</strong></a>()</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;unit&nbsp;BBox&nbsp;from&nbsp;(0,&nbsp;0)&nbsp;to&nbsp;(1,&nbsp;1).</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>bounds</strong></dt>
</dl>
<dl><dt><strong>intervalx</strong></dt>
</dl>
<dl><dt><strong>intervaly</strong></dt>
</dl>
<dl><dt><strong>minpos</strong></dt>
</dl>
<dl><dt><strong>minposx</strong></dt>
</dl>
<dl><dt><strong>minposy</strong></dt>
</dl>
<dl><dt><strong>p0</strong></dt>
</dl>
<dl><dt><strong>p1</strong></dt>
</dl>
<dl><dt><strong>x0</strong></dt>
</dl>
<dl><dt><strong>x1</strong></dt>
</dl>
<dl><dt><strong>y0</strong></dt>
</dl>
<dl><dt><strong>y1</strong></dt>
</dl>
<hr>
Methods inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><a name="Bbox-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="Bbox-anchored"><strong>anchored</strong></a>(self, c, container<font color="#909090">=None</font>)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shifted&nbsp;to&nbsp;position&nbsp;c&nbsp;within&nbsp;a<br>
container.<br>
&nbsp;<br>
c:&nbsp;may&nbsp;be&nbsp;either&nbsp;a)&nbsp;a&nbsp;sequence&nbsp;(cx,&nbsp;cy)&nbsp;where&nbsp;cx,&nbsp;cy&nbsp;range<br>
from&nbsp;0&nbsp;to&nbsp;1,&nbsp;where&nbsp;0&nbsp;is&nbsp;left&nbsp;or&nbsp;bottom&nbsp;and&nbsp;1&nbsp;is&nbsp;right&nbsp;or&nbsp;top;<br>
or&nbsp;b)&nbsp;a&nbsp;string:&nbsp;C&nbsp;for&nbsp;centered,&nbsp;S&nbsp;for&nbsp;bottom-center,&nbsp;SE&nbsp;for<br>
bottom-left,&nbsp;E&nbsp;for&nbsp;left,&nbsp;etc.<br>
&nbsp;<br>
Optional&nbsp;arg&nbsp;container&nbsp;is&nbsp;the&nbsp;box&nbsp;within&nbsp;which&nbsp;the&nbsp;BBox<br>
is&nbsp;positioned;&nbsp;it&nbsp;defaults&nbsp;to&nbsp;the&nbsp;initial&nbsp;BBox.</tt></dd></dl>

<dl><dt><a name="Bbox-contains"><strong>contains</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="Bbox-containsx"><strong>containsx</strong></a>(self, x)</dt></dl>

<dl><dt><a name="Bbox-containsy"><strong>containsy</strong></a>(self, y)</dt></dl>

<dl><dt><a name="Bbox-corners"><strong>corners</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;array&nbsp;of&nbsp;points&nbsp;which&nbsp;are&nbsp;the&nbsp;four&nbsp;corners&nbsp;of&nbsp;this<br>
rectangle.</tt></dd></dl>

<dl><dt><a name="Bbox-count_contains"><strong>count_contains</strong></a>(self, vertices)</dt><dd><tt>Count&nbsp;the&nbsp;number&nbsp;of&nbsp;vertices&nbsp;contained&nbsp;in&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;<br>
vertices&nbsp;is&nbsp;a&nbsp;Nx2&nbsp;numpy&nbsp;array.</tt></dd></dl>

<dl><dt><a name="Bbox-count_overlaps"><strong>count_overlaps</strong></a>(self, bboxes)</dt><dd><tt>Count&nbsp;the&nbsp;number&nbsp;of&nbsp;bounding&nbsp;boxes&nbsp;that&nbsp;overlap&nbsp;this&nbsp;one.<br>
&nbsp;<br>
bboxes&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;<a href="#Bbox">Bbox</a>&nbsp;objects</tt></dd></dl>

<dl><dt><a name="Bbox-expanded"><strong>expanded</strong></a>(self, sw, sh)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;which&nbsp;is&nbsp;this&nbsp;<a href="#Bbox">Bbox</a>&nbsp;expanded&nbsp;around&nbsp;its<br>
center&nbsp;by&nbsp;the&nbsp;given&nbsp;factors&nbsp;sw&nbsp;and&nbsp;sh.</tt></dd></dl>

<dl><dt><a name="Bbox-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt><a href="#TransformNode">TransformNode</a>&nbsp;is&nbsp;the&nbsp;base&nbsp;class&nbsp;for&nbsp;anything&nbsp;that&nbsp;participates&nbsp;in<br>
the&nbsp;transform&nbsp;tree&nbsp;and&nbsp;needs&nbsp;to&nbsp;invalidate&nbsp;its&nbsp;parents&nbsp;or&nbsp;be<br>
invalidated.&nbsp;&nbsp;It&nbsp;can&nbsp;include&nbsp;classes&nbsp;that&nbsp;are&nbsp;not&nbsp;technically<br>
transforms,&nbsp;such&nbsp;as&nbsp;bounding&nbsp;boxes,&nbsp;since&nbsp;some&nbsp;transforms&nbsp;depend<br>
on&nbsp;bounding&nbsp;boxes&nbsp;to&nbsp;compute&nbsp;their&nbsp;values.</tt></dd></dl>

<dl><dt><a name="Bbox-fully_contains"><strong>fully_contains</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="Bbox-fully_containsx"><strong>fully_containsx</strong></a>(self, x)</dt></dl>

<dl><dt><a name="Bbox-fully_containsy"><strong>fully_containsy</strong></a>(self, y)</dt></dl>

<dl><dt><a name="Bbox-fully_overlaps"><strong>fully_overlaps</strong></a>(self, other)</dt></dl>

<dl><dt><a name="Bbox-inverse_transformed"><strong>inverse_transformed</strong></a>(self, transform)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;<a href="__builtin__.html#object">object</a>,&nbsp;transformed&nbsp;by&nbsp;the&nbsp;inverse&nbsp;of&nbsp;the<br>
given&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="Bbox-is_unit"><strong>is_unit</strong></a>(self)</dt></dl>

<dl><dt><a name="Bbox-overlaps"><strong>overlaps</strong></a>(self, other)</dt></dl>

<dl><dt><a name="Bbox-padded"><strong>padded</strong></a>(self, p)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;that&nbsp;is&nbsp;padded&nbsp;on&nbsp;all&nbsp;four&nbsp;sides&nbsp;by&nbsp;the<br>
given&nbsp;value.</tt></dd></dl>

<dl><dt><a name="Bbox-rotated"><strong>rotated</strong></a>(self, radians)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;bounding&nbsp;box&nbsp;that&nbsp;bounds&nbsp;a&nbsp;rotated&nbsp;version&nbsp;of&nbsp;this<br>
bounding&nbsp;box.&nbsp;&nbsp;The&nbsp;new&nbsp;bounding&nbsp;box&nbsp;is&nbsp;still&nbsp;aligned&nbsp;with&nbsp;the<br>
axes,&nbsp;of&nbsp;course.</tt></dd></dl>

<dl><dt><a name="Bbox-shrunk"><strong>shrunk</strong></a>(self, mx, my)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shurnk&nbsp;by&nbsp;the&nbsp;factor&nbsp;mx&nbsp;in&nbsp;the&nbsp;x<br>
direction&nbsp;and&nbsp;the&nbsp;factor&nbsp;my&nbsp;in&nbsp;the&nbsp;y&nbsp;direction.&nbsp;&nbsp;The&nbsp;lower<br>
left&nbsp;corner&nbsp;of&nbsp;the&nbsp;box&nbsp;remains&nbsp;unchanged.&nbsp;&nbsp;Normally&nbsp;mx&nbsp;and&nbsp;my<br>
will&nbsp;be&nbsp;&lt;=&nbsp;1,&nbsp;but&nbsp;this&nbsp;is&nbsp;not&nbsp;enforced.</tt></dd></dl>

<dl><dt><a name="Bbox-shrunk_to_aspect"><strong>shrunk_to_aspect</strong></a>(self, box_aspect, container<font color="#909090">=None</font>, fig_aspect<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shrunk&nbsp;so&nbsp;that&nbsp;it&nbsp;is&nbsp;as&nbsp;large&nbsp;as&nbsp;it<br>
can&nbsp;be&nbsp;while&nbsp;having&nbsp;the&nbsp;desired&nbsp;aspect&nbsp;ratio,&nbsp;box_aspect.&nbsp;&nbsp;If<br>
the&nbsp;box&nbsp;coordinates&nbsp;are&nbsp;relative--that&nbsp;is,&nbsp;fractions&nbsp;of&nbsp;a<br>
larger&nbsp;box&nbsp;such&nbsp;as&nbsp;a&nbsp;figure--then&nbsp;the&nbsp;physical&nbsp;aspect&nbsp;ratio&nbsp;of<br>
that&nbsp;figure&nbsp;is&nbsp;specified&nbsp;with&nbsp;fig_aspect,&nbsp;so&nbsp;that&nbsp;box_aspect<br>
can&nbsp;also&nbsp;be&nbsp;given&nbsp;as&nbsp;a&nbsp;ratio&nbsp;of&nbsp;the&nbsp;absolute&nbsp;dimensions,&nbsp;not<br>
the&nbsp;relative&nbsp;dimensions.</tt></dd></dl>

<dl><dt><a name="Bbox-splitx"><strong>splitx</strong></a>(self, *args)</dt><dd><tt>e.g.,&nbsp;bbox.<a href="#Bbox-splitx">splitx</a>(f1,&nbsp;f2,&nbsp;...)<br>
&nbsp;<br>
Returns&nbsp;a&nbsp;list&nbsp;of&nbsp;new&nbsp;BBoxes&nbsp;formed&nbsp;by<br>
splitting&nbsp;the&nbsp;original&nbsp;one&nbsp;with&nbsp;vertical&nbsp;lines<br>
at&nbsp;fractional&nbsp;positions&nbsp;f1,&nbsp;f2,&nbsp;...</tt></dd></dl>

<dl><dt><a name="Bbox-splity"><strong>splity</strong></a>(self, *args)</dt><dd><tt>e.g.,&nbsp;bbox.<a href="#Bbox-splitx">splitx</a>(f1,&nbsp;f2,&nbsp;...)<br>
&nbsp;<br>
Returns&nbsp;a&nbsp;list&nbsp;of&nbsp;new&nbsp;PBoxes&nbsp;formed&nbsp;by<br>
splitting&nbsp;the&nbsp;original&nbsp;one&nbsp;with&nbsp;horizontal&nbsp;lines<br>
at&nbsp;fractional&nbsp;positions&nbsp;f1,&nbsp;f2,&nbsp;...</tt></dd></dl>

<dl><dt><a name="Bbox-transformed"><strong>transformed</strong></a>(self, transform)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;<a href="__builtin__.html#object">object</a>,&nbsp;transformed&nbsp;by&nbsp;the&nbsp;given&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="Bbox-translated"><strong>translated</strong></a>(self, tx, ty)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;translated&nbsp;by&nbsp;tx&nbsp;and&nbsp;ty.</tt></dd></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><a name="Bbox-union"><strong>union</strong></a>(bboxes)</dt><dd><tt>Return&nbsp;a&nbsp;<a href="#Bbox">Bbox</a>&nbsp;that&nbsp;contains&nbsp;all&nbsp;of&nbsp;the&nbsp;given&nbsp;bboxes.</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><strong>extents</strong></dt>
</dl>
<dl><dt><strong>height</strong></dt>
</dl>
<dl><dt><strong>max</strong></dt>
</dl>
<dl><dt><strong>min</strong></dt>
</dl>
<dl><dt><strong>size</strong></dt>
</dl>
<dl><dt><strong>width</strong></dt>
</dl>
<dl><dt><strong>xmax</strong></dt>
</dl>
<dl><dt><strong>xmin</strong></dt>
</dl>
<dl><dt><strong>ymax</strong></dt>
</dl>
<dl><dt><strong>ymin</strong></dt>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><strong>coefs</strong> = {'C': (0.5, 0.5), 'E': (1.0, 0.5), 'N': (0.5, 1.0), 'NE': (1.0, 1.0), 'NW': (0, 1.0), 'S': (0.5, 0), 'SE': (1.0, 0), 'SW': (0, 0), 'W': (0, 0.5)}</dl>

<dl><dt><strong>is_affine</strong> = True</dl>

<dl><dt><strong>is_bbox</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="Bbox-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="Bbox-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="Bbox-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="Bbox-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="Bbox-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BboxBase">class <strong>BboxBase</strong></a>(<a href="matplotlib.transforms.html#TransformNode">TransformNode</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>This&nbsp;is&nbsp;the&nbsp;base&nbsp;class&nbsp;of&nbsp;all&nbsp;bounding&nbsp;boxes,&nbsp;and&nbsp;provides<br>
read-only&nbsp;access&nbsp;to&nbsp;its&nbsp;data.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#BboxBase">BboxBase</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="BboxBase-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="BboxBase-anchored"><strong>anchored</strong></a>(self, c, container<font color="#909090">=None</font>)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shifted&nbsp;to&nbsp;position&nbsp;c&nbsp;within&nbsp;a<br>
container.<br>
&nbsp;<br>
c:&nbsp;may&nbsp;be&nbsp;either&nbsp;a)&nbsp;a&nbsp;sequence&nbsp;(cx,&nbsp;cy)&nbsp;where&nbsp;cx,&nbsp;cy&nbsp;range<br>
from&nbsp;0&nbsp;to&nbsp;1,&nbsp;where&nbsp;0&nbsp;is&nbsp;left&nbsp;or&nbsp;bottom&nbsp;and&nbsp;1&nbsp;is&nbsp;right&nbsp;or&nbsp;top;<br>
or&nbsp;b)&nbsp;a&nbsp;string:&nbsp;C&nbsp;for&nbsp;centered,&nbsp;S&nbsp;for&nbsp;bottom-center,&nbsp;SE&nbsp;for<br>
bottom-left,&nbsp;E&nbsp;for&nbsp;left,&nbsp;etc.<br>
&nbsp;<br>
Optional&nbsp;arg&nbsp;container&nbsp;is&nbsp;the&nbsp;box&nbsp;within&nbsp;which&nbsp;the&nbsp;BBox<br>
is&nbsp;positioned;&nbsp;it&nbsp;defaults&nbsp;to&nbsp;the&nbsp;initial&nbsp;BBox.</tt></dd></dl>

<dl><dt><a name="BboxBase-contains"><strong>contains</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="BboxBase-containsx"><strong>containsx</strong></a>(self, x)</dt></dl>

<dl><dt><a name="BboxBase-containsy"><strong>containsy</strong></a>(self, y)</dt></dl>

<dl><dt><a name="BboxBase-corners"><strong>corners</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;array&nbsp;of&nbsp;points&nbsp;which&nbsp;are&nbsp;the&nbsp;four&nbsp;corners&nbsp;of&nbsp;this<br>
rectangle.</tt></dd></dl>

<dl><dt><a name="BboxBase-count_contains"><strong>count_contains</strong></a>(self, vertices)</dt><dd><tt>Count&nbsp;the&nbsp;number&nbsp;of&nbsp;vertices&nbsp;contained&nbsp;in&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;<br>
vertices&nbsp;is&nbsp;a&nbsp;Nx2&nbsp;numpy&nbsp;array.</tt></dd></dl>

<dl><dt><a name="BboxBase-count_overlaps"><strong>count_overlaps</strong></a>(self, bboxes)</dt><dd><tt>Count&nbsp;the&nbsp;number&nbsp;of&nbsp;bounding&nbsp;boxes&nbsp;that&nbsp;overlap&nbsp;this&nbsp;one.<br>
&nbsp;<br>
bboxes&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;<a href="#Bbox">Bbox</a>&nbsp;objects</tt></dd></dl>

<dl><dt><a name="BboxBase-expanded"><strong>expanded</strong></a>(self, sw, sh)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;which&nbsp;is&nbsp;this&nbsp;<a href="#Bbox">Bbox</a>&nbsp;expanded&nbsp;around&nbsp;its<br>
center&nbsp;by&nbsp;the&nbsp;given&nbsp;factors&nbsp;sw&nbsp;and&nbsp;sh.</tt></dd></dl>

<dl><dt><a name="BboxBase-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt><a href="#TransformNode">TransformNode</a>&nbsp;is&nbsp;the&nbsp;base&nbsp;class&nbsp;for&nbsp;anything&nbsp;that&nbsp;participates&nbsp;in<br>
the&nbsp;transform&nbsp;tree&nbsp;and&nbsp;needs&nbsp;to&nbsp;invalidate&nbsp;its&nbsp;parents&nbsp;or&nbsp;be<br>
invalidated.&nbsp;&nbsp;It&nbsp;can&nbsp;include&nbsp;classes&nbsp;that&nbsp;are&nbsp;not&nbsp;technically<br>
transforms,&nbsp;such&nbsp;as&nbsp;bounding&nbsp;boxes,&nbsp;since&nbsp;some&nbsp;transforms&nbsp;depend<br>
on&nbsp;bounding&nbsp;boxes&nbsp;to&nbsp;compute&nbsp;their&nbsp;values.</tt></dd></dl>

<dl><dt><a name="BboxBase-fully_contains"><strong>fully_contains</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="BboxBase-fully_containsx"><strong>fully_containsx</strong></a>(self, x)</dt></dl>

<dl><dt><a name="BboxBase-fully_containsy"><strong>fully_containsy</strong></a>(self, y)</dt></dl>

<dl><dt><a name="BboxBase-fully_overlaps"><strong>fully_overlaps</strong></a>(self, other)</dt></dl>

<dl><dt><a name="BboxBase-get_points"><strong>get_points</strong></a>(self)</dt></dl>

<dl><dt><a name="BboxBase-inverse_transformed"><strong>inverse_transformed</strong></a>(self, transform)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;<a href="__builtin__.html#object">object</a>,&nbsp;transformed&nbsp;by&nbsp;the&nbsp;inverse&nbsp;of&nbsp;the<br>
given&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="BboxBase-is_unit"><strong>is_unit</strong></a>(self)</dt></dl>

<dl><dt><a name="BboxBase-overlaps"><strong>overlaps</strong></a>(self, other)</dt></dl>

<dl><dt><a name="BboxBase-padded"><strong>padded</strong></a>(self, p)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;that&nbsp;is&nbsp;padded&nbsp;on&nbsp;all&nbsp;four&nbsp;sides&nbsp;by&nbsp;the<br>
given&nbsp;value.</tt></dd></dl>

<dl><dt><a name="BboxBase-rotated"><strong>rotated</strong></a>(self, radians)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;bounding&nbsp;box&nbsp;that&nbsp;bounds&nbsp;a&nbsp;rotated&nbsp;version&nbsp;of&nbsp;this<br>
bounding&nbsp;box.&nbsp;&nbsp;The&nbsp;new&nbsp;bounding&nbsp;box&nbsp;is&nbsp;still&nbsp;aligned&nbsp;with&nbsp;the<br>
axes,&nbsp;of&nbsp;course.</tt></dd></dl>

<dl><dt><a name="BboxBase-shrunk"><strong>shrunk</strong></a>(self, mx, my)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shurnk&nbsp;by&nbsp;the&nbsp;factor&nbsp;mx&nbsp;in&nbsp;the&nbsp;x<br>
direction&nbsp;and&nbsp;the&nbsp;factor&nbsp;my&nbsp;in&nbsp;the&nbsp;y&nbsp;direction.&nbsp;&nbsp;The&nbsp;lower<br>
left&nbsp;corner&nbsp;of&nbsp;the&nbsp;box&nbsp;remains&nbsp;unchanged.&nbsp;&nbsp;Normally&nbsp;mx&nbsp;and&nbsp;my<br>
will&nbsp;be&nbsp;&lt;=&nbsp;1,&nbsp;but&nbsp;this&nbsp;is&nbsp;not&nbsp;enforced.</tt></dd></dl>

<dl><dt><a name="BboxBase-shrunk_to_aspect"><strong>shrunk_to_aspect</strong></a>(self, box_aspect, container<font color="#909090">=None</font>, fig_aspect<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shrunk&nbsp;so&nbsp;that&nbsp;it&nbsp;is&nbsp;as&nbsp;large&nbsp;as&nbsp;it<br>
can&nbsp;be&nbsp;while&nbsp;having&nbsp;the&nbsp;desired&nbsp;aspect&nbsp;ratio,&nbsp;box_aspect.&nbsp;&nbsp;If<br>
the&nbsp;box&nbsp;coordinates&nbsp;are&nbsp;relative--that&nbsp;is,&nbsp;fractions&nbsp;of&nbsp;a<br>
larger&nbsp;box&nbsp;such&nbsp;as&nbsp;a&nbsp;figure--then&nbsp;the&nbsp;physical&nbsp;aspect&nbsp;ratio&nbsp;of<br>
that&nbsp;figure&nbsp;is&nbsp;specified&nbsp;with&nbsp;fig_aspect,&nbsp;so&nbsp;that&nbsp;box_aspect<br>
can&nbsp;also&nbsp;be&nbsp;given&nbsp;as&nbsp;a&nbsp;ratio&nbsp;of&nbsp;the&nbsp;absolute&nbsp;dimensions,&nbsp;not<br>
the&nbsp;relative&nbsp;dimensions.</tt></dd></dl>

<dl><dt><a name="BboxBase-splitx"><strong>splitx</strong></a>(self, *args)</dt><dd><tt>e.g.,&nbsp;bbox.<a href="#BboxBase-splitx">splitx</a>(f1,&nbsp;f2,&nbsp;...)<br>
&nbsp;<br>
Returns&nbsp;a&nbsp;list&nbsp;of&nbsp;new&nbsp;BBoxes&nbsp;formed&nbsp;by<br>
splitting&nbsp;the&nbsp;original&nbsp;one&nbsp;with&nbsp;vertical&nbsp;lines<br>
at&nbsp;fractional&nbsp;positions&nbsp;f1,&nbsp;f2,&nbsp;...</tt></dd></dl>

<dl><dt><a name="BboxBase-splity"><strong>splity</strong></a>(self, *args)</dt><dd><tt>e.g.,&nbsp;bbox.<a href="#BboxBase-splitx">splitx</a>(f1,&nbsp;f2,&nbsp;...)<br>
&nbsp;<br>
Returns&nbsp;a&nbsp;list&nbsp;of&nbsp;new&nbsp;PBoxes&nbsp;formed&nbsp;by<br>
splitting&nbsp;the&nbsp;original&nbsp;one&nbsp;with&nbsp;horizontal&nbsp;lines<br>
at&nbsp;fractional&nbsp;positions&nbsp;f1,&nbsp;f2,&nbsp;...</tt></dd></dl>

<dl><dt><a name="BboxBase-transformed"><strong>transformed</strong></a>(self, transform)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;<a href="__builtin__.html#object">object</a>,&nbsp;transformed&nbsp;by&nbsp;the&nbsp;given&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="BboxBase-translated"><strong>translated</strong></a>(self, tx, ty)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;translated&nbsp;by&nbsp;tx&nbsp;and&nbsp;ty.</tt></dd></dl>

<hr>
Static methods defined here:<br>
<dl><dt><a name="BboxBase-union"><strong>union</strong></a>(bboxes)</dt><dd><tt>Return&nbsp;a&nbsp;<a href="#Bbox">Bbox</a>&nbsp;that&nbsp;contains&nbsp;all&nbsp;of&nbsp;the&nbsp;given&nbsp;bboxes.</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>bounds</strong></dt>
</dl>
<dl><dt><strong>extents</strong></dt>
</dl>
<dl><dt><strong>height</strong></dt>
</dl>
<dl><dt><strong>intervalx</strong></dt>
</dl>
<dl><dt><strong>intervaly</strong></dt>
</dl>
<dl><dt><strong>max</strong></dt>
</dl>
<dl><dt><strong>min</strong></dt>
</dl>
<dl><dt><strong>p0</strong></dt>
</dl>
<dl><dt><strong>p1</strong></dt>
</dl>
<dl><dt><strong>size</strong></dt>
</dl>
<dl><dt><strong>width</strong></dt>
</dl>
<dl><dt><strong>x0</strong></dt>
</dl>
<dl><dt><strong>x1</strong></dt>
</dl>
<dl><dt><strong>xmax</strong></dt>
</dl>
<dl><dt><strong>xmin</strong></dt>
</dl>
<dl><dt><strong>y0</strong></dt>
</dl>
<dl><dt><strong>y1</strong></dt>
</dl>
<dl><dt><strong>ymax</strong></dt>
</dl>
<dl><dt><strong>ymin</strong></dt>
</dl>
<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>coefs</strong> = {'C': (0.5, 0.5), 'E': (1.0, 0.5), 'N': (0.5, 1.0), 'NE': (1.0, 1.0), 'NW': (0, 1.0), 'S': (0.5, 0), 'SE': (1.0, 0), 'SW': (0, 0), 'W': (0, 0.5)}</dl>

<dl><dt><strong>is_affine</strong> = True</dl>

<dl><dt><strong>is_bbox</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="BboxBase-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="BboxBase-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="BboxBase-__init__"><strong>__init__</strong></a>(self)</dt><dd><tt>Creates&nbsp;a&nbsp;new&nbsp;<a href="#TransformNode">TransformNode</a>.</tt></dd></dl>

<dl><dt><a name="BboxBase-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="BboxBase-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="BboxBase-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BboxTransform">class <strong>BboxTransform</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#BboxTransform">BboxTransform</a>&nbsp;linearly&nbsp;transforms&nbsp;points&nbsp;from&nbsp;one&nbsp;<a href="#Bbox">Bbox</a>&nbsp;to&nbsp;another&nbsp;<a href="#Bbox">Bbox</a>.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#BboxTransform">BboxTransform</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="BboxTransform-__init__"><strong>__init__</strong></a>(self, boxin, boxout)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;<a href="#BboxTransform">BboxTransform</a>&nbsp;that&nbsp;linearly&nbsp;transforms&nbsp;points<br>
from&nbsp;boxin&nbsp;to&nbsp;boxout.</tt></dd></dl>

<dl><dt><a name="BboxTransform-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="BboxTransform-__str__"><strong>__str__</strong></a> = <a href="#BboxTransform-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="BboxTransform-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>is_separable</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BboxTransform-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="BboxTransform-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="BboxTransform-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#BboxTransform-inverted">inverted</a>().<a href="#BboxTransform-transform">transform</a>(<a href="#BboxTransform-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="BboxTransform-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="BboxTransform-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BboxTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform_affine">transform_affine</a>(<a href="#BboxTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransform-transform_affine"><strong>transform_affine</strong></a> = transform(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BboxTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform_affine">transform_affine</a>(<a href="#BboxTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransform-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BboxTransform-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="BboxTransform-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="BboxTransform-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#BboxTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform_affine">transform_affine</a>(<a href="#BboxTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransform-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BboxTransform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform_path_affine">transform_path_affine</a>(<a href="#BboxTransform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="BboxTransform-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BboxTransform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransform-transform_path_affine">transform_path_affine</a>(<a href="#BboxTransform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="BboxTransform-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="BboxTransform-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="BboxTransform-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="BboxTransform-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="BboxTransform-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="BboxTransform-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="BboxTransform-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="BboxTransform-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BboxTransformFrom">class <strong>BboxTransformFrom</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#BboxTransform">BboxTransform</a>&nbsp;linearly&nbsp;transforms&nbsp;points&nbsp;from&nbsp;one&nbsp;<a href="#Bbox">Bbox</a>&nbsp;to&nbsp;the&nbsp;unit<br>
<a href="#Bbox">Bbox</a>.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#BboxTransformFrom">BboxTransformFrom</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="BboxTransformFrom-__init__"><strong>__init__</strong></a>(self, boxin)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;<a href="#BboxTransform">BboxTransform</a>&nbsp;that&nbsp;linearly&nbsp;transforms&nbsp;points<br>
from&nbsp;boxin&nbsp;to&nbsp;the&nbsp;unit&nbsp;<a href="#Bbox">Bbox</a>.</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="BboxTransformFrom-__str__"><strong>__str__</strong></a> = <a href="#BboxTransformFrom-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="BboxTransformFrom-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>is_separable</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BboxTransformFrom-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="BboxTransformFrom-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#BboxTransformFrom-inverted">inverted</a>().<a href="#BboxTransformFrom-transform">transform</a>(<a href="#BboxTransformFrom-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BboxTransformFrom-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform_affine">transform_affine</a>(<a href="#BboxTransformFrom-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-transform_affine"><strong>transform_affine</strong></a> = transform(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BboxTransformFrom-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform_affine">transform_affine</a>(<a href="#BboxTransformFrom-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BboxTransformFrom-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="BboxTransformFrom-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#BboxTransformFrom-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform_affine">transform_affine</a>(<a href="#BboxTransformFrom-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BboxTransformFrom-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform_path_affine">transform_path_affine</a>(<a href="#BboxTransformFrom-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BboxTransformFrom-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformFrom-transform_path_affine">transform_path_affine</a>(<a href="#BboxTransformFrom-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="BboxTransformFrom-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="BboxTransformFrom-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="BboxTransformFrom-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="BboxTransformFrom-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="BboxTransformFrom-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="BboxTransformFrom-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BboxTransformTo">class <strong>BboxTransformTo</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>BboxTransformSimple&nbsp;linearly&nbsp;transforms&nbsp;points&nbsp;from&nbsp;the&nbsp;unit&nbsp;<a href="#Bbox">Bbox</a><br>
to&nbsp;another&nbsp;<a href="#Bbox">Bbox</a>.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#BboxTransformTo">BboxTransformTo</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="BboxTransformTo-__init__"><strong>__init__</strong></a>(self, boxout)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;<a href="#BboxTransform">BboxTransform</a>&nbsp;that&nbsp;linearly&nbsp;transforms&nbsp;points<br>
from&nbsp;the&nbsp;unit&nbsp;<a href="#Bbox">Bbox</a>&nbsp;to&nbsp;boxout.</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="BboxTransformTo-__str__"><strong>__str__</strong></a> = <a href="#BboxTransformTo-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="BboxTransformTo-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>is_separable</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BboxTransformTo-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="BboxTransformTo-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#BboxTransformTo-inverted">inverted</a>().<a href="#BboxTransformTo-transform">transform</a>(<a href="#BboxTransformTo-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BboxTransformTo-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform_affine">transform_affine</a>(<a href="#BboxTransformTo-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-transform_affine"><strong>transform_affine</strong></a> = transform(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BboxTransformTo-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform_affine">transform_affine</a>(<a href="#BboxTransformTo-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BboxTransformTo-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="BboxTransformTo-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#BboxTransformTo-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform_affine">transform_affine</a>(<a href="#BboxTransformTo-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BboxTransformTo-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform_path_affine">transform_path_affine</a>(<a href="#BboxTransformTo-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BboxTransformTo-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BboxTransformTo-transform_path_affine">transform_path_affine</a>(<a href="#BboxTransformTo-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="BboxTransformTo-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="BboxTransformTo-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="BboxTransformTo-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="BboxTransformTo-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="BboxTransformTo-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="BboxTransformTo-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BlendedAffine2D">class <strong>BlendedAffine2D</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;"blended"&nbsp;transform&nbsp;uses&nbsp;one&nbsp;transform&nbsp;for&nbsp;the&nbsp;x-direction,&nbsp;and<br>
another&nbsp;transform&nbsp;for&nbsp;the&nbsp;y-direction.<br>
&nbsp;<br>
This&nbsp;version&nbsp;is&nbsp;an&nbsp;optimization&nbsp;for&nbsp;the&nbsp;case&nbsp;where&nbsp;both&nbsp;child<br>
transforms&nbsp;are&nbsp;of&nbsp;type&nbsp;<a href="#Affine2DBase">Affine2DBase</a>.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#BlendedAffine2D">BlendedAffine2D</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="BlendedAffine2D-__init__"><strong>__init__</strong></a>(self, x_transform, y_transform)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;"blended"&nbsp;transform&nbsp;using&nbsp;x_transform&nbsp;to<br>
transform&nbsp;the&nbsp;x-axis&nbsp;and&nbsp;y_transform&nbsp;to&nbsp;transform&nbsp;the&nbsp;y_axis.<br>
&nbsp;<br>
Both&nbsp;x_transform&nbsp;and&nbsp;y_transform&nbsp;must&nbsp;be&nbsp;2D&nbsp;affine&nbsp;transforms.<br>
&nbsp;<br>
You&nbsp;will&nbsp;generally&nbsp;not&nbsp;call&nbsp;this&nbsp;constructor&nbsp;directly&nbsp;but&nbsp;use<br>
the&nbsp;blended_transform_factory&nbsp;function&nbsp;instead,&nbsp;which&nbsp;can<br>
determine&nbsp;automatically&nbsp;which&nbsp;kind&nbsp;of&nbsp;blended&nbsp;transform&nbsp;to<br>
create.</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="BlendedAffine2D-__str__"><strong>__str__</strong></a> = <a href="#BlendedAffine2D-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="BlendedAffine2D-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>is_separable</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BlendedAffine2D-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="BlendedAffine2D-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#BlendedAffine2D-inverted">inverted</a>().<a href="#BlendedAffine2D-transform">transform</a>(<a href="#BlendedAffine2D-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BlendedAffine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform_affine">transform_affine</a>(<a href="#BlendedAffine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-transform_affine"><strong>transform_affine</strong></a> = transform(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BlendedAffine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform_affine">transform_affine</a>(<a href="#BlendedAffine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="BlendedAffine2D-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="BlendedAffine2D-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#BlendedAffine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform_affine">transform_affine</a>(<a href="#BlendedAffine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BlendedAffine2D-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform_path_affine">transform_path_affine</a>(<a href="#BlendedAffine2D-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BlendedAffine2D-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedAffine2D-transform_path_affine">transform_path_affine</a>(<a href="#BlendedAffine2D-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="BlendedAffine2D-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="BlendedAffine2D-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="BlendedAffine2D-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="BlendedAffine2D-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="BlendedAffine2D-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="BlendedAffine2D-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BlendedGenericTransform">class <strong>BlendedGenericTransform</strong></a>(<a href="matplotlib.transforms.html#Transform">Transform</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;"blended"&nbsp;transform&nbsp;uses&nbsp;one&nbsp;transform&nbsp;for&nbsp;the&nbsp;x-direction,&nbsp;and<br>
another&nbsp;transform&nbsp;for&nbsp;the&nbsp;y-direction.<br>
&nbsp;<br>
This&nbsp;"generic"&nbsp;version&nbsp;can&nbsp;handle&nbsp;any&nbsp;given&nbsp;child&nbsp;transform&nbsp;in&nbsp;the<br>
x-&nbsp;and&nbsp;y-directions.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#BlendedGenericTransform">BlendedGenericTransform</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="BlendedGenericTransform-__init__"><strong>__init__</strong></a>(self, x_transform, y_transform)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;"blended"&nbsp;transform&nbsp;using&nbsp;x_transform&nbsp;to<br>
transform&nbsp;the&nbsp;x-axis&nbsp;and&nbsp;y_transform&nbsp;to&nbsp;transform&nbsp;the&nbsp;y_axis.<br>
&nbsp;<br>
You&nbsp;will&nbsp;generally&nbsp;not&nbsp;call&nbsp;this&nbsp;constructor&nbsp;directly&nbsp;but&nbsp;use<br>
the&nbsp;blended_transform_factory&nbsp;function&nbsp;instead,&nbsp;which&nbsp;can<br>
determine&nbsp;automatically&nbsp;which&nbsp;kind&nbsp;of&nbsp;blended&nbsp;transform&nbsp;to<br>
create.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="BlendedGenericTransform-__str__"><strong>__str__</strong></a> = <a href="#BlendedGenericTransform-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="BlendedGenericTransform-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#BlendedGenericTransform-inverted">inverted</a>().<a href="#BlendedGenericTransform-transform">transform</a>(<a href="#BlendedGenericTransform-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;the&nbsp;transformation&nbsp;on&nbsp;the&nbsp;given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-transform_affine"><strong>transform_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#BlendedGenericTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedGenericTransform-transform_affine">transform_affine</a>(<a href="#BlendedGenericTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedGenericTransform-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#BlendedGenericTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedGenericTransform-transform_affine">transform_affine</a>(<a href="#BlendedGenericTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedGenericTransform-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>is_affine</strong></dt>
</dl>
<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>is_separable</strong> = True</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<dl><dt><strong>pass_through</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="BlendedGenericTransform-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt><dd><tt>Used&nbsp;by&nbsp;C/C++&nbsp;-based&nbsp;backends&nbsp;to&nbsp;get&nbsp;at&nbsp;the&nbsp;array&nbsp;matrix&nbsp;data.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="BlendedGenericTransform-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BlendedGenericTransform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedGenericTransform-transform_path_affine">transform_path_affine</a>(<a href="#BlendedGenericTransform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#BlendedGenericTransform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#BlendedGenericTransform-transform_path_affine">transform_path_affine</a>(<a href="#BlendedGenericTransform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-transform_point"><strong>transform_point</strong></a>(self, point)</dt><dd><tt>A&nbsp;convenience&nbsp;function&nbsp;that&nbsp;returns&nbsp;the&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;a<br>
single&nbsp;point.<br>
&nbsp;<br>
The&nbsp;point&nbsp;is&nbsp;given&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length&nbsp;self.<strong>input_dims</strong>.<br>
The&nbsp;transformed&nbsp;point&nbsp;is&nbsp;returned&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length<br>
self.<strong>output_dims</strong>.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="BlendedGenericTransform-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="BlendedGenericTransform-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="BlendedGenericTransform-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="BlendedGenericTransform-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="CompositeAffine2D">class <strong>CompositeAffine2D</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;composite&nbsp;transform&nbsp;formed&nbsp;by&nbsp;applying&nbsp;transform&nbsp;a&nbsp;then&nbsp;transform&nbsp;b.<br>
&nbsp;<br>
This&nbsp;version&nbsp;is&nbsp;an&nbsp;optimization&nbsp;that&nbsp;handles&nbsp;the&nbsp;case&nbsp;where&nbsp;both&nbsp;a<br>
and&nbsp;b&nbsp;are&nbsp;2D&nbsp;affines.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#CompositeAffine2D">CompositeAffine2D</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="CompositeAffine2D-__init__"><strong>__init__</strong></a>(self, a, b)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;composite&nbsp;transform&nbsp;that&nbsp;is&nbsp;the&nbsp;result&nbsp;of<br>
applying&nbsp;transform&nbsp;a&nbsp;then&nbsp;transform&nbsp;b.<br>
&nbsp;<br>
Both&nbsp;a&nbsp;and&nbsp;b&nbsp;must&nbsp;be&nbsp;instances&nbsp;of&nbsp;<a href="#Affine2DBase">Affine2DBase</a>.<br>
&nbsp;<br>
You&nbsp;will&nbsp;generally&nbsp;not&nbsp;call&nbsp;this&nbsp;constructor&nbsp;directly&nbsp;but&nbsp;use<br>
the&nbsp;composite_transform_factory&nbsp;function&nbsp;instead,&nbsp;which&nbsp;can<br>
automatically&nbsp;choose&nbsp;the&nbsp;best&nbsp;kind&nbsp;of&nbsp;composite&nbsp;transform<br>
instance&nbsp;to&nbsp;create.</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="CompositeAffine2D-__str__"><strong>__str__</strong></a> = <a href="#CompositeAffine2D-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="CompositeAffine2D-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="CompositeAffine2D-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="CompositeAffine2D-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#CompositeAffine2D-inverted">inverted</a>().<a href="#CompositeAffine2D-transform">transform</a>(<a href="#CompositeAffine2D-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#CompositeAffine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform_affine">transform_affine</a>(<a href="#CompositeAffine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-transform_affine"><strong>transform_affine</strong></a> = transform(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#CompositeAffine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform_affine">transform_affine</a>(<a href="#CompositeAffine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="CompositeAffine2D-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>is_separable</strong></dt>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="CompositeAffine2D-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#CompositeAffine2D-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform_affine">transform_affine</a>(<a href="#CompositeAffine2D-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#CompositeAffine2D-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform_path_affine">transform_path_affine</a>(<a href="#CompositeAffine2D-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#CompositeAffine2D-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeAffine2D-transform_path_affine">transform_path_affine</a>(<a href="#CompositeAffine2D-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="CompositeAffine2D-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="CompositeAffine2D-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="CompositeAffine2D-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="CompositeAffine2D-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="CompositeAffine2D-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="CompositeAffine2D-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="CompositeGenericTransform">class <strong>CompositeGenericTransform</strong></a>(<a href="matplotlib.transforms.html#Transform">Transform</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;composite&nbsp;transform&nbsp;formed&nbsp;by&nbsp;applying&nbsp;transform&nbsp;a&nbsp;then&nbsp;transform&nbsp;b.<br>
&nbsp;<br>
This&nbsp;"generic"&nbsp;version&nbsp;can&nbsp;handle&nbsp;any&nbsp;two&nbsp;arbitrary&nbsp;transformations.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#CompositeGenericTransform">CompositeGenericTransform</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="CompositeGenericTransform-__init__"><strong>__init__</strong></a>(self, a, b)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;composite&nbsp;transform&nbsp;that&nbsp;is&nbsp;the&nbsp;result&nbsp;of<br>
applying&nbsp;transform&nbsp;a&nbsp;then&nbsp;transform&nbsp;b.<br>
&nbsp;<br>
You&nbsp;will&nbsp;generally&nbsp;not&nbsp;call&nbsp;this&nbsp;constructor&nbsp;directly&nbsp;but&nbsp;use<br>
the&nbsp;composite_transform_factory&nbsp;function&nbsp;instead,&nbsp;which&nbsp;can<br>
automatically&nbsp;choose&nbsp;the&nbsp;best&nbsp;kind&nbsp;of&nbsp;composite&nbsp;transform<br>
instance&nbsp;to&nbsp;create.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="CompositeGenericTransform-__str__"><strong>__str__</strong></a> = <a href="#CompositeGenericTransform-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="CompositeGenericTransform-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#CompositeGenericTransform-inverted">inverted</a>().<a href="#CompositeGenericTransform-transform">transform</a>(<a href="#CompositeGenericTransform-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;the&nbsp;transformation&nbsp;on&nbsp;the&nbsp;given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-transform_affine"><strong>transform_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#CompositeGenericTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeGenericTransform-transform_affine">transform_affine</a>(<a href="#CompositeGenericTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeGenericTransform-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#CompositeGenericTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeGenericTransform-transform_affine">transform_affine</a>(<a href="#CompositeGenericTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeGenericTransform-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#CompositeGenericTransform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeGenericTransform-transform_path_affine">transform_path_affine</a>(<a href="#CompositeGenericTransform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#CompositeGenericTransform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#CompositeGenericTransform-transform_path_affine">transform_path_affine</a>(<a href="#CompositeGenericTransform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>is_affine</strong></dt>
</dl>
<dl><dt><strong>is_separable</strong></dt>
</dl>
<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>pass_through</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="CompositeGenericTransform-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt><dd><tt>Used&nbsp;by&nbsp;C/C++&nbsp;-based&nbsp;backends&nbsp;to&nbsp;get&nbsp;at&nbsp;the&nbsp;array&nbsp;matrix&nbsp;data.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="CompositeGenericTransform-transform_point"><strong>transform_point</strong></a>(self, point)</dt><dd><tt>A&nbsp;convenience&nbsp;function&nbsp;that&nbsp;returns&nbsp;the&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;a<br>
single&nbsp;point.<br>
&nbsp;<br>
The&nbsp;point&nbsp;is&nbsp;given&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length&nbsp;self.<strong>input_dims</strong>.<br>
The&nbsp;transformed&nbsp;point&nbsp;is&nbsp;returned&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length<br>
self.<strong>output_dims</strong>.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<dl><dt><strong>input_dims</strong> = None</dl>

<dl><dt><strong>output_dims</strong> = None</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="CompositeGenericTransform-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="CompositeGenericTransform-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="CompositeGenericTransform-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="CompositeGenericTransform-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="IdentityTransform">class <strong>IdentityTransform</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;special&nbsp;class&nbsp;that&nbsp;does&nbsp;on&nbsp;thing,&nbsp;the&nbsp;identity&nbsp;transform,&nbsp;in&nbsp;a<br>
fast&nbsp;way.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#IdentityTransform">IdentityTransform</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="IdentityTransform-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="IdentityTransform-__str__"><strong>__str__</strong></a> = <a href="#IdentityTransform-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="IdentityTransform-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="IdentityTransform-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#IdentityTransform-inverted">inverted</a>().<a href="#IdentityTransform-transform">transform</a>(<a href="#IdentityTransform-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="IdentityTransform-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<dl><dt><a name="IdentityTransform-inverted"><strong>inverted</strong></a> = <a href="#IdentityTransform-get_affine">get_affine</a>(self)</dt></dl>

<dl><dt><a name="IdentityTransform-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#IdentityTransform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#IdentityTransform-transform_affine">transform_affine</a>(<a href="#IdentityTransform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#IdentityTransform-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="IdentityTransform-transform_affine"><strong>transform_affine</strong></a> = <a href="#IdentityTransform-transform">transform</a>(self, points)</dt></dl>

<dl><dt><a name="IdentityTransform-transform_non_affine"><strong>transform_non_affine</strong></a> = <a href="#IdentityTransform-transform">transform</a>(self, points)</dt></dl>

<dl><dt><a name="IdentityTransform-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#IdentityTransform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#IdentityTransform-transform_path_affine">transform_path_affine</a>(<a href="#IdentityTransform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="IdentityTransform-transform_path_affine"><strong>transform_path_affine</strong></a> = <a href="#IdentityTransform-transform_path">transform_path</a>(self, path)</dt></dl>

<dl><dt><a name="IdentityTransform-transform_path_non_affine"><strong>transform_path_non_affine</strong></a> = <a href="#IdentityTransform-transform_path">transform_path</a>(self, path)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="IdentityTransform-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="IdentityTransform-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="IdentityTransform-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="IdentityTransform-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>is_separable</strong></dt>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="IdentityTransform-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="IdentityTransform-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="IdentityTransform-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="IdentityTransform-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="IdentityTransform-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="IdentityTransform-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="IdentityTransform-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="IdentityTransform-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="ScaledTranslation">class <strong>ScaledTranslation</strong></a>(<a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#ScaledTranslation">ScaledTranslation</a></dd>
<dd><a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a></dd>
<dd><a href="matplotlib.transforms.html#AffineBase">AffineBase</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="ScaledTranslation-__init__"><strong>__init__</strong></a>(self, xt, yt, scale_trans)</dt></dl>

<dl><dt><a name="ScaledTranslation-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="ScaledTranslation-__str__"><strong>__str__</strong></a> = <a href="#ScaledTranslation-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="ScaledTranslation-get_matrix"><strong>get_matrix</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;underlying&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;numpy&nbsp;array.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="ScaledTranslation-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="ScaledTranslation-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#ScaledTranslation-inverted">inverted</a>().<a href="#ScaledTranslation-transform">transform</a>(<a href="#ScaledTranslation-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-to_values"><strong>to_values</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;matrix&nbsp;as&nbsp;a&nbsp;sequence&nbsp;(a,b,c,d,e,f)</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-transform"><strong>transform</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#ScaledTranslation-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform_affine">transform_affine</a>(<a href="#ScaledTranslation-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-transform_affine"><strong>transform_affine</strong></a> = transform(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#ScaledTranslation-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform_affine">transform_affine</a>(<a href="#ScaledTranslation-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-transform_point"><strong>transform_point</strong></a>(self, point)</dt></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><a name="ScaledTranslation-matrix_from_values"><strong>matrix_from_values</strong></a>(a, b, c, d, e, f)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;transformation&nbsp;matrix&nbsp;as&nbsp;a&nbsp;3x3&nbsp;numpy&nbsp;array&nbsp;of&nbsp;the&nbsp;form:<br>
&nbsp;<br>
&nbsp;&nbsp;a&nbsp;c&nbsp;e<br>
&nbsp;&nbsp;b&nbsp;d&nbsp;f<br>
&nbsp;&nbsp;0&nbsp;0&nbsp;1</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>is_separable</strong></dt>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Affine2DBase">Affine2DBase</a>:<br>
<dl><dt><strong>input_dims</strong> = 2</dl>

<dl><dt><strong>output_dims</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><a name="ScaledTranslation-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-transform_non_affine"><strong>transform_non_affine</strong></a>(self, points)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#ScaledTranslation-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform_affine">transform_affine</a>(<a href="#ScaledTranslation-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#ScaledTranslation-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform_path_affine">transform_path_affine</a>(<a href="#ScaledTranslation-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#ScaledTranslation-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#ScaledTranslation-transform_path_affine">transform_path_affine</a>(<a href="#ScaledTranslation-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#AffineBase">AffineBase</a>:<br>
<dl><dt><strong>is_affine</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="ScaledTranslation-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="ScaledTranslation-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="ScaledTranslation-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="ScaledTranslation-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="ScaledTranslation-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="ScaledTranslation-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Transform">class <strong>Transform</strong></a>(<a href="matplotlib.transforms.html#TransformNode">TransformNode</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>The&nbsp;base&nbsp;class&nbsp;of&nbsp;all&nbsp;TransformNodes&nbsp;that&nbsp;actually&nbsp;perform&nbsp;a<br>
transformation.<br>
&nbsp;<br>
All&nbsp;non-affine&nbsp;transformations&nbsp;should&nbsp;be&nbsp;subclass&nbsp;this&nbsp;class.&nbsp;&nbsp;New<br>
affine&nbsp;transformations&nbsp;should&nbsp;subclass&nbsp;<a href="#Affine2D">Affine2D</a>.<br>
&nbsp;<br>
Subclasses&nbsp;of&nbsp;this&nbsp;class&nbsp;should&nbsp;override&nbsp;the&nbsp;following&nbsp;members&nbsp;(at<br>
minimum):<br>
&nbsp;<br>
&nbsp;&nbsp;input_dims<br>
&nbsp;&nbsp;output_dims<br>
&nbsp;&nbsp;transform<br>
&nbsp;&nbsp;is_separable<br>
&nbsp;&nbsp;has_inverse<br>
&nbsp;&nbsp;inverted&nbsp;(if&nbsp;has_inverse&nbsp;will&nbsp;return&nbsp;True)<br>
&nbsp;<br>
If&nbsp;the&nbsp;transform&nbsp;needs&nbsp;to&nbsp;do&nbsp;something&nbsp;non-standard&nbsp;with&nbsp;Paths,<br>
such&nbsp;as&nbsp;adding&nbsp;curves&nbsp;where&nbsp;there&nbsp;were&nbsp;once&nbsp;line&nbsp;segments,&nbsp;it<br>
should&nbsp;override:<br>
&nbsp;<br>
&nbsp;&nbsp;transform_path<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Transform-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="Transform-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt><dd><tt>Used&nbsp;by&nbsp;C/C++&nbsp;-based&nbsp;backends&nbsp;to&nbsp;get&nbsp;at&nbsp;the&nbsp;array&nbsp;matrix&nbsp;data.</tt></dd></dl>

<dl><dt><a name="Transform-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="Transform-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="Transform-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#Transform-inverted">inverted</a>().<a href="#Transform-transform">transform</a>(<a href="#Transform-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="Transform-transform"><strong>transform</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;the&nbsp;transformation&nbsp;on&nbsp;the&nbsp;given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Transform-transform_affine"><strong>transform_affine</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#Transform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Transform-transform_affine">transform_affine</a>(<a href="#Transform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Transform-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Transform-transform_non_affine"><strong>transform_non_affine</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#Transform-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Transform-transform_affine">transform_affine</a>(<a href="#Transform-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#Transform-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="Transform-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<dl><dt><a name="Transform-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#Transform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Transform-transform_path_affine">transform_path_affine</a>(<a href="#Transform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="Transform-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#Transform-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#Transform-transform_path_affine">transform_path_affine</a>(<a href="#Transform-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="Transform-transform_point"><strong>transform_point</strong></a>(self, point)</dt><dd><tt>A&nbsp;convenience&nbsp;function&nbsp;that&nbsp;returns&nbsp;the&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;a<br>
single&nbsp;point.<br>
&nbsp;<br>
The&nbsp;point&nbsp;is&nbsp;given&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length&nbsp;self.<strong>input_dims</strong>.<br>
The&nbsp;transformed&nbsp;point&nbsp;is&nbsp;returned&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length<br>
self.<strong>output_dims</strong>.</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>has_inverse</strong> = False</dl>

<dl><dt><strong>input_dims</strong> = None</dl>

<dl><dt><strong>is_separable</strong> = False</dl>

<dl><dt><strong>output_dims</strong> = None</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="Transform-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="Transform-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="Transform-__init__"><strong>__init__</strong></a>(self)</dt><dd><tt>Creates&nbsp;a&nbsp;new&nbsp;<a href="#TransformNode">TransformNode</a>.</tt></dd></dl>

<dl><dt><a name="Transform-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="Transform-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="Transform-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="Transform-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_affine</strong> = False</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="TransformNode">class <strong>TransformNode</strong></a>(<a href="__builtin__.html#object">__builtin__.object</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt><a href="#TransformNode">TransformNode</a>&nbsp;is&nbsp;the&nbsp;base&nbsp;class&nbsp;for&nbsp;anything&nbsp;that&nbsp;participates&nbsp;in<br>
the&nbsp;transform&nbsp;tree&nbsp;and&nbsp;needs&nbsp;to&nbsp;invalidate&nbsp;its&nbsp;parents&nbsp;or&nbsp;be<br>
invalidated.&nbsp;&nbsp;It&nbsp;can&nbsp;include&nbsp;classes&nbsp;that&nbsp;are&nbsp;not&nbsp;technically<br>
transforms,&nbsp;such&nbsp;as&nbsp;bounding&nbsp;boxes,&nbsp;since&nbsp;some&nbsp;transforms&nbsp;depend<br>
on&nbsp;bounding&nbsp;boxes&nbsp;to&nbsp;compute&nbsp;their&nbsp;values.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="TransformNode-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="TransformNode-__deepcopy__"><strong>__deepcopy__</strong></a> = <a href="#TransformNode-__copy__">__copy__</a>(self, *args)</dt></dl>

<dl><dt><a name="TransformNode-__init__"><strong>__init__</strong></a>(self)</dt><dd><tt>Creates&nbsp;a&nbsp;new&nbsp;<a href="#TransformNode">TransformNode</a>.</tt></dd></dl>

<dl><dt><a name="TransformNode-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="TransformNode-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="TransformNode-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="TransformNode-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_affine</strong> = False</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="TransformWrapper">class <strong>TransformWrapper</strong></a>(<a href="matplotlib.transforms.html#Transform">Transform</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;helper&nbsp;class&nbsp;that&nbsp;holds&nbsp;a&nbsp;single&nbsp;child&nbsp;transform&nbsp;and&nbsp;acts<br>
equivalently&nbsp;to&nbsp;it.<br>
&nbsp;<br>
This&nbsp;is&nbsp;useful&nbsp;if&nbsp;a&nbsp;node&nbsp;of&nbsp;the&nbsp;transform&nbsp;tree&nbsp;must&nbsp;be&nbsp;replaced&nbsp;at<br>
run&nbsp;time&nbsp;with&nbsp;a&nbsp;transform&nbsp;of&nbsp;a&nbsp;different&nbsp;type.&nbsp;&nbsp;This&nbsp;class&nbsp;allows<br>
that&nbsp;replacement&nbsp;to&nbsp;correctly&nbsp;trigger&nbsp;invalidation.<br>
&nbsp;<br>
Note&nbsp;that&nbsp;<a href="#TransformWrapper">TransformWrapper</a>&nbsp;instances&nbsp;must&nbsp;have&nbsp;the&nbsp;same&nbsp;input&nbsp;and<br>
output&nbsp;dimensions&nbsp;during&nbsp;their&nbsp;entire&nbsp;lifetime,&nbsp;so&nbsp;the&nbsp;child<br>
transform&nbsp;may&nbsp;only&nbsp;be&nbsp;replaced&nbsp;with&nbsp;another&nbsp;child&nbsp;transform&nbsp;of&nbsp;the<br>
same&nbsp;dimensions.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#TransformWrapper">TransformWrapper</a></dd>
<dd><a href="matplotlib.transforms.html#Transform">Transform</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="TransformWrapper-__init__"><strong>__init__</strong></a>(self, child)</dt><dd><tt>child:&nbsp;A&nbsp;<a href="#Transform">Transform</a>&nbsp;instance.&nbsp;&nbsp;This&nbsp;child&nbsp;may&nbsp;later&nbsp;be&nbsp;replaced<br>
with&nbsp;<a href="#TransformWrapper-set">set</a>().</tt></dd></dl>

<dl><dt><a name="TransformWrapper-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="TransformWrapper-__str__"><strong>__str__</strong></a> = <a href="#TransformWrapper-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="TransformWrapper-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="TransformWrapper-set"><strong>set</strong></a>(self, child)</dt><dd><tt>Replace&nbsp;the&nbsp;current&nbsp;child&nbsp;of&nbsp;this&nbsp;transform&nbsp;with&nbsp;another&nbsp;one.<br>
&nbsp;<br>
The&nbsp;new&nbsp;child&nbsp;must&nbsp;have&nbsp;the&nbsp;same&nbsp;number&nbsp;of&nbsp;input&nbsp;and&nbsp;output<br>
dimensions&nbsp;as&nbsp;the&nbsp;current&nbsp;child.</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>has_inverse</strong></dt>
</dl>
<dl><dt><strong>is_affine</strong></dt>
</dl>
<dl><dt><strong>is_separable</strong></dt>
</dl>
<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>pass_through</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><a name="TransformWrapper-__add__"><strong>__add__</strong></a>(self, other)</dt><dd><tt>Composes&nbsp;two&nbsp;transforms&nbsp;together&nbsp;such&nbsp;that&nbsp;self&nbsp;is&nbsp;followed&nbsp;by&nbsp;other.</tt></dd></dl>

<dl><dt><a name="TransformWrapper-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt><dd><tt>Used&nbsp;by&nbsp;C/C++&nbsp;-based&nbsp;backends&nbsp;to&nbsp;get&nbsp;at&nbsp;the&nbsp;array&nbsp;matrix&nbsp;data.</tt></dd></dl>

<dl><dt><a name="TransformWrapper-__radd__"><strong>__radd__</strong></a>(self, other)</dt></dl>

<dl><dt><a name="TransformWrapper-get_affine"><strong>get_affine</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="TransformWrapper-inverted"><strong>inverted</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;corresponding&nbsp;inverse&nbsp;transformation.<br>
&nbsp;<br>
The&nbsp;return&nbsp;value&nbsp;of&nbsp;this&nbsp;method&nbsp;should&nbsp;be&nbsp;treated&nbsp;as<br>
temporary.&nbsp;&nbsp;An&nbsp;update&nbsp;to&nbsp;'self'&nbsp;does&nbsp;not&nbsp;cause&nbsp;a&nbsp;corresponding<br>
update&nbsp;to&nbsp;its&nbsp;inverted&nbsp;copy.<br>
&nbsp;<br>
x&nbsp;===&nbsp;<a href="#TransformWrapper-inverted">inverted</a>().<a href="#TransformWrapper-transform">transform</a>(<a href="#TransformWrapper-transform">transform</a>(x))</tt></dd></dl>

<dl><dt><a name="TransformWrapper-transform"><strong>transform</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;the&nbsp;transformation&nbsp;on&nbsp;the&nbsp;given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="TransformWrapper-transform_affine"><strong>transform_affine</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;affine&nbsp;part&nbsp;of&nbsp;this&nbsp;transformation&nbsp;on&nbsp;the<br>
given&nbsp;array&nbsp;of&nbsp;values.<br>
&nbsp;<br>
<a href="#TransformWrapper-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#TransformWrapper-transform_affine">transform_affine</a>(<a href="#TransformWrapper-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;a&nbsp;no-op.&nbsp;&nbsp;In<br>
affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#TransformWrapper-transform">transform</a>(values).<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="TransformWrapper-transform_non_affine"><strong>transform_non_affine</strong></a>(self, values)</dt><dd><tt>Performs&nbsp;only&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transformation.<br>
&nbsp;<br>
<a href="#TransformWrapper-transform">transform</a>(values)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#TransformWrapper-transform_affine">transform_affine</a>(<a href="#TransformWrapper-transform_non_affine">transform_non_affine</a>(values)).<br>
&nbsp;<br>
In&nbsp;non-affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;generally&nbsp;equivalent&nbsp;to<br>
<a href="#TransformWrapper-transform">transform</a>(values).&nbsp;&nbsp;In&nbsp;affine&nbsp;transformations,&nbsp;this&nbsp;is&nbsp;a<br>
no-op.<br>
&nbsp;<br>
Accepts&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>input_dims</strong>)&nbsp;and<br>
returns&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(N&nbsp;x&nbsp;self.<strong>output_dims</strong>).</tt></dd></dl>

<dl><dt><a name="TransformWrapper-transform_path"><strong>transform_path</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;path.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance.<br>
&nbsp;<br>
In&nbsp;some&nbsp;cases,&nbsp;this&nbsp;transform&nbsp;may&nbsp;insert&nbsp;curves&nbsp;into&nbsp;the&nbsp;path<br>
that&nbsp;began&nbsp;as&nbsp;line&nbsp;segments.</tt></dd></dl>

<dl><dt><a name="TransformWrapper-transform_path_affine"><strong>transform_path_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#TransformWrapper-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#TransformWrapper-transform_path_affine">transform_path_affine</a>(<a href="#TransformWrapper-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="TransformWrapper-transform_path_non_affine"><strong>transform_path_non_affine</strong></a>(self, path)</dt><dd><tt>Returns&nbsp;a&nbsp;copy&nbsp;of&nbsp;path,&nbsp;transformed&nbsp;only&nbsp;by&nbsp;the&nbsp;non-affine<br>
part&nbsp;of&nbsp;this&nbsp;transform.<br>
&nbsp;<br>
path:&nbsp;a&nbsp;Path&nbsp;instance<br>
&nbsp;<br>
<a href="#TransformWrapper-transform_path">transform_path</a>(path)&nbsp;is&nbsp;equivalent&nbsp;to<br>
<a href="#TransformWrapper-transform_path_affine">transform_path_affine</a>(<a href="#TransformWrapper-transform_path_non_affine">transform_path_non_affine</a>(values)).</tt></dd></dl>

<dl><dt><a name="TransformWrapper-transform_point"><strong>transform_point</strong></a>(self, point)</dt><dd><tt>A&nbsp;convenience&nbsp;function&nbsp;that&nbsp;returns&nbsp;the&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;a<br>
single&nbsp;point.<br>
&nbsp;<br>
The&nbsp;point&nbsp;is&nbsp;given&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length&nbsp;self.<strong>input_dims</strong>.<br>
The&nbsp;transformed&nbsp;point&nbsp;is&nbsp;returned&nbsp;as&nbsp;a&nbsp;sequence&nbsp;of&nbsp;length<br>
self.<strong>output_dims</strong>.</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#Transform">Transform</a>:<br>
<dl><dt><strong>input_dims</strong> = None</dl>

<dl><dt><strong>output_dims</strong> = None</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="TransformWrapper-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="TransformWrapper-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="TransformWrapper-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="TransformWrapper-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="TransformWrapper-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="TransformedBbox">class <strong>TransformedBbox</strong></a>(<a href="matplotlib.transforms.html#BboxBase">BboxBase</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;<a href="#Bbox">Bbox</a>&nbsp;that&nbsp;is&nbsp;automatically&nbsp;transformed&nbsp;by&nbsp;a&nbsp;given&nbsp;<a href="#Transform">Transform</a>.&nbsp;&nbsp;When<br>
either&nbsp;the&nbsp;child&nbsp;bbox&nbsp;or&nbsp;transform&nbsp;changes,&nbsp;the&nbsp;bounds&nbsp;of&nbsp;this&nbsp;bbox<br>
will&nbsp;update&nbsp;accordingly.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#TransformedBbox">TransformedBbox</a></dd>
<dd><a href="matplotlib.transforms.html#BboxBase">BboxBase</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="TransformedBbox-__init__"><strong>__init__</strong></a>(self, bbox, transform)</dt><dd><tt>bbox:&nbsp;a&nbsp;child&nbsp;bbox<br>
transform:&nbsp;a&nbsp;2D&nbsp;transform</tt></dd></dl>

<dl><dt><a name="TransformedBbox-__repr__"><strong>__repr__</strong></a>(self)</dt></dl>

<dl><dt><a name="TransformedBbox-__str__"><strong>__str__</strong></a> = <a href="#TransformedBbox-__repr__">__repr__</a>(self)</dt></dl>

<dl><dt><a name="TransformedBbox-get_points"><strong>get_points</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><a name="TransformedBbox-__array__"><strong>__array__</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="TransformedBbox-anchored"><strong>anchored</strong></a>(self, c, container<font color="#909090">=None</font>)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shifted&nbsp;to&nbsp;position&nbsp;c&nbsp;within&nbsp;a<br>
container.<br>
&nbsp;<br>
c:&nbsp;may&nbsp;be&nbsp;either&nbsp;a)&nbsp;a&nbsp;sequence&nbsp;(cx,&nbsp;cy)&nbsp;where&nbsp;cx,&nbsp;cy&nbsp;range<br>
from&nbsp;0&nbsp;to&nbsp;1,&nbsp;where&nbsp;0&nbsp;is&nbsp;left&nbsp;or&nbsp;bottom&nbsp;and&nbsp;1&nbsp;is&nbsp;right&nbsp;or&nbsp;top;<br>
or&nbsp;b)&nbsp;a&nbsp;string:&nbsp;C&nbsp;for&nbsp;centered,&nbsp;S&nbsp;for&nbsp;bottom-center,&nbsp;SE&nbsp;for<br>
bottom-left,&nbsp;E&nbsp;for&nbsp;left,&nbsp;etc.<br>
&nbsp;<br>
Optional&nbsp;arg&nbsp;container&nbsp;is&nbsp;the&nbsp;box&nbsp;within&nbsp;which&nbsp;the&nbsp;BBox<br>
is&nbsp;positioned;&nbsp;it&nbsp;defaults&nbsp;to&nbsp;the&nbsp;initial&nbsp;BBox.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-contains"><strong>contains</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="TransformedBbox-containsx"><strong>containsx</strong></a>(self, x)</dt></dl>

<dl><dt><a name="TransformedBbox-containsy"><strong>containsy</strong></a>(self, y)</dt></dl>

<dl><dt><a name="TransformedBbox-corners"><strong>corners</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;array&nbsp;of&nbsp;points&nbsp;which&nbsp;are&nbsp;the&nbsp;four&nbsp;corners&nbsp;of&nbsp;this<br>
rectangle.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-count_contains"><strong>count_contains</strong></a>(self, vertices)</dt><dd><tt>Count&nbsp;the&nbsp;number&nbsp;of&nbsp;vertices&nbsp;contained&nbsp;in&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>.<br>
&nbsp;<br>
vertices&nbsp;is&nbsp;a&nbsp;Nx2&nbsp;numpy&nbsp;array.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-count_overlaps"><strong>count_overlaps</strong></a>(self, bboxes)</dt><dd><tt>Count&nbsp;the&nbsp;number&nbsp;of&nbsp;bounding&nbsp;boxes&nbsp;that&nbsp;overlap&nbsp;this&nbsp;one.<br>
&nbsp;<br>
bboxes&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;<a href="#Bbox">Bbox</a>&nbsp;objects</tt></dd></dl>

<dl><dt><a name="TransformedBbox-expanded"><strong>expanded</strong></a>(self, sw, sh)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;which&nbsp;is&nbsp;this&nbsp;<a href="#Bbox">Bbox</a>&nbsp;expanded&nbsp;around&nbsp;its<br>
center&nbsp;by&nbsp;the&nbsp;given&nbsp;factors&nbsp;sw&nbsp;and&nbsp;sh.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt><a href="#TransformNode">TransformNode</a>&nbsp;is&nbsp;the&nbsp;base&nbsp;class&nbsp;for&nbsp;anything&nbsp;that&nbsp;participates&nbsp;in<br>
the&nbsp;transform&nbsp;tree&nbsp;and&nbsp;needs&nbsp;to&nbsp;invalidate&nbsp;its&nbsp;parents&nbsp;or&nbsp;be<br>
invalidated.&nbsp;&nbsp;It&nbsp;can&nbsp;include&nbsp;classes&nbsp;that&nbsp;are&nbsp;not&nbsp;technically<br>
transforms,&nbsp;such&nbsp;as&nbsp;bounding&nbsp;boxes,&nbsp;since&nbsp;some&nbsp;transforms&nbsp;depend<br>
on&nbsp;bounding&nbsp;boxes&nbsp;to&nbsp;compute&nbsp;their&nbsp;values.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-fully_contains"><strong>fully_contains</strong></a>(self, x, y)</dt></dl>

<dl><dt><a name="TransformedBbox-fully_containsx"><strong>fully_containsx</strong></a>(self, x)</dt></dl>

<dl><dt><a name="TransformedBbox-fully_containsy"><strong>fully_containsy</strong></a>(self, y)</dt></dl>

<dl><dt><a name="TransformedBbox-fully_overlaps"><strong>fully_overlaps</strong></a>(self, other)</dt></dl>

<dl><dt><a name="TransformedBbox-inverse_transformed"><strong>inverse_transformed</strong></a>(self, transform)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;<a href="__builtin__.html#object">object</a>,&nbsp;transformed&nbsp;by&nbsp;the&nbsp;inverse&nbsp;of&nbsp;the<br>
given&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-is_unit"><strong>is_unit</strong></a>(self)</dt></dl>

<dl><dt><a name="TransformedBbox-overlaps"><strong>overlaps</strong></a>(self, other)</dt></dl>

<dl><dt><a name="TransformedBbox-padded"><strong>padded</strong></a>(self, p)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;that&nbsp;is&nbsp;padded&nbsp;on&nbsp;all&nbsp;four&nbsp;sides&nbsp;by&nbsp;the<br>
given&nbsp;value.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-rotated"><strong>rotated</strong></a>(self, radians)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;bounding&nbsp;box&nbsp;that&nbsp;bounds&nbsp;a&nbsp;rotated&nbsp;version&nbsp;of&nbsp;this<br>
bounding&nbsp;box.&nbsp;&nbsp;The&nbsp;new&nbsp;bounding&nbsp;box&nbsp;is&nbsp;still&nbsp;aligned&nbsp;with&nbsp;the<br>
axes,&nbsp;of&nbsp;course.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-shrunk"><strong>shrunk</strong></a>(self, mx, my)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shurnk&nbsp;by&nbsp;the&nbsp;factor&nbsp;mx&nbsp;in&nbsp;the&nbsp;x<br>
direction&nbsp;and&nbsp;the&nbsp;factor&nbsp;my&nbsp;in&nbsp;the&nbsp;y&nbsp;direction.&nbsp;&nbsp;The&nbsp;lower<br>
left&nbsp;corner&nbsp;of&nbsp;the&nbsp;box&nbsp;remains&nbsp;unchanged.&nbsp;&nbsp;Normally&nbsp;mx&nbsp;and&nbsp;my<br>
will&nbsp;be&nbsp;&lt;=&nbsp;1,&nbsp;but&nbsp;this&nbsp;is&nbsp;not&nbsp;enforced.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-shrunk_to_aspect"><strong>shrunk_to_aspect</strong></a>(self, box_aspect, container<font color="#909090">=None</font>, fig_aspect<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;shrunk&nbsp;so&nbsp;that&nbsp;it&nbsp;is&nbsp;as&nbsp;large&nbsp;as&nbsp;it<br>
can&nbsp;be&nbsp;while&nbsp;having&nbsp;the&nbsp;desired&nbsp;aspect&nbsp;ratio,&nbsp;box_aspect.&nbsp;&nbsp;If<br>
the&nbsp;box&nbsp;coordinates&nbsp;are&nbsp;relative--that&nbsp;is,&nbsp;fractions&nbsp;of&nbsp;a<br>
larger&nbsp;box&nbsp;such&nbsp;as&nbsp;a&nbsp;figure--then&nbsp;the&nbsp;physical&nbsp;aspect&nbsp;ratio&nbsp;of<br>
that&nbsp;figure&nbsp;is&nbsp;specified&nbsp;with&nbsp;fig_aspect,&nbsp;so&nbsp;that&nbsp;box_aspect<br>
can&nbsp;also&nbsp;be&nbsp;given&nbsp;as&nbsp;a&nbsp;ratio&nbsp;of&nbsp;the&nbsp;absolute&nbsp;dimensions,&nbsp;not<br>
the&nbsp;relative&nbsp;dimensions.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-splitx"><strong>splitx</strong></a>(self, *args)</dt><dd><tt>e.g.,&nbsp;bbox.<a href="#TransformedBbox-splitx">splitx</a>(f1,&nbsp;f2,&nbsp;...)<br>
&nbsp;<br>
Returns&nbsp;a&nbsp;list&nbsp;of&nbsp;new&nbsp;BBoxes&nbsp;formed&nbsp;by<br>
splitting&nbsp;the&nbsp;original&nbsp;one&nbsp;with&nbsp;vertical&nbsp;lines<br>
at&nbsp;fractional&nbsp;positions&nbsp;f1,&nbsp;f2,&nbsp;...</tt></dd></dl>

<dl><dt><a name="TransformedBbox-splity"><strong>splity</strong></a>(self, *args)</dt><dd><tt>e.g.,&nbsp;bbox.<a href="#TransformedBbox-splitx">splitx</a>(f1,&nbsp;f2,&nbsp;...)<br>
&nbsp;<br>
Returns&nbsp;a&nbsp;list&nbsp;of&nbsp;new&nbsp;PBoxes&nbsp;formed&nbsp;by<br>
splitting&nbsp;the&nbsp;original&nbsp;one&nbsp;with&nbsp;horizontal&nbsp;lines<br>
at&nbsp;fractional&nbsp;positions&nbsp;f1,&nbsp;f2,&nbsp;...</tt></dd></dl>

<dl><dt><a name="TransformedBbox-transformed"><strong>transformed</strong></a>(self, transform)</dt><dd><tt>Return&nbsp;a&nbsp;new&nbsp;<a href="#Bbox">Bbox</a>&nbsp;<a href="__builtin__.html#object">object</a>,&nbsp;transformed&nbsp;by&nbsp;the&nbsp;given&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-translated"><strong>translated</strong></a>(self, tx, ty)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;<a href="#Bbox">Bbox</a>,&nbsp;translated&nbsp;by&nbsp;tx&nbsp;and&nbsp;ty.</tt></dd></dl>

<hr>
Static methods inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><a name="TransformedBbox-union"><strong>union</strong></a>(bboxes)</dt><dd><tt>Return&nbsp;a&nbsp;<a href="#Bbox">Bbox</a>&nbsp;that&nbsp;contains&nbsp;all&nbsp;of&nbsp;the&nbsp;given&nbsp;bboxes.</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><strong>bounds</strong></dt>
</dl>
<dl><dt><strong>extents</strong></dt>
</dl>
<dl><dt><strong>height</strong></dt>
</dl>
<dl><dt><strong>intervalx</strong></dt>
</dl>
<dl><dt><strong>intervaly</strong></dt>
</dl>
<dl><dt><strong>max</strong></dt>
</dl>
<dl><dt><strong>min</strong></dt>
</dl>
<dl><dt><strong>p0</strong></dt>
</dl>
<dl><dt><strong>p1</strong></dt>
</dl>
<dl><dt><strong>size</strong></dt>
</dl>
<dl><dt><strong>width</strong></dt>
</dl>
<dl><dt><strong>x0</strong></dt>
</dl>
<dl><dt><strong>x1</strong></dt>
</dl>
<dl><dt><strong>xmax</strong></dt>
</dl>
<dl><dt><strong>xmin</strong></dt>
</dl>
<dl><dt><strong>y0</strong></dt>
</dl>
<dl><dt><strong>y1</strong></dt>
</dl>
<dl><dt><strong>ymax</strong></dt>
</dl>
<dl><dt><strong>ymin</strong></dt>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#BboxBase">BboxBase</a>:<br>
<dl><dt><strong>coefs</strong> = {'C': (0.5, 0.5), 'E': (1.0, 0.5), 'N': (0.5, 1.0), 'NE': (1.0, 1.0), 'NW': (0, 1.0), 'S': (0.5, 0), 'SE': (1.0, 0), 'SW': (0, 0), 'W': (0, 0.5)}</dl>

<dl><dt><strong>is_affine</strong> = True</dl>

<dl><dt><strong>is_bbox</strong> = True</dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="TransformedBbox-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="TransformedBbox-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="TransformedBbox-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="TransformedBbox-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="TransformedPath">class <strong>TransformedPath</strong></a>(<a href="matplotlib.transforms.html#TransformNode">TransformNode</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;<a href="#TransformedPath">TransformedPath</a>&nbsp;caches&nbsp;a&nbsp;non-affine&nbsp;transformed&nbsp;copy&nbsp;of&nbsp;the<br>
path.&nbsp;&nbsp;This&nbsp;cached&nbsp;copy&nbsp;is&nbsp;automatically&nbsp;updated&nbsp;when&nbsp;the<br>
non-affine&nbsp;part&nbsp;of&nbsp;the&nbsp;transform&nbsp;changes.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.transforms.html#TransformedPath">TransformedPath</a></dd>
<dd><a href="matplotlib.transforms.html#TransformNode">TransformNode</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="TransformedPath-__init__"><strong>__init__</strong></a>(self, path, transform)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;<a href="#TransformedPath">TransformedPath</a>&nbsp;from&nbsp;the&nbsp;given&nbsp;path&nbsp;and&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="TransformedPath-get_affine"><strong>get_affine</strong></a>(self)</dt></dl>

<dl><dt><a name="TransformedPath-get_fully_transformed_path"><strong>get_fully_transformed_path</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;fully-transformed&nbsp;copy&nbsp;of&nbsp;the&nbsp;child&nbsp;path.</tt></dd></dl>

<dl><dt><a name="TransformedPath-get_transformed_path_and_affine"><strong>get_transformed_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;child&nbsp;path,&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of<br>
the&nbsp;transform&nbsp;already&nbsp;applied,&nbsp;along&nbsp;with&nbsp;the&nbsp;affine&nbsp;part&nbsp;of<br>
the&nbsp;path&nbsp;necessary&nbsp;to&nbsp;complete&nbsp;the&nbsp;transformation.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><a name="TransformedPath-__copy__"><strong>__copy__</strong></a>(self, *args)</dt></dl>

<dl><dt><a name="TransformedPath-__deepcopy__"><strong>__deepcopy__</strong></a> = __copy__(self, *args)</dt></dl>

<dl><dt><a name="TransformedPath-frozen"><strong>frozen</strong></a>(self)</dt><dd><tt>Returns&nbsp;a&nbsp;frozen&nbsp;copy&nbsp;of&nbsp;this&nbsp;transform&nbsp;node.&nbsp;&nbsp;The&nbsp;frozen&nbsp;copy<br>
will&nbsp;not&nbsp;update&nbsp;when&nbsp;its&nbsp;children&nbsp;change.&nbsp;&nbsp;Useful&nbsp;for&nbsp;storing<br>
a&nbsp;previously&nbsp;known&nbsp;state&nbsp;of&nbsp;a&nbsp;transform&nbsp;where&nbsp;copy.deepcopy()<br>
might&nbsp;normally&nbsp;be&nbsp;used.</tt></dd></dl>

<dl><dt><a name="TransformedPath-invalidate"><strong>invalidate</strong></a>(self)</dt><dd><tt>Invalidate&nbsp;this&nbsp;transform&nbsp;node&nbsp;and&nbsp;all&nbsp;of&nbsp;its&nbsp;parents.&nbsp;&nbsp;Should<br>
be&nbsp;called&nbsp;anytime&nbsp;the&nbsp;transform&nbsp;changes.</tt></dd></dl>

<dl><dt><a name="TransformedPath-set_children"><strong>set_children</strong></a>(self, *children)</dt><dd><tt>Set&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;transform.&nbsp;&nbsp;Should&nbsp;be&nbsp;called&nbsp;from&nbsp;the<br>
constructor&nbsp;of&nbsp;any&nbsp;transforms&nbsp;that&nbsp;depend&nbsp;on&nbsp;other&nbsp;transforms.</tt></dd></dl>

<dl><dt><a name="TransformedPath-write_graphviz"><strong>write_graphviz</strong></a>(self, fobj, highlight<font color="#909090">=[]</font>)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.transforms.html#TransformNode">TransformNode</a>:<br>
<dl><dt><strong>INVALID</strong> = 3</dl>

<dl><dt><strong>INVALID_AFFINE</strong> = 2</dl>

<dl><dt><strong>INVALID_NON_AFFINE</strong> = 1</dl>

<dl><dt><strong>is_affine</strong> = False</dl>

<dl><dt><strong>is_bbox</strong> = False</dl>

<dl><dt><strong>pass_through</strong> = False</dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-affine_transform"><strong>affine_transform</strong></a>(...)</dt><dd><tt><a href="#-affine_transform">affine_transform</a>(vertices,&nbsp;transform)</tt></dd></dl>
 <dl><dt><a name="-blended_transform_factory"><strong>blended_transform_factory</strong></a>(x_transform, y_transform)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;"blended"&nbsp;transform&nbsp;using&nbsp;x_transform&nbsp;to<br>
transform&nbsp;the&nbsp;x-axis&nbsp;and&nbsp;y_transform&nbsp;to&nbsp;transform&nbsp;the&nbsp;y_axis.<br>
&nbsp;<br>
Shortcut&nbsp;versions&nbsp;of&nbsp;the&nbsp;blended&nbsp;transform&nbsp;are&nbsp;provided&nbsp;for&nbsp;the<br>
case&nbsp;where&nbsp;both&nbsp;child&nbsp;transforms&nbsp;are&nbsp;affine.</tt></dd></dl>
 <dl><dt><a name="-composite_transform_factory"><strong>composite_transform_factory</strong></a>(a, b)</dt><dd><tt>Create&nbsp;a&nbsp;new&nbsp;composite&nbsp;transform&nbsp;that&nbsp;is&nbsp;the&nbsp;result&nbsp;of&nbsp;applying<br>
transform&nbsp;a&nbsp;then&nbsp;transform&nbsp;b.<br>
&nbsp;<br>
Shortcut&nbsp;versions&nbsp;of&nbsp;the&nbsp;blended&nbsp;transform&nbsp;are&nbsp;provided&nbsp;for&nbsp;the<br>
case&nbsp;where&nbsp;both&nbsp;child&nbsp;transforms&nbsp;are&nbsp;affine,&nbsp;or&nbsp;one&nbsp;or&nbsp;the&nbsp;other<br>
is&nbsp;the&nbsp;identity&nbsp;transform.<br>
&nbsp;<br>
Composite&nbsp;TransformNodes&nbsp;may&nbsp;also&nbsp;be&nbsp;created&nbsp;using&nbsp;the&nbsp;'+'&nbsp;operator,&nbsp;e.g.:<br>
&nbsp;<br>
&nbsp;&nbsp;c&nbsp;=&nbsp;a&nbsp;+&nbsp;b</tt></dd></dl>
 <dl><dt><a name="-count_bboxes_overlapping_bbox"><strong>count_bboxes_overlapping_bbox</strong></a>(...)</dt><dd><tt><a href="#-count_bboxes_overlapping_bbox">count_bboxes_overlapping_bbox</a>(bbox,&nbsp;bboxes)</tt></dd></dl>
 <dl><dt><a name="-interval_contains"><strong>interval_contains</strong></a>(interval, val)</dt></dl>
 <dl><dt><a name="-interval_contains_open"><strong>interval_contains_open</strong></a>(interval, val)</dt></dl>
 <dl><dt><a name="-nonsingular"><strong>nonsingular</strong></a>(vmin, vmax, expander<font color="#909090">=0.001</font>, tiny<font color="#909090">=1.0000000000000001e-15</font>, increasing<font color="#909090">=True</font>)</dt><dd><tt>Ensure&nbsp;the&nbsp;endpoints&nbsp;of&nbsp;a&nbsp;range&nbsp;are&nbsp;not&nbsp;too&nbsp;close&nbsp;together.<br>
&nbsp;<br>
"too&nbsp;close"&nbsp;means&nbsp;the&nbsp;interval&nbsp;is&nbsp;smaller&nbsp;than&nbsp;'tiny'&nbsp;times<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;maximum&nbsp;absolute&nbsp;value.<br>
&nbsp;<br>
If&nbsp;they&nbsp;are&nbsp;too&nbsp;close,&nbsp;each&nbsp;will&nbsp;be&nbsp;moved&nbsp;by&nbsp;the&nbsp;'expander'.<br>
If&nbsp;'increasing'&nbsp;is&nbsp;True&nbsp;and&nbsp;vmin&nbsp;&gt;&nbsp;vmax,&nbsp;they&nbsp;will&nbsp;be&nbsp;swapped,<br>
regardless&nbsp;of&nbsp;whether&nbsp;they&nbsp;are&nbsp;too&nbsp;close.</tt></dd></dl>
 <dl><dt><a name="-update_path_extents"><strong>update_path_extents</strong></a>(...)</dt><dd><tt><a href="#-update_path_extents">update_path_extents</a>(path,&nbsp;trans,&nbsp;bbox,&nbsp;minpos)</tt></dd></dl>
</td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>DEBUG</strong> = False</td></tr></table>
@footer@