@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.numerix</strong></big></big> (version 1.0.4.dev4009)</font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib/python2.5/site-packages/matplotlib/numerix/__init__.py">/home/jdhunter/dev/lib/python2.5/site-packages/matplotlib/numerix/__init__.py</a></font></td></tr></table>
    <p><tt>numerix&nbsp;&nbsp;imports&nbsp;either&nbsp;Numeric&nbsp;or&nbsp;numarray&nbsp;based&nbsp;on&nbsp;various&nbsp;selectors.<br>
&nbsp;<br>
0.&nbsp;&nbsp;If&nbsp;the&nbsp;value&nbsp;"--numpy","--numarray"&nbsp;or&nbsp;"--Numeric"&nbsp;is&nbsp;specified&nbsp;on&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;command&nbsp;line,&nbsp;then&nbsp;numerix&nbsp;imports&nbsp;the&nbsp;specified<br>
&nbsp;&nbsp;&nbsp;&nbsp;array&nbsp;package.<br>
&nbsp;<br>
1.&nbsp;The&nbsp;value&nbsp;of&nbsp;numerix&nbsp;in&nbsp;matplotlibrc:&nbsp;either&nbsp;Numeric&nbsp;or&nbsp;numarray<br>
&nbsp;<br>
2.&nbsp;If&nbsp;none&nbsp;of&nbsp;the&nbsp;above&nbsp;is&nbsp;done,&nbsp;the&nbsp;default&nbsp;array&nbsp;package&nbsp;is&nbsp;Numeric.<br>
&nbsp;&nbsp;&nbsp;Because&nbsp;the&nbsp;matplotlibrc&nbsp;always&nbsp;provides&nbsp;*some*&nbsp;value&nbsp;for&nbsp;numerix<br>
&nbsp;&nbsp;&nbsp;(it&nbsp;has&nbsp;it's&nbsp;own&nbsp;system&nbsp;of&nbsp;default&nbsp;values),&nbsp;this&nbsp;default&nbsp;is&nbsp;most<br>
&nbsp;&nbsp;&nbsp;likely&nbsp;never&nbsp;used.<br>
&nbsp;<br>
To&nbsp;summarize:&nbsp;the&nbsp;&nbsp;commandline&nbsp;is&nbsp;examined&nbsp;first,&nbsp;the&nbsp;&nbsp;rc&nbsp;file&nbsp;second,<br>
and&nbsp;the&nbsp;default&nbsp;array&nbsp;package&nbsp;is&nbsp;Numeric.</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Package Contents</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib.numerix._na_imports.html">_na_imports</a><br>
<a href="matplotlib.numerix._nc_imports.html">_nc_imports</a><br>
<a href="matplotlib.numerix._sp_imports.html">_sp_imports</a><br>
</td><td width="25%" valign=top><a href="matplotlib.numerix.fft.html"><strong>fft</strong>&nbsp;(package)</a><br>
<a href="matplotlib.numerix.linear_algebra.html"><strong>linear_algebra</strong>&nbsp;(package)</a><br>
<a href="matplotlib.numerix.ma.html"><strong>ma</strong>&nbsp;(package)</a><br>
</td><td width="25%" valign=top><a href="matplotlib.numerix.mlab.html"><strong>mlab</strong>&nbsp;(package)</a><br>
<a href="matplotlib.numerix.npyma.html"><strong>npyma</strong>&nbsp;(package)</a><br>
<a href="matplotlib.numerix.random_array.html"><strong>random_array</strong>&nbsp;(package)</a><br>
</td><td width="25%" valign=top></td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-byteswapped"><strong>byteswapped</strong></a>(a)</dt></dl>
 <dl><dt><a name="-concatenate"><strong>concatenate</strong></a>(...)</dt><dd><tt><a href="#-concatenate">concatenate</a>((a1,&nbsp;a2,&nbsp;...),&nbsp;axis=0)<br>
&nbsp;<br>
Join&nbsp;arrays&nbsp;together.<br>
&nbsp;<br>
The&nbsp;tuple&nbsp;of&nbsp;sequences&nbsp;(a1,&nbsp;a2,&nbsp;...)&nbsp;are&nbsp;joined&nbsp;along&nbsp;the&nbsp;given&nbsp;axis<br>
(default&nbsp;is&nbsp;the&nbsp;first&nbsp;one)&nbsp;into&nbsp;a&nbsp;single&nbsp;numpy&nbsp;array.<br>
&nbsp;<br>
Example:<br>
&nbsp;<br>
&gt;&gt;&gt;&nbsp;<a href="#-concatenate">concatenate</a>(&nbsp;([0,1,2],&nbsp;[5,6,7])&nbsp;)<br>
array([0,&nbsp;1,&nbsp;2,&nbsp;5,&nbsp;6,&nbsp;7])</tt></dd></dl>
 <dl><dt><a name="-dot"><strong>dot</strong></a>(...)</dt><dd><tt><a href="#-dot">dot</a>(a,b)<br>
Returns&nbsp;the&nbsp;dot&nbsp;product&nbsp;of&nbsp;a&nbsp;and&nbsp;b&nbsp;for&nbsp;arrays&nbsp;of&nbsp;floating&nbsp;point&nbsp;types.<br>
Like&nbsp;the&nbsp;generic&nbsp;numpy&nbsp;equivalent&nbsp;the&nbsp;product&nbsp;sum&nbsp;is&nbsp;over<br>
the&nbsp;last&nbsp;dimension&nbsp;of&nbsp;a&nbsp;and&nbsp;the&nbsp;second-to-last&nbsp;dimension&nbsp;of&nbsp;b.<br>
NB:&nbsp;The&nbsp;first&nbsp;argument&nbsp;is&nbsp;not&nbsp;conjugated.</tt></dd></dl>
 <dl><dt><a name="-dump"><strong>dump</strong></a>(...)</dt><dd><tt><a href="#-dump">dump</a>(obj,&nbsp;file,&nbsp;protocol=0)&nbsp;--&nbsp;Write&nbsp;an&nbsp;object&nbsp;in&nbsp;pickle&nbsp;format&nbsp;to&nbsp;the&nbsp;given&nbsp;file.<br>
&nbsp;<br>
See&nbsp;the&nbsp;Pickler&nbsp;docstring&nbsp;for&nbsp;the&nbsp;meaning&nbsp;of&nbsp;optional&nbsp;argument&nbsp;proto.</tt></dd></dl>
 <dl><dt><a name="-dumps"><strong>dumps</strong></a>(...)</dt><dd><tt><a href="#-dumps">dumps</a>(obj,&nbsp;protocol=0)&nbsp;--&nbsp;Return&nbsp;a&nbsp;string&nbsp;containing&nbsp;an&nbsp;object&nbsp;in&nbsp;pickle&nbsp;format.<br>
&nbsp;<br>
See&nbsp;the&nbsp;Pickler&nbsp;docstring&nbsp;for&nbsp;the&nbsp;meaning&nbsp;of&nbsp;optional&nbsp;argument&nbsp;proto.</tt></dd></dl>
 <dl><dt><a name="-innerproduct"><strong>innerproduct</strong></a> = inner(...)</dt><dd><tt><a href="#-innerproduct">innerproduct</a>(a,b)<br>
Returns&nbsp;the&nbsp;inner&nbsp;product&nbsp;of&nbsp;a&nbsp;and&nbsp;b&nbsp;for&nbsp;arrays&nbsp;of&nbsp;floating&nbsp;point&nbsp;types.<br>
Like&nbsp;the&nbsp;generic&nbsp;NumPy&nbsp;equivalent&nbsp;the&nbsp;product&nbsp;sum&nbsp;is&nbsp;over<br>
the&nbsp;last&nbsp;dimension&nbsp;of&nbsp;a&nbsp;and&nbsp;b.<br>
NB:&nbsp;The&nbsp;first&nbsp;argument&nbsp;is&nbsp;not&nbsp;conjugated.</tt></dd></dl>
 <dl><dt><a name="-iscontiguous"><strong>iscontiguous</strong></a>(a)</dt></dl>
 <dl><dt><a name="-itemsize"><strong>itemsize</strong></a>(a)</dt></dl>
 <dl><dt><a name="-matrixmultiply"><strong>matrixmultiply</strong></a> = dot(...)</dt><dd><tt><a href="#-dot">dot</a>(a,b)<br>
Returns&nbsp;the&nbsp;dot&nbsp;product&nbsp;of&nbsp;a&nbsp;and&nbsp;b&nbsp;for&nbsp;arrays&nbsp;of&nbsp;floating&nbsp;point&nbsp;types.<br>
Like&nbsp;the&nbsp;generic&nbsp;numpy&nbsp;equivalent&nbsp;the&nbsp;product&nbsp;sum&nbsp;is&nbsp;over<br>
the&nbsp;last&nbsp;dimension&nbsp;of&nbsp;a&nbsp;and&nbsp;the&nbsp;second-to-last&nbsp;dimension&nbsp;of&nbsp;b.<br>
NB:&nbsp;The&nbsp;first&nbsp;argument&nbsp;is&nbsp;not&nbsp;conjugated.</tt></dd></dl>
 <dl><dt><a name="-putmask"><strong>putmask</strong></a>(...)</dt><dd><tt><a href="#-putmask">putmask</a>(a,&nbsp;mask,&nbsp;values)&nbsp;sets&nbsp;a.flat[n]&nbsp;=&nbsp;values[n]&nbsp;for&nbsp;each&nbsp;n&nbsp;where<br>
mask.flat[n]&nbsp;is&nbsp;true.&nbsp;&nbsp;If&nbsp;values&nbsp;is&nbsp;not&nbsp;the&nbsp;same&nbsp;size&nbsp;of&nbsp;a&nbsp;and&nbsp;mask&nbsp;then<br>
it&nbsp;will&nbsp;repeat.&nbsp;&nbsp;This&nbsp;gives&nbsp;different&nbsp;behavior&nbsp;than&nbsp;a[mask]&nbsp;=&nbsp;values.</tt></dd></dl>
 <dl><dt><a name="-rand"><strong>rand</strong></a>(...)</dt><dd><tt>Return&nbsp;an&nbsp;array&nbsp;of&nbsp;the&nbsp;given&nbsp;dimensions&nbsp;which&nbsp;is&nbsp;initialized&nbsp;to&nbsp;<br>
random&nbsp;numbers&nbsp;from&nbsp;a&nbsp;uniform&nbsp;distribution&nbsp;in&nbsp;the&nbsp;range&nbsp;[0,1).<br>
&nbsp;<br>
<a href="#-rand">rand</a>(d0,&nbsp;d1,&nbsp;...,&nbsp;dn)&nbsp;-&gt;&nbsp;random&nbsp;values<br>
&nbsp;<br>
Note:&nbsp;&nbsp;This&nbsp;is&nbsp;a&nbsp;convenience&nbsp;function.&nbsp;If&nbsp;you&nbsp;want&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interface&nbsp;that&nbsp;takes&nbsp;a&nbsp;tuple&nbsp;as&nbsp;the&nbsp;first&nbsp;argument<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;numpy.random.random_sample(shape_tuple).</tt></dd></dl>
 <dl><dt><a name="-randn"><strong>randn</strong></a>(...)</dt><dd><tt>Returns&nbsp;zero-mean,&nbsp;unit-variance&nbsp;Gaussian&nbsp;random&nbsp;numbers&nbsp;in&nbsp;an&nbsp;<br>
array&nbsp;of&nbsp;shape&nbsp;(d0,&nbsp;d1,&nbsp;...,&nbsp;dn).<br>
&nbsp;<br>
<a href="#-randn">randn</a>(d0,&nbsp;d1,&nbsp;...,&nbsp;dn)&nbsp;-&gt;&nbsp;random&nbsp;values<br>
&nbsp;<br>
Note:&nbsp;&nbsp;This&nbsp;is&nbsp;a&nbsp;convenience&nbsp;function.&nbsp;If&nbsp;you&nbsp;want&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interface&nbsp;that&nbsp;takes&nbsp;a&nbsp;tuple&nbsp;as&nbsp;the&nbsp;first&nbsp;argument<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;numpy.random.standard_normal(shape_tuple).</tt></dd></dl>
 <dl><dt><a name="-typecode"><strong>typecode</strong></a>(a)</dt></dl>
 <dl><dt><a name="-vdot"><strong>vdot</strong></a>(...)</dt><dd><tt><a href="#-vdot">vdot</a>(a,b)<br>
Returns&nbsp;the&nbsp;dot&nbsp;product&nbsp;of&nbsp;a&nbsp;and&nbsp;b&nbsp;for&nbsp;scalars&nbsp;and&nbsp;vectors<br>
of&nbsp;floating&nbsp;point&nbsp;and&nbsp;complex&nbsp;types.&nbsp;&nbsp;The&nbsp;first&nbsp;argument,&nbsp;a,&nbsp;is&nbsp;conjugated.</tt></dd></dl>
</td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>Character</strong> = 'c'<br>
<strong>Complex</strong> = 'D'<br>
<strong>Complex0</strong> = 'F'<br>
<strong>Complex16</strong> = 'F'<br>
<strong>Complex32</strong> = 'F'<br>
<strong>Complex64</strong> = 'D'<br>
<strong>Complex8</strong> = 'F'<br>
<strong>Float</strong> = 'd'<br>
<strong>Float0</strong> = 'f'<br>
<strong>Float16</strong> = 'f'<br>
<strong>Float32</strong> = 'f'<br>
<strong>Float64</strong> = 'd'<br>
<strong>Float8</strong> = 'f'<br>
<strong>Infinity</strong> = inf<br>
<strong>Int</strong> = 'l'<br>
<strong>Int0</strong> = 'b'<br>
<strong>Int16</strong> = 'h'<br>
<strong>Int32</strong> = 'i'<br>
<strong>Int8</strong> = 'b'<br>
<strong>LittleEndian</strong> = True<br>
<strong>NewAxis</strong> = None<br>
<strong>PyObject</strong> = 'O'<br>
<strong>UInt</strong> = 'u'<br>
<strong>UInt16</strong> = 'H'<br>
<strong>UInt32</strong> = 'I'<br>
<strong>UInt8</strong> = 'B'<br>
<strong>UnsignedInt16</strong> = 'H'<br>
<strong>UnsignedInt32</strong> = 'I'<br>
<strong>UnsignedInt8</strong> = 'B'<br>
<strong>UnsignedInteger</strong> = 'u'<br>
<strong>__version__</strong> = '1.0.4.dev4009'<br>
<strong>absolute</strong> = &lt;ufunc 'absolute'&gt;<br>
<strong>add</strong> = &lt;ufunc 'add'&gt;<br>
<strong>arccos</strong> = &lt;ufunc 'arccos'&gt;<br>
<strong>arccosh</strong> = &lt;ufunc 'arccosh'&gt;<br>
<strong>arcsin</strong> = &lt;ufunc 'arcsin'&gt;<br>
<strong>arcsinh</strong> = &lt;ufunc 'arcsinh'&gt;<br>
<strong>arctan</strong> = &lt;ufunc 'arctan'&gt;<br>
<strong>arctan2</strong> = &lt;ufunc 'arctan2'&gt;<br>
<strong>arctanh</strong> = &lt;ufunc 'arctanh'&gt;<br>
<strong>bitwise_and</strong> = &lt;ufunc 'bitwise_and'&gt;<br>
<strong>bitwise_or</strong> = &lt;ufunc 'bitwise_or'&gt;<br>
<strong>bitwise_xor</strong> = &lt;ufunc 'bitwise_xor'&gt;<br>
<strong>ceil</strong> = &lt;ufunc 'ceil'&gt;<br>
<strong>conjugate</strong> = &lt;ufunc 'conjugate'&gt;<br>
<strong>cos</strong> = &lt;ufunc 'cos'&gt;<br>
<strong>cosh</strong> = &lt;ufunc 'cosh'&gt;<br>
<strong>divide</strong> = &lt;ufunc 'divide'&gt;<br>
<strong>divide_safe</strong> = &lt;ufunc 'divide'&gt;<br>
<strong>e</strong> = 2.7182818284590451<br>
<strong>equal</strong> = &lt;ufunc 'equal'&gt;<br>
<strong>exp</strong> = &lt;ufunc 'exp'&gt;<br>
<strong>fabs</strong> = &lt;ufunc 'fabs'&gt;<br>
<strong>floor</strong> = &lt;ufunc 'floor'&gt;<br>
<strong>floor_divide</strong> = &lt;ufunc 'floor_divide'&gt;<br>
<strong>fmod</strong> = &lt;ufunc 'fmod'&gt;<br>
<strong>g</strong> = {'ArrayType': &lt;type 'numpy.ndarray'&gt;, 'Character': 'c', 'Complex': 'D', 'Complex0': 'F', 'Complex16': 'F', 'Complex32': 'F', 'Complex64': 'D', 'Complex8': 'F', 'DumpArray': &lt;function DumpArray at 0x84de924&gt;, 'Float': 'd', ...}<br>
<strong>greater</strong> = &lt;ufunc 'greater'&gt;<br>
<strong>greater_equal</strong> = &lt;ufunc 'greater_equal'&gt;<br>
<strong>hypot</strong> = &lt;ufunc 'hypot'&gt;<br>
<strong>infinity</strong> = inf<br>
<strong>invert</strong> = &lt;ufunc 'invert'&gt;<br>
<strong>isnan</strong> = &lt;ufunc 'isnan'&gt;<br>
<strong>l</strong> = {'ArrayType': &lt;type 'numpy.ndarray'&gt;, 'Character': 'c', 'Complex': 'D', 'Complex0': 'F', 'Complex16': 'F', 'Complex32': 'F', 'Complex64': 'D', 'Complex8': 'F', 'DumpArray': &lt;function DumpArray at 0x84de924&gt;, 'Float': 'd', ...}<br>
<strong>left_shift</strong> = &lt;ufunc 'left_shift'&gt;<br>
<strong>less</strong> = &lt;ufunc 'less'&gt;<br>
<strong>less_equal</strong> = &lt;ufunc 'less_equal'&gt;<br>
<strong>log</strong> = &lt;ufunc 'log'&gt;<br>
<strong>log10</strong> = &lt;ufunc 'log10'&gt;<br>
<strong>logical_and</strong> = &lt;ufunc 'logical_and'&gt;<br>
<strong>logical_not</strong> = &lt;ufunc 'logical_not'&gt;<br>
<strong>logical_or</strong> = &lt;ufunc 'logical_or'&gt;<br>
<strong>logical_xor</strong> = &lt;ufunc 'logical_xor'&gt;<br>
<strong>maximum</strong> = &lt;ufunc 'maximum'&gt;<br>
<strong>minimum</strong> = &lt;ufunc 'minimum'&gt;<br>
<strong>multiply</strong> = &lt;ufunc 'multiply'&gt;<br>
<strong>nan</strong> = nan<br>
<strong>negative</strong> = &lt;ufunc 'negative'&gt;<br>
<strong>newaxis</strong> = None<br>
<strong>not_equal</strong> = &lt;ufunc 'not_equal'&gt;<br>
<strong>nx</strong> = &lt;matplotlib.numerix._sp_imports._TypeNamespace instance at 0x84c950c&gt;<br>
<strong>pi</strong> = 3.1415926535897931<br>
<strong>power</strong> = &lt;ufunc 'power'&gt;<br>
<strong>rcParams</strong> = {'figure.subplot.right': 0.90000000000000002, 'm...persize': 'letter', 'svg.embed_char_paths': True}<br>
<strong>remainder</strong> = &lt;ufunc 'remainder'&gt;<br>
<strong>right_shift</strong> = &lt;ufunc 'right_shift'&gt;<br>
<strong>sign</strong> = &lt;ufunc 'sign'&gt;<br>
<strong>sin</strong> = &lt;ufunc 'sin'&gt;<br>
<strong>sinh</strong> = &lt;ufunc 'sinh'&gt;<br>
<strong>sqrt</strong> = &lt;ufunc 'sqrt'&gt;<br>
<strong>subtract</strong> = &lt;ufunc 'subtract'&gt;<br>
<strong>tan</strong> = &lt;ufunc 'tan'&gt;<br>
<strong>tanh</strong> = &lt;ufunc 'tanh'&gt;<br>
<strong>true_divide</strong> = &lt;ufunc 'true_divide'&gt;<br>
<strong>typecodes</strong> = {'Character': 'c', 'Complex': 'FD', 'Float': 'fd', 'Integer': 'bhil', 'UnsignedInteger': 'BHI'}<br>
<strong>use_maskedarray</strong> = False<br>
<strong>verbose</strong> = &lt;matplotlib.Verbose instance at 0x82f08cc&gt;<br>
<strong>version</strong> = 'numpy 1.0.4.dev4009'<br>
<strong>which</strong> = ('numpy', 'rc')</td></tr></table>
@footer@