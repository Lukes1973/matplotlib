@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.collections</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/usr/lib/python2.4/site-packages/matplotlib/collections.py">/usr/lib/python2.4/site-packages/matplotlib/collections.py</a></font></td></tr></table>
    <p><tt>Classes&nbsp;for&nbsp;the&nbsp;efficient&nbsp;drawing&nbsp;of&nbsp;large&nbsp;collections&nbsp;of&nbsp;objects&nbsp;that<br>
share&nbsp;most&nbsp;properties,&nbsp;eg&nbsp;a&nbsp;large&nbsp;number&nbsp;of&nbsp;line&nbsp;segments&nbsp;or&nbsp;polygons<br>
&nbsp;<br>
The&nbsp;classes&nbsp;are&nbsp;not&nbsp;meant&nbsp;to&nbsp;be&nbsp;as&nbsp;flexible&nbsp;as&nbsp;their&nbsp;single&nbsp;element<br>
counterparts&nbsp;(eg&nbsp;you&nbsp;may&nbsp;not&nbsp;be&nbsp;able&nbsp;to&nbsp;select&nbsp;all&nbsp;line&nbsp;styles)&nbsp;but<br>
they&nbsp;are&nbsp;meant&nbsp;to&nbsp;be&nbsp;fast&nbsp;for&nbsp;common&nbsp;use&nbsp;cases&nbsp;(eg&nbsp;a&nbsp;bunch&nbsp;of&nbsp;solid<br>
line&nbsp;segemnts)</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="math.html">math</a><br>
</td><td width="25%" valign=top><a href="warnings.html">warnings</a><br>
</td><td width="25%" valign=top></td><td width="25%" valign=top></td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#Collection">Collection</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#LineCollection">LineCollection</a>(<a href="matplotlib.collections.html#Collection">Collection</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>(<a href="matplotlib.collections.html#Collection">Collection</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#PolyCollection">PolyCollection</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#QuadMesh">QuadMesh</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#StarPolygonCollection">StarPolygonCollection</a>
</font></dt></dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Collection">class <strong>Collection</strong></a>(<a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>All&nbsp;properties&nbsp;in&nbsp;a&nbsp;collection&nbsp;must&nbsp;be&nbsp;sequences.&nbsp;&nbsp;The<br>
property&nbsp;of&nbsp;the&nbsp;ith&nbsp;element&nbsp;of&nbsp;the&nbsp;collection&nbsp;is&nbsp;the<br>
&nbsp;<br>
&nbsp;&nbsp;prop[i&nbsp;%&nbsp;len(props)].<br>
&nbsp;<br>
This&nbsp;implies&nbsp;that&nbsp;the&nbsp;properties&nbsp;cycle&nbsp;if&nbsp;the&nbsp;len&nbsp;of&nbsp;props&nbsp;is&nbsp;less<br>
than&nbsp;the&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;A&nbsp;length&nbsp;1<br>
property&nbsp;is&nbsp;shared&nbsp;by&nbsp;all&nbsp;the&nbsp;elements&nbsp;of&nbsp;the&nbsp;collection<br>
&nbsp;<br>
All&nbsp;color&nbsp;args&nbsp;to&nbsp;a&nbsp;collection&nbsp;are&nbsp;sequences&nbsp;of&nbsp;rgba&nbsp;tuples<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Collection-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>return&nbsp;seq&nbsp;of&nbsp;(x,y)&nbsp;in&nbsp;collection</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Collection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Collection-draw"><strong>draw</strong></a>(self, renderer, *args, **kwargs)</dt><dd><tt>Derived&nbsp;classes&nbsp;drawing&nbsp;method</tt></dd></dl>

<dl><dt><a name="Collection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Collection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Collection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Collection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Collection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Collection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Collection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Collection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Collection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Collection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Collection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Collection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Collection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Collection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="Collection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<dl><dt><strong>zorder</strong> = 0</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="LineCollection">class <strong>LineCollection</strong></a>(<a href="matplotlib.collections.html#Collection">Collection</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>All&nbsp;parameters&nbsp;must&nbsp;be&nbsp;sequences.&nbsp;&nbsp;The&nbsp;property&nbsp;of&nbsp;the&nbsp;ith&nbsp;line<br>
segment&nbsp;is&nbsp;the&nbsp;prop[i&nbsp;%&nbsp;len(props)],&nbsp;ie&nbsp;the&nbsp;properties&nbsp;cycle&nbsp;if<br>
the&nbsp;len&nbsp;of&nbsp;props&nbsp;is&nbsp;less&nbsp;than&nbsp;the&nbsp;number&nbsp;of&nbsp;sements<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#LineCollection">LineCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="LineCollection-__init__"><strong>__init__</strong></a>(self, segments, linewidths<font color="#909090">=None</font>, colors<font color="#909090">=None</font>, antialiaseds<font color="#909090">=None</font>, linestyle<font color="#909090">='solid'</font>, offsets<font color="#909090">=None</font>, transOffset<font color="#909090">=None</font>, norm<font color="#909090">=None</font>, cmap<font color="#909090">=None</font>)</dt><dd><tt>segments&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;(&nbsp;line0,&nbsp;line1,&nbsp;line2),&nbsp;where<br>
linen&nbsp;=&nbsp;(x0,&nbsp;y0),&nbsp;(x1,&nbsp;y1),&nbsp;...&nbsp;(xm,&nbsp;ym),&nbsp;or&nbsp;the<br>
equivalent&nbsp;numerix&nbsp;array&nbsp;with&nbsp;two&nbsp;columns.<br>
Each&nbsp;line&nbsp;can&nbsp;be&nbsp;a&nbsp;different&nbsp;length.<br>
&nbsp;<br>
colors&nbsp;must&nbsp;be&nbsp;a&nbsp;tuple&nbsp;of&nbsp;RGBA&nbsp;tuples&nbsp;(eg&nbsp;arbitrary&nbsp;color<br>
strings,&nbsp;etc,&nbsp;not&nbsp;allowed).<br>
&nbsp;<br>
antialiaseds&nbsp;must&nbsp;be&nbsp;a&nbsp;sequence&nbsp;of&nbsp;ones&nbsp;or&nbsp;zeros<br>
&nbsp;<br>
linestyles&nbsp;is&nbsp;a&nbsp;string&nbsp;or&nbsp;dash&nbsp;tuple.&nbsp;Legal&nbsp;string&nbsp;values&nbsp;are<br>
&nbsp;&nbsp;solid|dashed|dashdot|dotted.&nbsp;&nbsp;The&nbsp;dash&nbsp;tuple&nbsp;is&nbsp;(offset,&nbsp;onoffseq)<br>
&nbsp;&nbsp;where&nbsp;onoffseq&nbsp;is&nbsp;an&nbsp;even&nbsp;length&nbsp;tuple&nbsp;of&nbsp;on&nbsp;and&nbsp;off&nbsp;ink&nbsp;in&nbsp;points.<br>
&nbsp;<br>
If&nbsp;linewidths,&nbsp;colors,&nbsp;or&nbsp;antialiaseds&nbsp;is&nbsp;None,&nbsp;they&nbsp;default&nbsp;to<br>
their&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence&nbsp;form.<br>
&nbsp;<br>
If&nbsp;offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;not&nbsp;None,&nbsp;then<br>
offsets&nbsp;are&nbsp;transformed&nbsp;by&nbsp;transOffset&nbsp;and&nbsp;applied&nbsp;after<br>
the&nbsp;segments&nbsp;have&nbsp;been&nbsp;transformed&nbsp;to&nbsp;display&nbsp;coordinates.<br>
&nbsp;<br>
If&nbsp;offsets&nbsp;is&nbsp;not&nbsp;None&nbsp;but&nbsp;transOffset&nbsp;is&nbsp;None,&nbsp;then&nbsp;the<br>
offsets&nbsp;are&nbsp;added&nbsp;to&nbsp;the&nbsp;segments&nbsp;before&nbsp;any&nbsp;transformation.<br>
In&nbsp;this&nbsp;case,&nbsp;a&nbsp;single&nbsp;offset&nbsp;can&nbsp;be&nbsp;specified&nbsp;as&nbsp;offsets=(xo,yo),<br>
and&nbsp;this&nbsp;value&nbsp;will&nbsp;be<br>
added&nbsp;cumulatively&nbsp;to&nbsp;each&nbsp;successive&nbsp;segment,&nbsp;so&nbsp;as<br>
to&nbsp;produce&nbsp;a&nbsp;set&nbsp;of&nbsp;successively&nbsp;offset&nbsp;curves.<br>
&nbsp;<br>
norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
The&nbsp;use&nbsp;of&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a>&nbsp;is&nbsp;optional.&nbsp;&nbsp;If&nbsp;the&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
matrix&nbsp;_A&nbsp;is&nbsp;not&nbsp;None&nbsp;(ie&nbsp;a&nbsp;call&nbsp;to&nbsp;set_array&nbsp;has&nbsp;been&nbsp;made),&nbsp;at<br>
draw&nbsp;time&nbsp;a&nbsp;call&nbsp;to&nbsp;scalar&nbsp;mappable&nbsp;will&nbsp;be&nbsp;made&nbsp;to&nbsp;set&nbsp;the&nbsp;colors.</tt></dd></dl>

<dl><dt><a name="LineCollection-color"><strong>color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;<a href="#LineCollection-color">color</a>(s)&nbsp;of&nbsp;the&nbsp;line&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a<br>
matplotlib&nbsp;color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a<br>
sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will<br>
cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="LineCollection-get_colors"><strong>get_colors</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_dashes"><strong>get_dashes</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_verts"><strong>get_verts</strong></a>(self, dataTrans<font color="#909090">=None</font>)</dt><dd><tt>Return&nbsp;vertices&nbsp;in&nbsp;data&nbsp;coordinates.<br>
The&nbsp;calculation&nbsp;is&nbsp;incomplete&nbsp;in&nbsp;general;&nbsp;it&nbsp;is&nbsp;based<br>
on&nbsp;the&nbsp;segments&nbsp;or&nbsp;the&nbsp;offsets,&nbsp;whichever&nbsp;is&nbsp;using<br>
dataTrans&nbsp;as&nbsp;its&nbsp;transformation,&nbsp;so&nbsp;it&nbsp;does&nbsp;not&nbsp;take<br>
into&nbsp;account&nbsp;the&nbsp;combined&nbsp;effect&nbsp;of&nbsp;segments&nbsp;and&nbsp;offsets.</tt></dd></dl>

<dl><dt><a name="LineCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranpancies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;can&nbsp;be&nbsp;a<br>
float,&nbsp;in&nbsp;which&nbsp;case&nbsp;it&nbsp;is&nbsp;applied&nbsp;to&nbsp;the&nbsp;entire&nbsp;collection,<br>
or&nbsp;a&nbsp;sequence&nbsp;of&nbsp;floats<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="LineCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;<a href="#LineCollection-color">color</a>(s)&nbsp;of&nbsp;the&nbsp;line&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a<br>
matplotlib&nbsp;color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a<br>
sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will<br>
cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_linewidth"><strong>set_linewidth</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="LineCollection-set_segments"><strong>set_segments</strong></a>(self, segments)</dt></dl>

<dl><dt><a name="LineCollection-set_verts"><strong>set_verts</strong></a> = <a href="#LineCollection-set_segments">set_segments</a>(self, segments)</dt></dl>

<dl><dt><a name="LineCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>zorder</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="LineCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="LineCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="LineCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="LineCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="LineCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="LineCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="LineCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="LineCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="LineCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="LineCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="LineCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="LineCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="LineCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="LineCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="LineCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="LineCollection-add_observer"><strong>add_observer</strong></a>(self, mappable)</dt><dd><tt>whenever&nbsp;the&nbsp;norm,&nbsp;clim&nbsp;or&nbsp;cmap&nbsp;is&nbsp;set,&nbsp;call&nbsp;the&nbsp;notify<br>
instance&nbsp;of&nbsp;the&nbsp;mappable&nbsp;observer&nbsp;with&nbsp;self.<br>
&nbsp;<br>
This&nbsp;is&nbsp;designed&nbsp;to&nbsp;allow&nbsp;one&nbsp;image&nbsp;to&nbsp;follow&nbsp;changes&nbsp;in&nbsp;the<br>
cmap&nbsp;of&nbsp;another&nbsp;image</tt></dd></dl>

<dl><dt><a name="LineCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="LineCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;so&nbsp;observers&nbsp;can<br>
update&nbsp;state</tt></dd></dl>

<dl><dt><a name="LineCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="LineCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="LineCollection-notify"><strong>notify</strong></a>(self, mappable)</dt><dd><tt>If&nbsp;this&nbsp;is&nbsp;called&nbsp;then&nbsp;we&nbsp;are&nbsp;pegged&nbsp;to&nbsp;another&nbsp;mappable.<br>
Update&nbsp;the&nbsp;cmap,&nbsp;norm&nbsp;accordingly</tt></dd></dl>

<dl><dt><a name="LineCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numeric/numarray&nbsp;A</tt></dd></dl>

<dl><dt><a name="LineCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="LineCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data</tt></dd></dl>

<dl><dt><a name="LineCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="LineCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;or&nbsp;rgba&nbsp;array,&nbsp;return&nbsp;it&nbsp;unchanged.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="PatchCollection">class <strong>PatchCollection</strong></a>(<a href="matplotlib.collections.html#Collection">Collection</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Base&nbsp;class&nbsp;for&nbsp;filled&nbsp;regions&nbsp;such&nbsp;as&nbsp;<a href="#PolyCollection">PolyCollection</a>&nbsp;etc.<br>
It&nbsp;must&nbsp;be&nbsp;subclassed&nbsp;to&nbsp;be&nbsp;usable.<br>
&nbsp;<br>
kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidths=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiaseds&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;identity_transform(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;used&nbsp;to&nbsp;translate&nbsp;the&nbsp;patch&nbsp;after<br>
rendering&nbsp;(default&nbsp;no&nbsp;offsets)<br>
&nbsp;<br>
If&nbsp;any&nbsp;of&nbsp;edgecolors,&nbsp;facecolors,&nbsp;linewidths,&nbsp;antialiaseds&nbsp;are<br>
None,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;patch.*&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence<br>
form.<br>
&nbsp;<br>
The&nbsp;use&nbsp;of&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a>&nbsp;is&nbsp;optional.&nbsp;&nbsp;If&nbsp;the&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
matrix&nbsp;_A&nbsp;is&nbsp;not&nbsp;None&nbsp;(ie&nbsp;a&nbsp;call&nbsp;to&nbsp;set_array&nbsp;has&nbsp;been&nbsp;made),&nbsp;at<br>
draw&nbsp;time&nbsp;a&nbsp;call&nbsp;to&nbsp;scalar&nbsp;mappable&nbsp;will&nbsp;be&nbsp;made&nbsp;to&nbsp;set&nbsp;the&nbsp;face<br>
colors.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#PatchCollection">PatchCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="PatchCollection-__init__"><strong>__init__</strong></a>(self, edgecolors<font color="#909090">=None</font>, facecolors<font color="#909090">=None</font>, linewidths<font color="#909090">=None</font>, antialiaseds<font color="#909090">=None</font>, offsets<font color="#909090">=None</font>, transOffset<font color="#909090">=&lt;Affine object&gt;</font>, norm<font color="#909090">=None</font>, cmap<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="PatchCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranpancies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_linewidth"><strong>set_linewidth</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="PatchCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;facecolors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="PatchCollection-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>return&nbsp;seq&nbsp;of&nbsp;(x,y)&nbsp;in&nbsp;collection</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="PatchCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="PatchCollection-draw"><strong>draw</strong></a>(self, renderer, *args, **kwargs)</dt><dd><tt>Derived&nbsp;classes&nbsp;drawing&nbsp;method</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="PatchCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="PatchCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="PatchCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="PatchCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="PatchCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="PatchCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="PatchCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="PatchCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="PatchCollection-add_observer"><strong>add_observer</strong></a>(self, mappable)</dt><dd><tt>whenever&nbsp;the&nbsp;norm,&nbsp;clim&nbsp;or&nbsp;cmap&nbsp;is&nbsp;set,&nbsp;call&nbsp;the&nbsp;notify<br>
instance&nbsp;of&nbsp;the&nbsp;mappable&nbsp;observer&nbsp;with&nbsp;self.<br>
&nbsp;<br>
This&nbsp;is&nbsp;designed&nbsp;to&nbsp;allow&nbsp;one&nbsp;image&nbsp;to&nbsp;follow&nbsp;changes&nbsp;in&nbsp;the<br>
cmap&nbsp;of&nbsp;another&nbsp;image</tt></dd></dl>

<dl><dt><a name="PatchCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="PatchCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;so&nbsp;observers&nbsp;can<br>
update&nbsp;state</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="PatchCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="PatchCollection-notify"><strong>notify</strong></a>(self, mappable)</dt><dd><tt>If&nbsp;this&nbsp;is&nbsp;called&nbsp;then&nbsp;we&nbsp;are&nbsp;pegged&nbsp;to&nbsp;another&nbsp;mappable.<br>
Update&nbsp;the&nbsp;cmap,&nbsp;norm&nbsp;accordingly</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numeric/numarray&nbsp;A</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="PatchCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PatchCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;or&nbsp;rgba&nbsp;array,&nbsp;return&nbsp;it&nbsp;unchanged.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="PolyCollection">class <strong>PolyCollection</strong></a>(<a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#PolyCollection">PolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#PatchCollection">PatchCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="PolyCollection-__init__"><strong>__init__</strong></a>(self, verts, **kwargs)</dt><dd><tt>verts&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;(&nbsp;verts0,&nbsp;verts1,&nbsp;...)&nbsp;where&nbsp;verts_i&nbsp;is<br>
a&nbsp;sequence&nbsp;of&nbsp;xy&nbsp;tuples&nbsp;of&nbsp;vertices,&nbsp;or&nbsp;an&nbsp;equivalent<br>
numerix&nbsp;array&nbsp;of&nbsp;shape&nbsp;(nv,2).<br>
See&nbsp;<a href="#PatchCollection">PatchCollection</a>&nbsp;for&nbsp;kwargs.</tt></dd></dl>

<dl><dt><a name="PolyCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="PolyCollection-get_verts"><strong>get_verts</strong></a>(self, dataTrans<font color="#909090">=None</font>)</dt><dd><tt>Return&nbsp;vertices&nbsp;in&nbsp;data&nbsp;coordinates.<br>
The&nbsp;calculation&nbsp;is&nbsp;incomplete&nbsp;in&nbsp;general;&nbsp;it&nbsp;is&nbsp;based<br>
on&nbsp;the&nbsp;vertices&nbsp;or&nbsp;the&nbsp;offsets,&nbsp;whichever&nbsp;is&nbsp;using<br>
dataTrans&nbsp;as&nbsp;its&nbsp;transformation,&nbsp;so&nbsp;it&nbsp;does&nbsp;not&nbsp;take<br>
into&nbsp;account&nbsp;the&nbsp;combined&nbsp;effect&nbsp;of&nbsp;segments&nbsp;and&nbsp;offsets.</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_verts"><strong>set_verts</strong></a>(self, verts)</dt><dd><tt>This&nbsp;allows&nbsp;one&nbsp;to&nbsp;delay&nbsp;initialization&nbsp;of&nbsp;the&nbsp;vertices.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><a name="PolyCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranpancies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_linewidth"><strong>set_linewidth</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="PolyCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;facecolors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="PolyCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="PolyCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="PolyCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="PolyCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="PolyCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="PolyCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="PolyCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="PolyCollection-add_observer"><strong>add_observer</strong></a>(self, mappable)</dt><dd><tt>whenever&nbsp;the&nbsp;norm,&nbsp;clim&nbsp;or&nbsp;cmap&nbsp;is&nbsp;set,&nbsp;call&nbsp;the&nbsp;notify<br>
instance&nbsp;of&nbsp;the&nbsp;mappable&nbsp;observer&nbsp;with&nbsp;self.<br>
&nbsp;<br>
This&nbsp;is&nbsp;designed&nbsp;to&nbsp;allow&nbsp;one&nbsp;image&nbsp;to&nbsp;follow&nbsp;changes&nbsp;in&nbsp;the<br>
cmap&nbsp;of&nbsp;another&nbsp;image</tt></dd></dl>

<dl><dt><a name="PolyCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="PolyCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;so&nbsp;observers&nbsp;can<br>
update&nbsp;state</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="PolyCollection-notify"><strong>notify</strong></a>(self, mappable)</dt><dd><tt>If&nbsp;this&nbsp;is&nbsp;called&nbsp;then&nbsp;we&nbsp;are&nbsp;pegged&nbsp;to&nbsp;another&nbsp;mappable.<br>
Update&nbsp;the&nbsp;cmap,&nbsp;norm&nbsp;accordingly</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numeric/numarray&nbsp;A</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;or&nbsp;rgba&nbsp;array,&nbsp;return&nbsp;it&nbsp;unchanged.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="QuadMesh">class <strong>QuadMesh</strong></a>(<a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Class&nbsp;for&nbsp;the&nbsp;efficient&nbsp;drawing&nbsp;of&nbsp;a&nbsp;quadrilateral&nbsp;mesh.<br>
A&nbsp;quadrilateral&nbsp;mesh&nbsp;consists&nbsp;of&nbsp;a&nbsp;grid&nbsp;of&nbsp;vertices.&nbsp;The&nbsp;dimensions<br>
of&nbsp;this&nbsp;array&nbsp;are&nbsp;(meshWidth+1,&nbsp;meshHeight+1).&nbsp;Each&nbsp;vertex&nbsp;in<br>
the&nbsp;mesh&nbsp;has&nbsp;a&nbsp;different&nbsp;set&nbsp;of&nbsp;"mesh&nbsp;coordinates"&nbsp;representing<br>
its&nbsp;position&nbsp;in&nbsp;the&nbsp;topology&nbsp;of&nbsp;the&nbsp;mesh.&nbsp;For&nbsp;any&nbsp;values&nbsp;(m,&nbsp;n)<br>
such&nbsp;that&nbsp;0&nbsp;&lt;=&nbsp;m&nbsp;&lt;=&nbsp;meshWidth&nbsp;and&nbsp;0&nbsp;&lt;=&nbsp;n&nbsp;&lt;=&nbsp;meshHeight,&nbsp;the<br>
vertices&nbsp;at&nbsp;mesh&nbsp;coordinates&nbsp;(m,&nbsp;n),&nbsp;(m,&nbsp;n+1),&nbsp;(m+1,&nbsp;n+1),&nbsp;and<br>
(m+1,&nbsp;n)&nbsp;form&nbsp;one&nbsp;of&nbsp;the&nbsp;quadrilaterals&nbsp;in&nbsp;the&nbsp;mesh.&nbsp;There&nbsp;are<br>
thus&nbsp;(meshWidth&nbsp;*&nbsp;meshHeight)&nbsp;quadrilaterals&nbsp;in&nbsp;the&nbsp;mesh.<br>
The&nbsp;mesh&nbsp;need&nbsp;not&nbsp;be&nbsp;regular&nbsp;and&nbsp;the&nbsp;polygons&nbsp;need&nbsp;not&nbsp;be&nbsp;convex.<br>
A&nbsp;quadrilateral&nbsp;mesh&nbsp;is&nbsp;represented&nbsp;by&nbsp;a<br>
(2&nbsp;x&nbsp;((meshWidth&nbsp;+&nbsp;1)&nbsp;*&nbsp;(meshHeight&nbsp;+&nbsp;1)))&nbsp;Numeric&nbsp;array<br>
'coordinates'&nbsp;where&nbsp;each&nbsp;row&nbsp;is&nbsp;the&nbsp;X&nbsp;and&nbsp;Y&nbsp;coordinates&nbsp;of&nbsp;one<br>
of&nbsp;the&nbsp;vertices.<br>
To&nbsp;define&nbsp;the&nbsp;function&nbsp;that&nbsp;maps&nbsp;from&nbsp;a&nbsp;data&nbsp;point&nbsp;to<br>
its&nbsp;corresponding&nbsp;color,&nbsp;use&nbsp;the&nbsp;<a href="#QuadMesh-set_cmap">set_cmap</a>()&nbsp;function.<br>
Each&nbsp;of&nbsp;these&nbsp;arrays&nbsp;is&nbsp;indexed&nbsp;in&nbsp;row-major&nbsp;order&nbsp;by&nbsp;the<br>
mesh&nbsp;coordinates&nbsp;of&nbsp;the&nbsp;vertex&nbsp;(or&nbsp;the&nbsp;mesh&nbsp;coordinates&nbsp;of<br>
the&nbsp;lower&nbsp;left&nbsp;vertex,&nbsp;in&nbsp;the&nbsp;case&nbsp;of&nbsp;the&nbsp;colors).&nbsp;For&nbsp;example,<br>
the&nbsp;first&nbsp;entry&nbsp;in&nbsp;coordinates&nbsp;is&nbsp;the&nbsp;coordinates&nbsp;of&nbsp;the&nbsp;vertex<br>
at&nbsp;mesh&nbsp;coordinates&nbsp;(0,&nbsp;0),&nbsp;then&nbsp;the&nbsp;one&nbsp;at&nbsp;(0,&nbsp;1),&nbsp;then&nbsp;at<br>
(0,&nbsp;2)&nbsp;..&nbsp;(0,&nbsp;meshWidth),&nbsp;(1,&nbsp;0),&nbsp;(1,&nbsp;1),&nbsp;and&nbsp;so&nbsp;on.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#QuadMesh">QuadMesh</a></dd>
<dd><a href="matplotlib.collections.html#PatchCollection">PatchCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="QuadMesh-__init__"><strong>__init__</strong></a>(self, meshWidth, meshHeight, coordinates, showedges)</dt></dl>

<dl><dt><a name="QuadMesh-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="QuadMesh-get_verts"><strong>get_verts</strong></a>(self, dataTrans<font color="#909090">=None</font>)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><a name="QuadMesh-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranpancies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_linewidth"><strong>set_linewidth</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="QuadMesh-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;facecolors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="QuadMesh-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="QuadMesh-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="QuadMesh-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="QuadMesh-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="QuadMesh-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="QuadMesh-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="QuadMesh-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="QuadMesh-add_observer"><strong>add_observer</strong></a>(self, mappable)</dt><dd><tt>whenever&nbsp;the&nbsp;norm,&nbsp;clim&nbsp;or&nbsp;cmap&nbsp;is&nbsp;set,&nbsp;call&nbsp;the&nbsp;notify<br>
instance&nbsp;of&nbsp;the&nbsp;mappable&nbsp;observer&nbsp;with&nbsp;self.<br>
&nbsp;<br>
This&nbsp;is&nbsp;designed&nbsp;to&nbsp;allow&nbsp;one&nbsp;image&nbsp;to&nbsp;follow&nbsp;changes&nbsp;in&nbsp;the<br>
cmap&nbsp;of&nbsp;another&nbsp;image</tt></dd></dl>

<dl><dt><a name="QuadMesh-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="QuadMesh-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;so&nbsp;observers&nbsp;can<br>
update&nbsp;state</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="QuadMesh-notify"><strong>notify</strong></a>(self, mappable)</dt><dd><tt>If&nbsp;this&nbsp;is&nbsp;called&nbsp;then&nbsp;we&nbsp;are&nbsp;pegged&nbsp;to&nbsp;another&nbsp;mappable.<br>
Update&nbsp;the&nbsp;cmap,&nbsp;norm&nbsp;accordingly</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numeric/numarray&nbsp;A</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;or&nbsp;rgba&nbsp;array,&nbsp;return&nbsp;it&nbsp;unchanged.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="RegularPolyCollection">class <strong>RegularPolyCollection</strong></a>(<a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#PatchCollection">PatchCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="RegularPolyCollection-__init__"><strong>__init__</strong></a>(self, dpi, numsides, rotation<font color="#909090">=0</font>, sizes<font color="#909090">=(1,)</font>, **kwargs)</dt><dd><tt>Draw&nbsp;a&nbsp;regular&nbsp;polygon&nbsp;with&nbsp;numsides.<br>
&nbsp;<br>
*&nbsp;dpi&nbsp;is&nbsp;the&nbsp;figure&nbsp;dpi&nbsp;instance,&nbsp;and&nbsp;is&nbsp;required&nbsp;to&nbsp;do&nbsp;the<br>
&nbsp;&nbsp;area&nbsp;scaling.<br>
&nbsp;<br>
*&nbsp;numsides:&nbsp;the&nbsp;number&nbsp;of&nbsp;sides&nbsp;of&nbsp;the&nbsp;polygon<br>
&nbsp;<br>
*&nbsp;sizes&nbsp;gives&nbsp;the&nbsp;area&nbsp;of&nbsp;the&nbsp;circle&nbsp;circumscribing&nbsp;the<br>
&nbsp;&nbsp;regular&nbsp;polygon&nbsp;in&nbsp;points^2<br>
&nbsp;<br>
*&nbsp;rotation&nbsp;is&nbsp;the&nbsp;rotation&nbsp;of&nbsp;the&nbsp;polygon&nbsp;in&nbsp;radians<br>
&nbsp;<br>
kwargs:&nbsp;See&nbsp;<a href="#PatchCollection">PatchCollection</a>&nbsp;for&nbsp;more&nbsp;details<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;offsets&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;x,y&nbsp;tuples&nbsp;that&nbsp;give&nbsp;the&nbsp;centers&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;polygon&nbsp;in&nbsp;data&nbsp;coordinates<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;transOffset&nbsp;is&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;to<br>
&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;the&nbsp;centers&nbsp;onto&nbsp;the&nbsp;canvas.<br>
&nbsp;<br>
Example:&nbsp;see&nbsp;examples/dynamic_collection.py&nbsp;for&nbsp;complete&nbsp;example<br>
&nbsp;<br>
offsets&nbsp;=&nbsp;nx.mlab.rand(20,2)<br>
facecolors&nbsp;=&nbsp;[cm.jet(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;nx.mlab.rand(20)]<br>
black&nbsp;=&nbsp;(0,0,0,1)<br>
&nbsp;<br>
collection&nbsp;=&nbsp;<a href="#RegularPolyCollection">RegularPolyCollection</a>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;fig.dpi,<br>
&nbsp;&nbsp;&nbsp;&nbsp;numsides=5,&nbsp;#&nbsp;a&nbsp;pentagon<br>
&nbsp;&nbsp;&nbsp;&nbsp;rotation=0,<br>
&nbsp;&nbsp;&nbsp;&nbsp;sizes=(50,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;facecolors&nbsp;=&nbsp;facecolors,<br>
&nbsp;&nbsp;&nbsp;&nbsp;edgecolors&nbsp;=&nbsp;(black,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;linewidths&nbsp;=&nbsp;(1,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;offsets,<br>
&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;ax.transData,<br>
&nbsp;&nbsp;&nbsp;&nbsp;)</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_verts"><strong>get_verts</strong></a>(self, dataTrans<font color="#909090">=None</font>)</dt><dd><tt>Return&nbsp;vertices&nbsp;in&nbsp;data&nbsp;coordinates.<br>
The&nbsp;calculation&nbsp;is&nbsp;incomplete;&nbsp;it&nbsp;uses&nbsp;only<br>
the&nbsp;offsets,&nbsp;and&nbsp;only&nbsp;if&nbsp;_transOffset&nbsp;is&nbsp;dataTrans.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><a name="RegularPolyCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranpancies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_linewidth"><strong>set_linewidth</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;facecolors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="RegularPolyCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="RegularPolyCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="RegularPolyCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="RegularPolyCollection-add_observer"><strong>add_observer</strong></a>(self, mappable)</dt><dd><tt>whenever&nbsp;the&nbsp;norm,&nbsp;clim&nbsp;or&nbsp;cmap&nbsp;is&nbsp;set,&nbsp;call&nbsp;the&nbsp;notify<br>
instance&nbsp;of&nbsp;the&nbsp;mappable&nbsp;observer&nbsp;with&nbsp;self.<br>
&nbsp;<br>
This&nbsp;is&nbsp;designed&nbsp;to&nbsp;allow&nbsp;one&nbsp;image&nbsp;to&nbsp;follow&nbsp;changes&nbsp;in&nbsp;the<br>
cmap&nbsp;of&nbsp;another&nbsp;image</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;so&nbsp;observers&nbsp;can<br>
update&nbsp;state</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-notify"><strong>notify</strong></a>(self, mappable)</dt><dd><tt>If&nbsp;this&nbsp;is&nbsp;called&nbsp;then&nbsp;we&nbsp;are&nbsp;pegged&nbsp;to&nbsp;another&nbsp;mappable.<br>
Update&nbsp;the&nbsp;cmap,&nbsp;norm&nbsp;accordingly</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numeric/numarray&nbsp;A</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;or&nbsp;rgba&nbsp;array,&nbsp;return&nbsp;it&nbsp;unchanged.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="StarPolygonCollection">class <strong>StarPolygonCollection</strong></a>(<a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#StarPolygonCollection">StarPolygonCollection</a></dd>
<dd><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#PatchCollection">PatchCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="StarPolygonCollection-__init__"><strong>__init__</strong></a>(self, dpi, numsides, rotation<font color="#909090">=0</font>, sizes<font color="#909090">=(1,)</font>, **kwargs)</dt><dd><tt>Draw&nbsp;a&nbsp;regular&nbsp;star&nbsp;like&nbsp;Polygone&nbsp;with&nbsp;numsides.<br>
&nbsp;<br>
*&nbsp;dpi&nbsp;is&nbsp;the&nbsp;figure&nbsp;dpi&nbsp;instance,&nbsp;and&nbsp;is&nbsp;required&nbsp;to&nbsp;do&nbsp;the<br>
&nbsp;&nbsp;area&nbsp;scaling.<br>
&nbsp;<br>
*&nbsp;numsides:&nbsp;the&nbsp;number&nbsp;of&nbsp;sides&nbsp;of&nbsp;the&nbsp;polygon<br>
&nbsp;<br>
*&nbsp;sizes&nbsp;gives&nbsp;the&nbsp;area&nbsp;of&nbsp;the&nbsp;circle&nbsp;circumscribing&nbsp;the<br>
&nbsp;&nbsp;regular&nbsp;polygon&nbsp;in&nbsp;points^2<br>
&nbsp;<br>
*&nbsp;rotation&nbsp;is&nbsp;the&nbsp;rotation&nbsp;of&nbsp;the&nbsp;polygon&nbsp;in&nbsp;radians<br>
&nbsp;<br>
kwargs:&nbsp;See&nbsp;<a href="#PatchCollection">PatchCollection</a>&nbsp;for&nbsp;more&nbsp;details<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;offsets&nbsp;are&nbsp;a&nbsp;sequence&nbsp;of&nbsp;x,y&nbsp;tuples&nbsp;that&nbsp;give&nbsp;the&nbsp;centers&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;polygon&nbsp;in&nbsp;data&nbsp;coordinates<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;transOffset&nbsp;is&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;to<br>
&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;the&nbsp;centers&nbsp;onto&nbsp;the&nbsp;canvas.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>:<br>
<dl><dt><a name="StarPolygonCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_verts"><strong>get_verts</strong></a>(self, dataTrans<font color="#909090">=None</font>)</dt><dd><tt>Return&nbsp;vertices&nbsp;in&nbsp;data&nbsp;coordinates.<br>
The&nbsp;calculation&nbsp;is&nbsp;incomplete;&nbsp;it&nbsp;uses&nbsp;only<br>
the&nbsp;offsets,&nbsp;and&nbsp;only&nbsp;if&nbsp;_transOffset&nbsp;is&nbsp;dataTrans.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><a name="StarPolygonCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranpancies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_linewidth"><strong>set_linewidth</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;facecolors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#PatchCollection">PatchCollection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="StarPolygonCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="StarPolygonCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="StarPolygonCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="StarPolygonCollection-add_observer"><strong>add_observer</strong></a>(self, mappable)</dt><dd><tt>whenever&nbsp;the&nbsp;norm,&nbsp;clim&nbsp;or&nbsp;cmap&nbsp;is&nbsp;set,&nbsp;call&nbsp;the&nbsp;notify<br>
instance&nbsp;of&nbsp;the&nbsp;mappable&nbsp;observer&nbsp;with&nbsp;self.<br>
&nbsp;<br>
This&nbsp;is&nbsp;designed&nbsp;to&nbsp;allow&nbsp;one&nbsp;image&nbsp;to&nbsp;follow&nbsp;changes&nbsp;in&nbsp;the<br>
cmap&nbsp;of&nbsp;another&nbsp;image</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;so&nbsp;observers&nbsp;can<br>
update&nbsp;state</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-notify"><strong>notify</strong></a>(self, mappable)</dt><dd><tt>If&nbsp;this&nbsp;is&nbsp;called&nbsp;then&nbsp;we&nbsp;are&nbsp;pegged&nbsp;to&nbsp;another&nbsp;mappable.<br>
Update&nbsp;the&nbsp;cmap,&nbsp;norm&nbsp;accordingly</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numeric/numarray&nbsp;A</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;or&nbsp;rgba&nbsp;array,&nbsp;return&nbsp;it&nbsp;unchanged.</tt></dd></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>colorConverter</strong> = &lt;matplotlib.colors.ColorConverter instance&gt;<br>
<strong>cos</strong> = &lt;ufunc 'cos'&gt;<br>
<strong>newaxis</strong> = None<br>
<strong>pi</strong> = 3.1415926535897931<br>
<strong>rcParams</strong> = {'axes.axisbelow': False, 'axes.edgecolor': 'k', 'axes.facecolor': 'w', 'axes.grid': False, 'axes.hold': True, 'axes.labelcolor': 'k', 'axes.labelsize': 'medium', 'axes.linewidth': 1.0, 'axes.titlesize': 'large', 'backend': 'GTKAgg', ...}<br>
<strong>sin</strong> = &lt;ufunc 'sin'&gt;<br>
<strong>sqrt</strong> = &lt;ufunc 'sqrt'&gt;<br>
<strong>verbose</strong> = &lt;matplotlib.Verbose instance&gt;</td></tr></table>
@footer@