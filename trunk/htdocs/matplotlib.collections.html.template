@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.collections</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/collections.py">/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/collections.py</a></font></td></tr></table>
    <p><tt>Classes&nbsp;for&nbsp;the&nbsp;efficient&nbsp;drawing&nbsp;of&nbsp;large&nbsp;collections&nbsp;of&nbsp;objects&nbsp;that<br>
share&nbsp;most&nbsp;properties,&nbsp;eg&nbsp;a&nbsp;large&nbsp;number&nbsp;of&nbsp;line&nbsp;segments&nbsp;or&nbsp;polygons<br>
&nbsp;<br>
The&nbsp;classes&nbsp;are&nbsp;not&nbsp;meant&nbsp;to&nbsp;be&nbsp;as&nbsp;flexible&nbsp;as&nbsp;their&nbsp;single&nbsp;element<br>
counterparts&nbsp;(eg&nbsp;you&nbsp;may&nbsp;not&nbsp;be&nbsp;able&nbsp;to&nbsp;select&nbsp;all&nbsp;line&nbsp;styles)&nbsp;but<br>
they&nbsp;are&nbsp;meant&nbsp;to&nbsp;be&nbsp;fast&nbsp;for&nbsp;common&nbsp;use&nbsp;cases&nbsp;(eg&nbsp;a&nbsp;bunch&nbsp;of&nbsp;solid<br>
line&nbsp;segemnts)</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib.colors.html">matplotlib.colors</a><br>
<a href="matplotlib.artist.html">matplotlib.artist</a><br>
<a href="matplotlib.backend_bases.html">matplotlib.backend_bases</a><br>
</td><td width="25%" valign=top><a href="matplotlib.cbook.html">matplotlib.cbook</a><br>
<a href="matplotlib.cm.html">matplotlib.cm</a><br>
<a href="math.html">math</a><br>
</td><td width="25%" valign=top><a href="matplotlib.path.html">matplotlib.path</a><br>
<a href="matplotlib.html">matplotlib</a><br>
<a href="numpy.html">numpy</a><br>
</td><td width="25%" valign=top><a href="matplotlib.transforms.html">matplotlib.transforms</a><br>
<a href="warnings.html">warnings</a><br>
</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>(<a href="__builtin__.html#object">__builtin__.object</a>)
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#Collection">Collection</a>(<a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#LineCollection">LineCollection</a>(<a href="matplotlib.collections.html#Collection">Collection</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#PolyCollection">PolyCollection</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#BrokenBarHCollection">BrokenBarHCollection</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#QuadMesh">QuadMesh</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#AsteriskPolygonCollection">AsteriskPolygonCollection</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#StarPolygonCollection">StarPolygonCollection</a>
</font></dt></dl>
</dd>
</dl>
</dd>
</dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#Collection">Collection</a>(<a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#LineCollection">LineCollection</a>(<a href="matplotlib.collections.html#Collection">Collection</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#PolyCollection">PolyCollection</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#BrokenBarHCollection">BrokenBarHCollection</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#QuadMesh">QuadMesh</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.collections.html#AsteriskPolygonCollection">AsteriskPolygonCollection</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.collections.html#StarPolygonCollection">StarPolygonCollection</a>
</font></dt></dl>
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="AsteriskPolygonCollection">class <strong>AsteriskPolygonCollection</strong></a>(<a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#AsteriskPolygonCollection">AsteriskPolygonCollection</a></dd>
<dd><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods inherited from <a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>:<br>
<dl><dt><a name="AsteriskPolygonCollection-__init__"><strong>__init__</strong></a>(self, numsides, rotation<font color="#909090">=0</font>, sizes<font color="#909090">=(1,)</font>, **kwargs)</dt><dd><tt>Draw&nbsp;a&nbsp;regular&nbsp;polygon&nbsp;with&nbsp;numsides.<br>
&nbsp;<br>
*&nbsp;dpi&nbsp;is&nbsp;the&nbsp;figure&nbsp;dpi&nbsp;instance,&nbsp;and&nbsp;is&nbsp;required&nbsp;to&nbsp;do&nbsp;the<br>
&nbsp;&nbsp;area&nbsp;scaling.<br>
&nbsp;<br>
*&nbsp;numsides:&nbsp;the&nbsp;number&nbsp;of&nbsp;sides&nbsp;of&nbsp;the&nbsp;polygon<br>
&nbsp;<br>
*&nbsp;sizes&nbsp;gives&nbsp;the&nbsp;area&nbsp;of&nbsp;the&nbsp;circle&nbsp;circumscribing&nbsp;the<br>
&nbsp;&nbsp;regular&nbsp;polygon&nbsp;in&nbsp;points^2<br>
&nbsp;<br>
*&nbsp;rotation&nbsp;is&nbsp;the&nbsp;rotation&nbsp;of&nbsp;the&nbsp;polygon&nbsp;in&nbsp;radians<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Valid&nbsp;<a href="#Collection">Collection</a>&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidths=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiaseds&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;transforms.IdentityTransform(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;cm.<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;used&nbsp;to&nbsp;translate&nbsp;the&nbsp;patch&nbsp;after<br>
&nbsp;&nbsp;&nbsp;&nbsp;rendering&nbsp;(default&nbsp;no&nbsp;offsets)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;any&nbsp;of&nbsp;edgecolors,&nbsp;facecolors,&nbsp;linewidths,&nbsp;antialiaseds&nbsp;are<br>
&nbsp;&nbsp;&nbsp;&nbsp;None,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;patch.*&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;form.<br>
&nbsp;<br>
&nbsp;<br>
Example:&nbsp;see&nbsp;examples/dynamic_collection.py&nbsp;for&nbsp;complete&nbsp;example<br>
&nbsp;<br>
offsets&nbsp;=&nbsp;np.random.rand(20,2)<br>
facecolors&nbsp;=&nbsp;[cm.jet(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;np.random.rand(20)]<br>
black&nbsp;=&nbsp;(0,0,0,1)<br>
&nbsp;<br>
collection&nbsp;=&nbsp;<a href="#RegularPolyCollection">RegularPolyCollection</a>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;numsides=5,&nbsp;#&nbsp;a&nbsp;pentagon<br>
&nbsp;&nbsp;&nbsp;&nbsp;rotation=0,<br>
&nbsp;&nbsp;&nbsp;&nbsp;sizes=(50,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;facecolors&nbsp;=&nbsp;facecolors,<br>
&nbsp;&nbsp;&nbsp;&nbsp;edgecolors&nbsp;=&nbsp;(black,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;linewidths&nbsp;=&nbsp;(1,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;offsets,<br>
&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;ax.transData,<br>
&nbsp;&nbsp;&nbsp;&nbsp;)</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_paths"><strong>get_paths</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="AsteriskPolygonCollection-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_dashes"><strong>get_dashes</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_facecolors"><strong>get_facecolors</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_linestyle"><strong>get_linestyle</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_linewidth"><strong>get_linewidth</strong></a> = get_linewidths(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_antialiaseds"><strong>set_antialiaseds</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_dashes"><strong>set_dashes</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_edgecolors"><strong>set_edgecolors</strong></a> = set_edgecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_facecolors"><strong>set_facecolors</strong></a> = set_facecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_linestyle"><strong>set_linestyle</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_linewidth"><strong>set_linewidth</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_lw"><strong>set_lw</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="AsteriskPolygonCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#AsteriskPolygonCollection-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="AsteriskPolygonCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="AsteriskPolygonCollection-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="AsteriskPolygonCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="BrokenBarHCollection">class <strong>BrokenBarHCollection</strong></a>(<a href="matplotlib.collections.html#PolyCollection">PolyCollection</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;colleciton&nbsp;of&nbsp;horizontal&nbsp;bars&nbsp;spanning&nbsp;yrange&nbsp;with&nbsp;a&nbsp;sequence&nbsp;of<br>
xranges<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#BrokenBarHCollection">BrokenBarHCollection</a></dd>
<dd><a href="matplotlib.collections.html#PolyCollection">PolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="BrokenBarHCollection-__init__"><strong>__init__</strong></a>(self, xranges, yrange, **kwargs)</dt><dd><tt>xranges&nbsp;:&nbsp;sequence&nbsp;of&nbsp;(xmin,&nbsp;xwidth)<br>
yrange&nbsp;&nbsp;:&nbsp;ymin,&nbsp;ywidth<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Valid&nbsp;<a href="#Collection">Collection</a>&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidths=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiaseds&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;transforms.IdentityTransform(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;cm.<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;used&nbsp;to&nbsp;translate&nbsp;the&nbsp;patch&nbsp;after<br>
&nbsp;&nbsp;&nbsp;&nbsp;rendering&nbsp;(default&nbsp;no&nbsp;offsets)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;any&nbsp;of&nbsp;edgecolors,&nbsp;facecolors,&nbsp;linewidths,&nbsp;antialiaseds&nbsp;are<br>
&nbsp;&nbsp;&nbsp;&nbsp;None,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;patch.*&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;form.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#PolyCollection">PolyCollection</a>:<br>
<dl><dt><a name="BrokenBarHCollection-get_paths"><strong>get_paths</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-set_verts"><strong>set_verts</strong></a>(self, verts)</dt><dd><tt>This&nbsp;allows&nbsp;one&nbsp;to&nbsp;delay&nbsp;initialization&nbsp;of&nbsp;the&nbsp;vertices.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="BrokenBarHCollection-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_dashes"><strong>get_dashes</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_facecolors"><strong>get_facecolors</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_linestyle"><strong>get_linestyle</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_linewidth"><strong>get_linewidth</strong></a> = get_linewidths(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_antialiaseds"><strong>set_antialiaseds</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_dashes"><strong>set_dashes</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_edgecolors"><strong>set_edgecolors</strong></a> = set_edgecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_facecolors"><strong>set_facecolors</strong></a> = set_facecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_linestyle"><strong>set_linestyle</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_linewidth"><strong>set_linewidth</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_lw"><strong>set_lw</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="BrokenBarHCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#BrokenBarHCollection-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="BrokenBarHCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="BrokenBarHCollection-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="BrokenBarHCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Collection">class <strong>Collection</strong></a>(<a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Base&nbsp;class&nbsp;for&nbsp;Collections.&nbsp;&nbsp;Must&nbsp;be&nbsp;subclassed&nbsp;to&nbsp;be&nbsp;usable.<br>
&nbsp;<br>
All&nbsp;properties&nbsp;in&nbsp;a&nbsp;collection&nbsp;must&nbsp;be&nbsp;sequences&nbsp;or&nbsp;scalars;<br>
if&nbsp;scalars,&nbsp;they&nbsp;will&nbsp;be&nbsp;converted&nbsp;to&nbsp;sequences.&nbsp;&nbsp;The<br>
property&nbsp;of&nbsp;the&nbsp;ith&nbsp;element&nbsp;of&nbsp;the&nbsp;collection&nbsp;is&nbsp;the<br>
&nbsp;<br>
&nbsp;&nbsp;prop[i&nbsp;%&nbsp;len(props)].<br>
&nbsp;<br>
kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidths=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiaseds&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;transforms.IdentityTransform(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;cm.<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;used&nbsp;to&nbsp;translate&nbsp;the&nbsp;patch&nbsp;after<br>
rendering&nbsp;(default&nbsp;no&nbsp;offsets)<br>
&nbsp;<br>
If&nbsp;any&nbsp;of&nbsp;edgecolors,&nbsp;facecolors,&nbsp;linewidths,&nbsp;antialiaseds&nbsp;are<br>
None,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;patch.*&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence<br>
form.<br>
&nbsp;<br>
The&nbsp;use&nbsp;of&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a>&nbsp;is&nbsp;optional.&nbsp;&nbsp;If&nbsp;the&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
matrix&nbsp;_A&nbsp;is&nbsp;not&nbsp;None&nbsp;(ie&nbsp;a&nbsp;call&nbsp;to&nbsp;set_array&nbsp;has&nbsp;been&nbsp;made),&nbsp;at<br>
draw&nbsp;time&nbsp;a&nbsp;call&nbsp;to&nbsp;scalar&nbsp;mappable&nbsp;will&nbsp;be&nbsp;made&nbsp;to&nbsp;set&nbsp;the&nbsp;face<br>
colors.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Collection-__init__"><strong>__init__</strong></a>(self, edgecolors<font color="#909090">=None</font>, facecolors<font color="#909090">=None</font>, linewidths<font color="#909090">=None</font>, linestyles<font color="#909090">='solid'</font>, antialiaseds<font color="#909090">=None</font>, offsets<font color="#909090">=None</font>, transOffset<font color="#909090">=None</font>, norm<font color="#909090">=None</font>, cmap<font color="#909090">=None</font>, pickradius<font color="#909090">=5.0</font>, **kwargs)</dt><dd><tt>Create&nbsp;a&nbsp;<a href="#Collection">Collection</a><br>
&nbsp;<br>
%(<a href="#Collection">Collection</a>)s</tt></dd></dl>

<dl><dt><a name="Collection-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="Collection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Collection-get_dashes"><strong>get_dashes</strong></a> = <a href="#Collection-get_linestyles">get_linestyles</a>(self)</dt></dl>

<dl><dt><a name="Collection-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="Collection-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_facecolors"><strong>get_facecolors</strong></a> = <a href="#Collection-get_facecolor">get_facecolor</a>(self)</dt></dl>

<dl><dt><a name="Collection-get_linestyle"><strong>get_linestyle</strong></a> = <a href="#Collection-get_linestyles">get_linestyles</a>(self)</dt></dl>

<dl><dt><a name="Collection-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_linewidth"><strong>get_linewidth</strong></a> = <a href="#Collection-get_linewidths">get_linewidths</a>(self)</dt></dl>

<dl><dt><a name="Collection-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_paths"><strong>get_paths</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Collection-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="Collection-set_antialiaseds"><strong>set_antialiaseds</strong></a> = <a href="#Collection-set_antialiased">set_antialiased</a>(self, aa)</dt></dl>

<dl><dt><a name="Collection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="Collection-set_dashes"><strong>set_dashes</strong></a> = <a href="#Collection-set_linestyles">set_linestyles</a>(self, ls)</dt></dl>

<dl><dt><a name="Collection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="Collection-set_edgecolors"><strong>set_edgecolors</strong></a> = <a href="#Collection-set_edgecolor">set_edgecolor</a>(self, c)</dt></dl>

<dl><dt><a name="Collection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="Collection-set_facecolors"><strong>set_facecolors</strong></a> = <a href="#Collection-set_facecolor">set_facecolor</a>(self, c)</dt></dl>

<dl><dt><a name="Collection-set_linestyle"><strong>set_linestyle</strong></a> = <a href="#Collection-set_linestyles">set_linestyles</a>(self, ls)</dt></dl>

<dl><dt><a name="Collection-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="Collection-set_linewidth"><strong>set_linewidth</strong></a> = <a href="#Collection-set_linewidths">set_linewidths</a>(self, lw)</dt></dl>

<dl><dt><a name="Collection-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="Collection-set_lw"><strong>set_lw</strong></a> = <a href="#Collection-set_linewidths">set_linewidths</a>(self, lw)</dt></dl>

<dl><dt><a name="Collection-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="Collection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Collection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Collection-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Collection-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Collection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Collection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Collection-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="Collection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Collection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Collection-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Collection-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Collection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Collection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Collection-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="Collection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Collection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Collection-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Collection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Collection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Collection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Collection-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#Collection-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Collection-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Collection-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Collection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Collection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Collection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="Collection-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Collection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Collection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Collection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Collection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Collection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="Collection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="Collection-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="Collection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="Collection-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="Collection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="Collection-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="Collection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="Collection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="Collection-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="Collection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="Collection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="Collection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="Collection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="Collection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Collection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="LineCollection">class <strong>LineCollection</strong></a>(<a href="matplotlib.collections.html#Collection">Collection</a>, <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>All&nbsp;parameters&nbsp;must&nbsp;be&nbsp;sequences&nbsp;or&nbsp;scalars;&nbsp;if&nbsp;scalars,&nbsp;they&nbsp;will<br>
be&nbsp;converted&nbsp;to&nbsp;sequences.&nbsp;&nbsp;The&nbsp;property&nbsp;of&nbsp;the&nbsp;ith&nbsp;line<br>
segment&nbsp;is&nbsp;the&nbsp;prop[i&nbsp;%&nbsp;len(props)],&nbsp;ie&nbsp;the&nbsp;properties&nbsp;cycle&nbsp;if<br>
the&nbsp;len&nbsp;of&nbsp;props&nbsp;is&nbsp;less&nbsp;than&nbsp;the&nbsp;number&nbsp;of&nbsp;sements<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#LineCollection">LineCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="LineCollection-__init__"><strong>__init__</strong></a>(self, segments, linewidths<font color="#909090">=None</font>, colors<font color="#909090">=None</font>, antialiaseds<font color="#909090">=None</font>, linestyles<font color="#909090">='solid'</font>, offsets<font color="#909090">=None</font>, transOffset<font color="#909090">=None</font>, norm<font color="#909090">=None</font>, cmap<font color="#909090">=None</font>, pickradius<font color="#909090">=5</font>, **kwargs)</dt><dd><tt>segments&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;(&nbsp;line0,&nbsp;line1,&nbsp;line2),&nbsp;where<br>
linen&nbsp;=&nbsp;(x0,&nbsp;y0),&nbsp;(x1,&nbsp;y1),&nbsp;...&nbsp;(xm,&nbsp;ym),&nbsp;or&nbsp;the<br>
equivalent&nbsp;numpy&nbsp;array&nbsp;with&nbsp;two&nbsp;columns.<br>
Each&nbsp;line&nbsp;can&nbsp;be&nbsp;a&nbsp;different&nbsp;length.<br>
&nbsp;<br>
colors&nbsp;must&nbsp;be&nbsp;a&nbsp;tuple&nbsp;of&nbsp;RGBA&nbsp;tuples&nbsp;(eg&nbsp;arbitrary&nbsp;color<br>
strings,&nbsp;etc,&nbsp;not&nbsp;allowed).<br>
&nbsp;<br>
antialiaseds&nbsp;must&nbsp;be&nbsp;a&nbsp;sequence&nbsp;of&nbsp;ones&nbsp;or&nbsp;zeros<br>
&nbsp;<br>
linestyles&nbsp;is&nbsp;a&nbsp;string&nbsp;or&nbsp;dash&nbsp;tuple.&nbsp;Legal&nbsp;string&nbsp;values&nbsp;are<br>
&nbsp;&nbsp;solid|dashed|dashdot|dotted.&nbsp;&nbsp;The&nbsp;dash&nbsp;tuple&nbsp;is&nbsp;(offset,&nbsp;onoffseq)<br>
&nbsp;&nbsp;where&nbsp;onoffseq&nbsp;is&nbsp;an&nbsp;even&nbsp;length&nbsp;tuple&nbsp;of&nbsp;on&nbsp;and&nbsp;off&nbsp;ink&nbsp;in&nbsp;points.<br>
&nbsp;<br>
If&nbsp;linewidths,&nbsp;colors_,&nbsp;or&nbsp;antialiaseds&nbsp;is&nbsp;None,&nbsp;they&nbsp;default&nbsp;to<br>
their&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence&nbsp;form.<br>
&nbsp;<br>
If&nbsp;offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;not&nbsp;None,&nbsp;then<br>
offsets&nbsp;are&nbsp;transformed&nbsp;by&nbsp;transOffset&nbsp;and&nbsp;applied&nbsp;after<br>
the&nbsp;segments&nbsp;have&nbsp;been&nbsp;transformed&nbsp;to&nbsp;display&nbsp;coordinates.<br>
&nbsp;<br>
If&nbsp;offsets&nbsp;is&nbsp;not&nbsp;None&nbsp;but&nbsp;transOffset&nbsp;is&nbsp;None,&nbsp;then&nbsp;the<br>
offsets&nbsp;are&nbsp;added&nbsp;to&nbsp;the&nbsp;segments&nbsp;before&nbsp;any&nbsp;transformation.<br>
In&nbsp;this&nbsp;case,&nbsp;a&nbsp;single&nbsp;offset&nbsp;can&nbsp;be&nbsp;specified&nbsp;as&nbsp;offsets=(xo,yo),<br>
and&nbsp;this&nbsp;value&nbsp;will&nbsp;be<br>
added&nbsp;cumulatively&nbsp;to&nbsp;each&nbsp;successive&nbsp;segment,&nbsp;so&nbsp;as<br>
to&nbsp;produce&nbsp;a&nbsp;set&nbsp;of&nbsp;successively&nbsp;offset&nbsp;curves.<br>
&nbsp;<br>
norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
pickradius&nbsp;is&nbsp;the&nbsp;tolerance&nbsp;for&nbsp;mouse&nbsp;clicks&nbsp;picking&nbsp;a&nbsp;line.&nbsp;&nbsp;The<br>
default&nbsp;is&nbsp;5&nbsp;pt.<br>
&nbsp;<br>
The&nbsp;use&nbsp;of&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a>&nbsp;is&nbsp;optional.&nbsp;&nbsp;If&nbsp;the&nbsp;<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
matrix&nbsp;_A&nbsp;is&nbsp;not&nbsp;None&nbsp;(ie&nbsp;a&nbsp;call&nbsp;to&nbsp;set_array&nbsp;has&nbsp;been&nbsp;made),&nbsp;at<br>
draw&nbsp;time&nbsp;a&nbsp;call&nbsp;to&nbsp;scalar&nbsp;mappable&nbsp;will&nbsp;be&nbsp;made&nbsp;to&nbsp;set&nbsp;the&nbsp;colors.</tt></dd></dl>

<dl><dt><a name="LineCollection-color"><strong>color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;<a href="#LineCollection-color">color</a>(s)&nbsp;of&nbsp;the&nbsp;line&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a<br>
matplotlib&nbsp;color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a<br>
sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will<br>
cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-get_color"><strong>get_color</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_colors"><strong>get_colors</strong></a> = <a href="#LineCollection-get_color">get_color</a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_paths"><strong>get_paths</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;<a href="#LineCollection-color">color</a>(s)&nbsp;of&nbsp;the&nbsp;line&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a<br>
matplotlib&nbsp;color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a<br>
sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will<br>
cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-set_segments"><strong>set_segments</strong></a>(self, segments)</dt></dl>

<dl><dt><a name="LineCollection-set_verts"><strong>set_verts</strong></a> = <a href="#LineCollection-set_segments">set_segments</a>(self, segments)</dt></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>zorder</strong> = 2</dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="LineCollection-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="LineCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="LineCollection-get_dashes"><strong>get_dashes</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="LineCollection-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="LineCollection-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_facecolors"><strong>get_facecolors</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="LineCollection-get_linestyle"><strong>get_linestyle</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="LineCollection-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_linewidth"><strong>get_linewidth</strong></a> = get_linewidths(self)</dt></dl>

<dl><dt><a name="LineCollection-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="LineCollection-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="LineCollection-set_antialiaseds"><strong>set_antialiaseds</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="LineCollection-set_dashes"><strong>set_dashes</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-set_edgecolors"><strong>set_edgecolors</strong></a> = set_edgecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-set_facecolors"><strong>set_facecolors</strong></a> = set_facecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="LineCollection-set_linestyle"><strong>set_linestyle</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_linewidth"><strong>set_linewidth</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="LineCollection-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="LineCollection-set_lw"><strong>set_lw</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="LineCollection-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="LineCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="LineCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="LineCollection-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="LineCollection-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="LineCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="LineCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="LineCollection-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="LineCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="LineCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="LineCollection-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="LineCollection-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="LineCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="LineCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="LineCollection-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="LineCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="LineCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="LineCollection-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="LineCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="LineCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="LineCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="LineCollection-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#LineCollection-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="LineCollection-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="LineCollection-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="LineCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="LineCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="LineCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="LineCollection-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="LineCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="LineCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="LineCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="LineCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="LineCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="LineCollection-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="LineCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="LineCollection-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="LineCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="LineCollection-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="LineCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="LineCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="LineCollection-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="LineCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="LineCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="LineCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="LineCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="LineCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="LineCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="PolyCollection">class <strong>PolyCollection</strong></a>(<a href="matplotlib.collections.html#Collection">Collection</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#PolyCollection">PolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="PolyCollection-__init__"><strong>__init__</strong></a>(self, verts, **kwargs)</dt><dd><tt>verts&nbsp;is&nbsp;a&nbsp;sequence&nbsp;of&nbsp;(&nbsp;verts0,&nbsp;verts1,&nbsp;...)&nbsp;where&nbsp;verts_i&nbsp;is<br>
a&nbsp;sequence&nbsp;of&nbsp;xy&nbsp;tuples&nbsp;of&nbsp;vertices,&nbsp;or&nbsp;an&nbsp;equivalent<br>
numpy&nbsp;array&nbsp;of&nbsp;shape&nbsp;(nv,2).<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Valid&nbsp;<a href="#Collection">Collection</a>&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidths=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiaseds&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;transforms.IdentityTransform(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;cm.<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;used&nbsp;to&nbsp;translate&nbsp;the&nbsp;patch&nbsp;after<br>
&nbsp;&nbsp;&nbsp;&nbsp;rendering&nbsp;(default&nbsp;no&nbsp;offsets)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;any&nbsp;of&nbsp;edgecolors,&nbsp;facecolors,&nbsp;linewidths,&nbsp;antialiaseds&nbsp;are<br>
&nbsp;&nbsp;&nbsp;&nbsp;None,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;patch.*&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;form.</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_paths"><strong>get_paths</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-set_verts"><strong>set_verts</strong></a>(self, verts)</dt><dd><tt>This&nbsp;allows&nbsp;one&nbsp;to&nbsp;delay&nbsp;initialization&nbsp;of&nbsp;the&nbsp;vertices.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="PolyCollection-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="PolyCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="PolyCollection-get_dashes"><strong>get_dashes</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="PolyCollection-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_facecolors"><strong>get_facecolors</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_linestyle"><strong>get_linestyle</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_linewidth"><strong>get_linewidth</strong></a> = get_linewidths(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_antialiaseds"><strong>set_antialiaseds</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_dashes"><strong>set_dashes</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_edgecolors"><strong>set_edgecolors</strong></a> = set_edgecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_facecolors"><strong>set_facecolors</strong></a> = set_facecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_linestyle"><strong>set_linestyle</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_linewidth"><strong>set_linewidth</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_lw"><strong>set_lw</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="PolyCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="PolyCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="PolyCollection-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="PolyCollection-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="PolyCollection-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="PolyCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="PolyCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="PolyCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="PolyCollection-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#PolyCollection-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="PolyCollection-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="PolyCollection-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="PolyCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="PolyCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="PolyCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="PolyCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="PolyCollection-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="PolyCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="PolyCollection-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="PolyCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="PolyCollection-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="PolyCollection-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="PolyCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PolyCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="QuadMesh">class <strong>QuadMesh</strong></a>(<a href="matplotlib.collections.html#Collection">Collection</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Class&nbsp;for&nbsp;the&nbsp;efficient&nbsp;drawing&nbsp;of&nbsp;a&nbsp;quadrilateral&nbsp;mesh.<br>
A&nbsp;quadrilateral&nbsp;mesh&nbsp;consists&nbsp;of&nbsp;a&nbsp;grid&nbsp;of&nbsp;vertices.&nbsp;The&nbsp;dimensions<br>
of&nbsp;this&nbsp;array&nbsp;are&nbsp;(meshWidth+1,&nbsp;meshHeight+1).&nbsp;Each&nbsp;vertex&nbsp;in<br>
the&nbsp;mesh&nbsp;has&nbsp;a&nbsp;different&nbsp;set&nbsp;of&nbsp;"mesh&nbsp;coordinates"&nbsp;representing<br>
its&nbsp;position&nbsp;in&nbsp;the&nbsp;topology&nbsp;of&nbsp;the&nbsp;mesh.&nbsp;For&nbsp;any&nbsp;values&nbsp;(m,&nbsp;n)<br>
such&nbsp;that&nbsp;0&nbsp;&lt;=&nbsp;m&nbsp;&lt;=&nbsp;meshWidth&nbsp;and&nbsp;0&nbsp;&lt;=&nbsp;n&nbsp;&lt;=&nbsp;meshHeight,&nbsp;the<br>
vertices&nbsp;at&nbsp;mesh&nbsp;coordinates&nbsp;(m,&nbsp;n),&nbsp;(m,&nbsp;n+1),&nbsp;(m+1,&nbsp;n+1),&nbsp;and<br>
(m+1,&nbsp;n)&nbsp;form&nbsp;one&nbsp;of&nbsp;the&nbsp;quadrilaterals&nbsp;in&nbsp;the&nbsp;mesh.&nbsp;There&nbsp;are<br>
thus&nbsp;(meshWidth&nbsp;*&nbsp;meshHeight)&nbsp;quadrilaterals&nbsp;in&nbsp;the&nbsp;mesh.<br>
The&nbsp;mesh&nbsp;need&nbsp;not&nbsp;be&nbsp;regular&nbsp;and&nbsp;the&nbsp;polygons&nbsp;need&nbsp;not&nbsp;be&nbsp;convex.<br>
A&nbsp;quadrilateral&nbsp;mesh&nbsp;is&nbsp;represented&nbsp;by&nbsp;a<br>
(2&nbsp;x&nbsp;((meshWidth&nbsp;+&nbsp;1)&nbsp;*&nbsp;(meshHeight&nbsp;+&nbsp;1)))&nbsp;numpy&nbsp;array<br>
'coordinates'&nbsp;where&nbsp;each&nbsp;row&nbsp;is&nbsp;the&nbsp;X&nbsp;and&nbsp;Y&nbsp;coordinates&nbsp;of&nbsp;one<br>
of&nbsp;the&nbsp;vertices.<br>
To&nbsp;define&nbsp;the&nbsp;function&nbsp;that&nbsp;maps&nbsp;from&nbsp;a&nbsp;data&nbsp;point&nbsp;to<br>
its&nbsp;corresponding&nbsp;color,&nbsp;use&nbsp;the&nbsp;<a href="#QuadMesh-set_cmap">set_cmap</a>()&nbsp;function.<br>
Each&nbsp;of&nbsp;these&nbsp;arrays&nbsp;is&nbsp;indexed&nbsp;in&nbsp;row-major&nbsp;order&nbsp;by&nbsp;the<br>
mesh&nbsp;coordinates&nbsp;of&nbsp;the&nbsp;vertex&nbsp;(or&nbsp;the&nbsp;mesh&nbsp;coordinates&nbsp;of<br>
the&nbsp;lower&nbsp;left&nbsp;vertex,&nbsp;in&nbsp;the&nbsp;case&nbsp;of&nbsp;the&nbsp;colors).&nbsp;For&nbsp;example,<br>
the&nbsp;first&nbsp;entry&nbsp;in&nbsp;coordinates&nbsp;is&nbsp;the&nbsp;coordinates&nbsp;of&nbsp;the&nbsp;vertex<br>
at&nbsp;mesh&nbsp;coordinates&nbsp;(0,&nbsp;0),&nbsp;then&nbsp;the&nbsp;one&nbsp;at&nbsp;(0,&nbsp;1),&nbsp;then&nbsp;at<br>
(0,&nbsp;2)&nbsp;..&nbsp;(0,&nbsp;meshWidth),&nbsp;(1,&nbsp;0),&nbsp;(1,&nbsp;1),&nbsp;and&nbsp;so&nbsp;on.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#QuadMesh">QuadMesh</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="QuadMesh-__init__"><strong>__init__</strong></a>(self, meshWidth, meshHeight, coordinates, showedges, antialiased<font color="#909090">=True</font>)</dt></dl>

<dl><dt><a name="QuadMesh-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="QuadMesh-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="QuadMesh-get_paths"><strong>get_paths</strong></a>(self, dataTrans<font color="#909090">=None</font>)</dt></dl>

<hr>
Static methods defined here:<br>
<dl><dt><a name="QuadMesh-convert_mesh_to_paths"><strong>convert_mesh_to_paths</strong></a>(meshWidth, meshHeight, coordinates)</dt><dd><tt>#@staticmethod</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="QuadMesh-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_dashes"><strong>get_dashes</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_facecolors"><strong>get_facecolors</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_linestyle"><strong>get_linestyle</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_linewidth"><strong>get_linewidth</strong></a> = get_linewidths(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_antialiaseds"><strong>set_antialiaseds</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_dashes"><strong>set_dashes</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_edgecolors"><strong>set_edgecolors</strong></a> = set_edgecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_facecolors"><strong>set_facecolors</strong></a> = set_facecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_linestyle"><strong>set_linestyle</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_linewidth"><strong>set_linewidth</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_lw"><strong>set_lw</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="QuadMesh-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="QuadMesh-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="QuadMesh-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="QuadMesh-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="QuadMesh-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="QuadMesh-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="QuadMesh-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="QuadMesh-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="QuadMesh-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#QuadMesh-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="QuadMesh-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="QuadMesh-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="QuadMesh-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="QuadMesh-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="QuadMesh-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="QuadMesh-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="QuadMesh-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="QuadMesh-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="QuadMesh-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="QuadMesh-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="QuadMesh-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="QuadMesh-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="QuadMesh-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="QuadMesh-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="RegularPolyCollection">class <strong>RegularPolyCollection</strong></a>(<a href="matplotlib.collections.html#Collection">Collection</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="RegularPolyCollection-__init__"><strong>__init__</strong></a>(self, numsides, rotation<font color="#909090">=0</font>, sizes<font color="#909090">=(1,)</font>, **kwargs)</dt><dd><tt>Draw&nbsp;a&nbsp;regular&nbsp;polygon&nbsp;with&nbsp;numsides.<br>
&nbsp;<br>
*&nbsp;dpi&nbsp;is&nbsp;the&nbsp;figure&nbsp;dpi&nbsp;instance,&nbsp;and&nbsp;is&nbsp;required&nbsp;to&nbsp;do&nbsp;the<br>
&nbsp;&nbsp;area&nbsp;scaling.<br>
&nbsp;<br>
*&nbsp;numsides:&nbsp;the&nbsp;number&nbsp;of&nbsp;sides&nbsp;of&nbsp;the&nbsp;polygon<br>
&nbsp;<br>
*&nbsp;sizes&nbsp;gives&nbsp;the&nbsp;area&nbsp;of&nbsp;the&nbsp;circle&nbsp;circumscribing&nbsp;the<br>
&nbsp;&nbsp;regular&nbsp;polygon&nbsp;in&nbsp;points^2<br>
&nbsp;<br>
*&nbsp;rotation&nbsp;is&nbsp;the&nbsp;rotation&nbsp;of&nbsp;the&nbsp;polygon&nbsp;in&nbsp;radians<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Valid&nbsp;<a href="#Collection">Collection</a>&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidths=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiaseds&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;transforms.IdentityTransform(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;cm.<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;used&nbsp;to&nbsp;translate&nbsp;the&nbsp;patch&nbsp;after<br>
&nbsp;&nbsp;&nbsp;&nbsp;rendering&nbsp;(default&nbsp;no&nbsp;offsets)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;any&nbsp;of&nbsp;edgecolors,&nbsp;facecolors,&nbsp;linewidths,&nbsp;antialiaseds&nbsp;are<br>
&nbsp;&nbsp;&nbsp;&nbsp;None,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;patch.*&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;form.<br>
&nbsp;<br>
&nbsp;<br>
Example:&nbsp;see&nbsp;examples/dynamic_collection.py&nbsp;for&nbsp;complete&nbsp;example<br>
&nbsp;<br>
offsets&nbsp;=&nbsp;np.random.rand(20,2)<br>
facecolors&nbsp;=&nbsp;[cm.jet(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;np.random.rand(20)]<br>
black&nbsp;=&nbsp;(0,0,0,1)<br>
&nbsp;<br>
collection&nbsp;=&nbsp;<a href="#RegularPolyCollection">RegularPolyCollection</a>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;numsides=5,&nbsp;#&nbsp;a&nbsp;pentagon<br>
&nbsp;&nbsp;&nbsp;&nbsp;rotation=0,<br>
&nbsp;&nbsp;&nbsp;&nbsp;sizes=(50,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;facecolors&nbsp;=&nbsp;facecolors,<br>
&nbsp;&nbsp;&nbsp;&nbsp;edgecolors&nbsp;=&nbsp;(black,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;linewidths&nbsp;=&nbsp;(1,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;offsets,<br>
&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;ax.transData,<br>
&nbsp;&nbsp;&nbsp;&nbsp;)</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_paths"><strong>get_paths</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="RegularPolyCollection-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_dashes"><strong>get_dashes</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_facecolors"><strong>get_facecolors</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_linestyle"><strong>get_linestyle</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_linewidth"><strong>get_linewidth</strong></a> = get_linewidths(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_antialiaseds"><strong>set_antialiaseds</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_dashes"><strong>set_dashes</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_edgecolors"><strong>set_edgecolors</strong></a> = set_edgecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_facecolors"><strong>set_facecolors</strong></a> = set_facecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_linestyle"><strong>set_linestyle</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_linewidth"><strong>set_linewidth</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_lw"><strong>set_lw</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="RegularPolyCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="RegularPolyCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="RegularPolyCollection-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolyCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#RegularPolyCollection-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="RegularPolyCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="RegularPolyCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="RegularPolyCollection-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolyCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="StarPolygonCollection">class <strong>StarPolygonCollection</strong></a>(<a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.collections.html#StarPolygonCollection">StarPolygonCollection</a></dd>
<dd><a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a></dd>
<dd><a href="matplotlib.collections.html#Collection">Collection</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
<dd><a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a></dd>
</dl>
<hr>
Methods inherited from <a href="matplotlib.collections.html#RegularPolyCollection">RegularPolyCollection</a>:<br>
<dl><dt><a name="StarPolygonCollection-__init__"><strong>__init__</strong></a>(self, numsides, rotation<font color="#909090">=0</font>, sizes<font color="#909090">=(1,)</font>, **kwargs)</dt><dd><tt>Draw&nbsp;a&nbsp;regular&nbsp;polygon&nbsp;with&nbsp;numsides.<br>
&nbsp;<br>
*&nbsp;dpi&nbsp;is&nbsp;the&nbsp;figure&nbsp;dpi&nbsp;instance,&nbsp;and&nbsp;is&nbsp;required&nbsp;to&nbsp;do&nbsp;the<br>
&nbsp;&nbsp;area&nbsp;scaling.<br>
&nbsp;<br>
*&nbsp;numsides:&nbsp;the&nbsp;number&nbsp;of&nbsp;sides&nbsp;of&nbsp;the&nbsp;polygon<br>
&nbsp;<br>
*&nbsp;sizes&nbsp;gives&nbsp;the&nbsp;area&nbsp;of&nbsp;the&nbsp;circle&nbsp;circumscribing&nbsp;the<br>
&nbsp;&nbsp;regular&nbsp;polygon&nbsp;in&nbsp;points^2<br>
&nbsp;<br>
*&nbsp;rotation&nbsp;is&nbsp;the&nbsp;rotation&nbsp;of&nbsp;the&nbsp;polygon&nbsp;in&nbsp;radians<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Valid&nbsp;<a href="#Collection">Collection</a>&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolors=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidths=None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiaseds&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;None,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;transforms.IdentityTransform(),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;optional&nbsp;for&nbsp;cm.<a href="matplotlib.cm.html#ScalarMappable">ScalarMappable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cmap&nbsp;=&nbsp;None,&nbsp;&nbsp;#&nbsp;ditto<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;and&nbsp;transOffset&nbsp;are&nbsp;used&nbsp;to&nbsp;translate&nbsp;the&nbsp;patch&nbsp;after<br>
&nbsp;&nbsp;&nbsp;&nbsp;rendering&nbsp;(default&nbsp;no&nbsp;offsets)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;any&nbsp;of&nbsp;edgecolors,&nbsp;facecolors,&nbsp;linewidths,&nbsp;antialiaseds&nbsp;are<br>
&nbsp;&nbsp;&nbsp;&nbsp;None,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;patch.*&nbsp;rc&nbsp;params&nbsp;setting,&nbsp;in&nbsp;sequence<br>
&nbsp;&nbsp;&nbsp;&nbsp;form.<br>
&nbsp;<br>
&nbsp;<br>
Example:&nbsp;see&nbsp;examples/dynamic_collection.py&nbsp;for&nbsp;complete&nbsp;example<br>
&nbsp;<br>
offsets&nbsp;=&nbsp;np.random.rand(20,2)<br>
facecolors&nbsp;=&nbsp;[cm.jet(x)&nbsp;for&nbsp;x&nbsp;in&nbsp;np.random.rand(20)]<br>
black&nbsp;=&nbsp;(0,0,0,1)<br>
&nbsp;<br>
collection&nbsp;=&nbsp;<a href="#RegularPolyCollection">RegularPolyCollection</a>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;numsides=5,&nbsp;#&nbsp;a&nbsp;pentagon<br>
&nbsp;&nbsp;&nbsp;&nbsp;rotation=0,<br>
&nbsp;&nbsp;&nbsp;&nbsp;sizes=(50,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;facecolors&nbsp;=&nbsp;facecolors,<br>
&nbsp;&nbsp;&nbsp;&nbsp;edgecolors&nbsp;=&nbsp;(black,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;linewidths&nbsp;=&nbsp;(1,),<br>
&nbsp;&nbsp;&nbsp;&nbsp;offsets&nbsp;=&nbsp;offsets,<br>
&nbsp;&nbsp;&nbsp;&nbsp;transOffset&nbsp;=&nbsp;ax.transData,<br>
&nbsp;&nbsp;&nbsp;&nbsp;)</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_paths"><strong>get_paths</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><a name="StarPolygonCollection-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;collection.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;dict(ind=itemlist),&nbsp;where&nbsp;every&nbsp;item&nbsp;in&nbsp;itemlist&nbsp;contains&nbsp;the&nbsp;event.</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_dashes"><strong>get_dashes</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_datalim"><strong>get_datalim</strong></a>(self, transData)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_facecolors"><strong>get_facecolors</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_linestyle"><strong>get_linestyle</strong></a> = get_linestyles(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_linestyles"><strong>get_linestyles</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_linewidth"><strong>get_linewidth</strong></a> = get_linewidths(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_linewidths"><strong>get_linewidths</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_pickradius"><strong>get_pickradius</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_transforms"><strong>get_transforms</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;tranparencies&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;Alpha&nbsp;must&nbsp;be<br>
a&nbsp;float.<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_antialiaseds"><strong>set_antialiaseds</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;the&nbsp;antialiasing&nbsp;state&nbsp;for&nbsp;rendering.<br>
&nbsp;<br>
ACCEPTS:&nbsp;Boolean&nbsp;or&nbsp;sequence&nbsp;of&nbsp;booleans</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_color"><strong>set_color</strong></a>(self, c)</dt><dd><tt>Set&nbsp;both&nbsp;the&nbsp;edgecolor&nbsp;and&nbsp;the&nbsp;facecolor.<br>
See&nbsp;set_facecolor&nbsp;and&nbsp;set_edgecolor.<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_dashes"><strong>set_dashes</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_edgecolor"><strong>set_edgecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_edgecolors"><strong>set_edgecolors</strong></a> = set_edgecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;edgecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib&nbsp;color<br>
arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or&nbsp;rgba&nbsp;tuples;&nbsp;if<br>
it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_facecolor"><strong>set_facecolor</strong></a>(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_facecolors"><strong>set_facecolors</strong></a> = set_facecolor(self, c)</dt><dd><tt>Set&nbsp;the&nbsp;facecolor(s)&nbsp;of&nbsp;the&nbsp;collection.&nbsp;&nbsp;c&nbsp;can&nbsp;be&nbsp;a&nbsp;matplotlib<br>
color&nbsp;arg&nbsp;(all&nbsp;patches&nbsp;have&nbsp;same&nbsp;color),&nbsp;or&nbsp;a&nbsp;a&nbsp;sequence&nbsp;or<br>
rgba&nbsp;tuples;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle<br>
through&nbsp;the&nbsp;sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;matplotlib&nbsp;color&nbsp;arg&nbsp;or&nbsp;sequence&nbsp;of&nbsp;rgba&nbsp;tuples</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_linestyle"><strong>set_linestyle</strong></a> = set_linestyles(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_linestyles"><strong>set_linestyles</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;linestyles(s)&nbsp;for&nbsp;the&nbsp;collection.<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed',&nbsp;'dashdot',&nbsp;'dotted'&nbsp;|&nbsp;&nbsp;(offset,&nbsp;on-off-dash-seq)&nbsp;]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_linewidth"><strong>set_linewidth</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_linewidths"><strong>set_linewidths</strong></a>(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_lw"><strong>set_lw</strong></a> = set_linewidths(self, lw)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth(s)&nbsp;for&nbsp;the&nbsp;collection.&nbsp;&nbsp;lw&nbsp;can&nbsp;be&nbsp;a&nbsp;scalar&nbsp;or&nbsp;a<br>
sequence;&nbsp;if&nbsp;it&nbsp;is&nbsp;a&nbsp;sequence&nbsp;the&nbsp;patches&nbsp;will&nbsp;cycle&nbsp;through&nbsp;the<br>
sequence<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_pickradius"><strong>set_pickradius</strong></a>(self, pickradius)</dt></dl>

<dl><dt><a name="StarPolygonCollection-update_scalarmappable"><strong>update_scalarmappable</strong></a>(self)</dt><dd><tt>If&nbsp;the&nbsp;scalar&nbsp;mappable&nbsp;array&nbsp;is&nbsp;not&nbsp;none,&nbsp;update&nbsp;colors<br>
from&nbsp;scalar&nbsp;data</tt></dd></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.collections.html#Collection">Collection</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="StarPolygonCollection-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="StarPolygonCollection-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;x&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;y&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;None&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_transform"><strong>get_transform</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation&nbsp;applied,<br>
and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its&nbsp;transformation.</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="StarPolygonCollection-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt><a href="#StarPolygonCollection-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;mouseevent&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;True&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect&nbsp;will&nbsp;not<br>
be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with&nbsp;ax.draw_idle().<br>
Call&nbsp;ax.relim()&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits&nbsp;if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;relim()&nbsp;will&nbsp;not&nbsp;see&nbsp;collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection<br>
was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with&nbsp;autolim=True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="StarPolygonCollection-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;kwargs&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;a)&nbsp;a&nbsp;Patch&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;b)&nbsp;a&nbsp;Path&nbsp;instance,&nbsp;in&nbsp;which&nbsp;cas&nbsp;aoptional&nbsp;transform&nbsp;may<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;using&nbsp;it<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;c)&nbsp;None,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;None.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;Path&nbsp;instance&nbsp;and&nbsp;a&nbsp;Transform&nbsp;instance,&nbsp;a&nbsp;Patch<br>
instance,&nbsp;or&nbsp;None</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;figure&nbsp;instance&nbsp;the&nbsp;artist&nbsp;belong&nbsp;to<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;s&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
picker&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;None&nbsp;-&nbsp;&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;boolean&nbsp;-&nbsp;if&nbsp;True&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;float&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;eg&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;-&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;hit=True&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>set&nbsp;the&nbsp;Transformation&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-update"><strong>update</strong></a>(self, props)</dt></dl>

<dl><dt><a name="StarPolygonCollection-update_from"><strong>update_from</strong></a>(self, other)</dt><dd><tt>copy&nbsp;properties&nbsp;from&nbsp;other&nbsp;to&nbsp;self</tt></dd></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

<hr>
Methods inherited from <a href="matplotlib.cm.html#ScalarMappable">matplotlib.cm.ScalarMappable</a>:<br>
<dl><dt><a name="StarPolygonCollection-add_checker"><strong>add_checker</strong></a>(self, checker)</dt><dd><tt>Add&nbsp;an&nbsp;entry&nbsp;to&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;boolean&nbsp;flags<br>
that&nbsp;are&nbsp;set&nbsp;to&nbsp;True&nbsp;when&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed.</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-autoscale"><strong>autoscale</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-autoscale_None"><strong>autoscale_None</strong></a>(self)</dt><dd><tt>Autoscale&nbsp;the&nbsp;scalar&nbsp;limits&nbsp;on&nbsp;the&nbsp;norm&nbsp;instance&nbsp;using&nbsp;the<br>
current&nbsp;array,&nbsp;changing&nbsp;only&nbsp;limits&nbsp;that&nbsp;are&nbsp;None</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-changed"><strong>changed</strong></a>(self)</dt><dd><tt>Call&nbsp;this&nbsp;whenever&nbsp;the&nbsp;mappable&nbsp;is&nbsp;changed&nbsp;to&nbsp;notify&nbsp;all&nbsp;the<br>
callbackSM&nbsp;listeners&nbsp;to&nbsp;the&nbsp;'changed'&nbsp;signal</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-check_update"><strong>check_update</strong></a>(self, checker)</dt><dd><tt>If&nbsp;mappable&nbsp;has&nbsp;changed&nbsp;since&nbsp;the&nbsp;last&nbsp;check,<br>
return&nbsp;True;&nbsp;else&nbsp;return&nbsp;False</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_array"><strong>get_array</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;array</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_clim"><strong>get_clim</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;min,&nbsp;max&nbsp;of&nbsp;the&nbsp;color&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-get_cmap"><strong>get_cmap</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_array"><strong>set_array</strong></a>(self, A)</dt><dd><tt>Set&nbsp;the&nbsp;image&nbsp;array&nbsp;from&nbsp;numpy&nbsp;array&nbsp;A</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_clim"><strong>set_clim</strong></a>(self, vmin<font color="#909090">=None</font>, vmax<font color="#909090">=None</font>)</dt><dd><tt>set&nbsp;the&nbsp;norm&nbsp;limits&nbsp;for&nbsp;image&nbsp;scaling;&nbsp;if&nbsp;vmin&nbsp;is&nbsp;a&nbsp;length2<br>
sequence,&nbsp;interpret&nbsp;it&nbsp;as&nbsp;(vmin,&nbsp;vmax)&nbsp;which&nbsp;is&nbsp;used&nbsp;to<br>
support&nbsp;setp<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;length&nbsp;2&nbsp;sequence&nbsp;of&nbsp;floats</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_cmap"><strong>set_cmap</strong></a>(self, cmap)</dt><dd><tt>set&nbsp;the&nbsp;colormap&nbsp;for&nbsp;luminance&nbsp;data<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;colormap</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_colorbar"><strong>set_colorbar</strong></a>(self, im, ax)</dt><dd><tt>set&nbsp;the&nbsp;colorbar&nbsp;image&nbsp;and&nbsp;axes&nbsp;associated&nbsp;with&nbsp;mappable</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-set_norm"><strong>set_norm</strong></a>(self, norm)</dt><dd><tt>set&nbsp;the&nbsp;normalization&nbsp;instance</tt></dd></dl>

<dl><dt><a name="StarPolygonCollection-to_rgba"><strong>to_rgba</strong></a>(self, x, alpha<font color="#909090">=1.0</font>, bytes<font color="#909090">=False</font>)</dt><dd><tt>Return&nbsp;a&nbsp;normalized&nbsp;rgba&nbsp;array&nbsp;corresponding&nbsp;to&nbsp;x.<br>
If&nbsp;x&nbsp;is&nbsp;already&nbsp;an&nbsp;rgb&nbsp;array,&nbsp;insert&nbsp;alpha;&nbsp;if&nbsp;it&nbsp;is<br>
already&nbsp;rgba,&nbsp;return&nbsp;it&nbsp;unchanged.<br>
If&nbsp;bytes&nbsp;is&nbsp;True,&nbsp;return&nbsp;rgba&nbsp;as&nbsp;4&nbsp;uint8s&nbsp;instead&nbsp;of&nbsp;4&nbsp;floats.</tt></dd></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>k</strong> = 'StarPolygonCollection'<br>
<strong>patchstr</strong> = '    alpha: float<font color="#c040c0">\n</font>    animated: [True | False]<font color="#c040c0">\n</font>  ...   visible: [True | False]<font color="#c040c0">\n</font>    zorder: any number'</td></tr></table>
@footer@