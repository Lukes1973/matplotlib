@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.backend_bases</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/backend_bases.py">/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/backend_bases.py</a></font></td></tr></table>
    <p><tt>Abstract&nbsp;base&nbsp;classes&nbsp;define&nbsp;the&nbsp;primitives&nbsp;that&nbsp;renderers&nbsp;and<br>
graphics&nbsp;contexts&nbsp;must&nbsp;implement&nbsp;to&nbsp;serve&nbsp;as&nbsp;a&nbsp;matplotlib&nbsp;backend<br>
&nbsp;<br>
:class:`<a href="#RendererBase">RendererBase</a>`<br>
&nbsp;&nbsp;&nbsp;&nbsp;An&nbsp;abstract&nbsp;base&nbsp;class&nbsp;to&nbsp;handle&nbsp;drawing/rendering&nbsp;operations.<br>
&nbsp;<br>
:class:`<a href="#FigureCanvasBase">FigureCanvasBase</a>`<br>
&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;abstraction&nbsp;layer&nbsp;that&nbsp;separates&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;:class:`matplotlib.figure.Figure`&nbsp;from&nbsp;the&nbsp;backend&nbsp;specific<br>
&nbsp;&nbsp;&nbsp;&nbsp;details&nbsp;like&nbsp;a&nbsp;user&nbsp;interface&nbsp;drawing&nbsp;area<br>
&nbsp;<br>
:class:`<a href="#GraphicsContextBase">GraphicsContextBase</a>`<br>
&nbsp;&nbsp;&nbsp;&nbsp;An&nbsp;abstract&nbsp;base&nbsp;class&nbsp;that&nbsp;provides&nbsp;color,&nbsp;line&nbsp;styles,&nbsp;etc...<br>
&nbsp;<br>
:class:`<a href="#Event">Event</a>`<br>
&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;base&nbsp;class&nbsp;for&nbsp;all&nbsp;of&nbsp;the&nbsp;matplotlib&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;handling.&nbsp;&nbsp;Derived&nbsp;classes&nbsp;suh&nbsp;as&nbsp;:class:`<a href="#KeyEvent">KeyEvent</a>`&nbsp;and<br>
&nbsp;&nbsp;&nbsp;&nbsp;:class:`<a href="#MouseEvent">MouseEvent</a>`&nbsp;store&nbsp;the&nbsp;meta&nbsp;data&nbsp;like&nbsp;keys&nbsp;and&nbsp;buttons<br>
&nbsp;&nbsp;&nbsp;&nbsp;pressed,&nbsp;x&nbsp;and&nbsp;y&nbsp;locations&nbsp;in&nbsp;pixel&nbsp;and<br>
&nbsp;&nbsp;&nbsp;&nbsp;:class:`~matplotlib.axes.Axes`&nbsp;coordinates.</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib._image.html">matplotlib._image</a><br>
<a href="matplotlib.cbook.html">matplotlib.cbook</a><br>
<a href="matplotlib.colors.html">matplotlib.colors</a><br>
</td><td width="25%" valign=top><a href="numpy.html">numpy</a><br>
<a href="os.html">os</a><br>
<a href="matplotlib.path.html">matplotlib.path</a><br>
</td><td width="25%" valign=top><a href="time.html">time</a><br>
<a href="matplotlib.transforms.html">matplotlib.transforms</a><br>
<a href="warnings.html">warnings</a><br>
</td><td width="25%" valign=top><a href="matplotlib.widgets.html">matplotlib.widgets</a><br>
</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#Cursors">Cursors</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#Event">Event</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#DrawEvent">DrawEvent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#IdleEvent">IdleEvent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#KeyEvent">KeyEvent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#MouseEvent">MouseEvent</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#PickEvent">PickEvent</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#ResizeEvent">ResizeEvent</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#FigureCanvasBase">FigureCanvasBase</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#FigureManagerBase">FigureManagerBase</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#GraphicsContextBase">GraphicsContextBase</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#NavigationToolbar2">NavigationToolbar2</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.backend_bases.html#RendererBase">RendererBase</a>
</font></dt></dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Cursors">class <strong>Cursors</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>#&nbsp;cursors<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Data and other attributes defined here:<br>
<dl><dt><strong>HAND</strong> = 0</dl>

<dl><dt><strong>MOVE</strong> = 3</dl>

<dl><dt><strong>POINTER</strong> = 1</dl>

<dl><dt><strong>SELECT_REGION</strong> = 2</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="DrawEvent">class <strong>DrawEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;event&nbsp;triggered&nbsp;by&nbsp;a&nbsp;draw&nbsp;operation&nbsp;on&nbsp;the&nbsp;canvas<br>
&nbsp;<br>
In&nbsp;addition&nbsp;to&nbsp;the&nbsp;:class:`<a href="#Event">Event</a>`&nbsp;attributes,&nbsp;the&nbsp;following&nbsp;event&nbsp;attributes&nbsp;are&nbsp;defined:<br>
&nbsp;<br>
*renderer*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`<a href="#RendererBase">RendererBase</a>`&nbsp;instance&nbsp;for&nbsp;the&nbsp;draw&nbsp;event<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="DrawEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, renderer)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Event">class <strong>Event</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;matplotlib&nbsp;event.&nbsp;&nbsp;Attach&nbsp;additional&nbsp;attributes&nbsp;as&nbsp;defined&nbsp;in<br>
:meth:`<a href="#FigureCanvasBase">FigureCanvasBase</a>.mpl_connect`.&nbsp;&nbsp;The&nbsp;following&nbsp;attributes<br>
are&nbsp;defined&nbsp;and&nbsp;shown&nbsp;with&nbsp;their&nbsp;default&nbsp;values<br>
&nbsp;<br>
*name*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;event&nbsp;name<br>
&nbsp;<br>
*canvas*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;FigureCanvas&nbsp;instance&nbsp;generating&nbsp;the&nbsp;event<br>
&nbsp;<br>
*guiEvent*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;GUI&nbsp;event&nbsp;that&nbsp;triggered&nbsp;the&nbsp;matplotlib&nbsp;event<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Event-__init__"><strong>__init__</strong></a>(self, name, canvas, guiEvent<font color="#909090">=None</font>)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FigureCanvasBase">class <strong>FigureCanvasBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>The&nbsp;canvas&nbsp;the&nbsp;figure&nbsp;renders&nbsp;into.<br>
&nbsp;<br>
Public&nbsp;attributes<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*figure*<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FigureCanvasBase-__init__"><strong>__init__</strong></a>(self, figure)</dt></dl>

<dl><dt><a name="FigureCanvasBase-blit"><strong>blit</strong></a>(self, bbox<font color="#909090">=None</font>)</dt><dd><tt>blit&nbsp;the&nbsp;canvas&nbsp;in&nbsp;bbox&nbsp;(default&nbsp;entire&nbsp;canvas)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-button_press_event"><strong>button_press_event</strong></a>(self, x, y, button, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any&nbsp;mouse<br>
button&nbsp;press.&nbsp;&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,&nbsp;left.<br>
button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;:class:`<a href="#MouseEvent">MouseEvent</a>`.<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'button_press_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#MouseEvent">MouseEvent</a>`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-button_release_event"><strong>button_release_event</strong></a>(self, x, y, button, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any&nbsp;mouse<br>
button&nbsp;release.<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=left<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=bottom<br>
&nbsp;<br>
*guiEvent*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;native&nbsp;UI&nbsp;event&nbsp;that&nbsp;generated&nbsp;the&nbsp;mpl&nbsp;event<br>
&nbsp;<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'button_release_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#MouseEvent">MouseEvent</a>`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-draw"><strong>draw</strong></a>(self, *args, **kwargs)</dt><dd><tt>Render&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-draw_cursor"><strong>draw_cursor</strong></a>(self, event)</dt><dd><tt>Draw&nbsp;a&nbsp;cursor&nbsp;in&nbsp;the&nbsp;event.axes&nbsp;if&nbsp;inaxes&nbsp;is&nbsp;not&nbsp;None.&nbsp;&nbsp;Use<br>
native&nbsp;GUI&nbsp;drawing&nbsp;for&nbsp;efficiency&nbsp;if&nbsp;possible</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-draw_event"><strong>draw_event</strong></a>(self, renderer)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'draw_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#DrawEvent">DrawEvent</a>`</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-draw_idle"><strong>draw_idle</strong></a>(self, *args, **kwargs)</dt><dd><tt>:meth:`draw`&nbsp;only&nbsp;if&nbsp;idle;&nbsp;defaults&nbsp;to&nbsp;draw&nbsp;but&nbsp;backends&nbsp;can&nbsp;overrride</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-flush_events"><strong>flush_events</strong></a>(self)</dt><dd><tt>Flush&nbsp;the&nbsp;GUI&nbsp;events&nbsp;for&nbsp;the&nbsp;figure.&nbsp;Implemented&nbsp;only&nbsp;for<br>
backends&nbsp;with&nbsp;GUIs.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-get_default_filetype"><strong>get_default_filetype</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasBase-get_supported_filetypes"><strong>get_supported_filetypes</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasBase-get_supported_filetypes_grouped"><strong>get_supported_filetypes_grouped</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureCanvasBase-get_width_height"><strong>get_width_height</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;figure&nbsp;width&nbsp;and&nbsp;height&nbsp;in&nbsp;points&nbsp;or&nbsp;pixels<br>
(depending&nbsp;on&nbsp;the&nbsp;backend),&nbsp;truncated&nbsp;to&nbsp;integers</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-idle_event"><strong>idle_event</strong></a>(self, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>call&nbsp;when&nbsp;GUI&nbsp;is&nbsp;idle</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-key_press_event"><strong>key_press_event</strong></a>(self, key, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'key_press_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#KeyEvent">KeyEvent</a>`</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-key_release_event"><strong>key_release_event</strong></a>(self, key, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'key_release_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#KeyEvent">KeyEvent</a>`</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-motion_notify_event"><strong>motion_notify_event</strong></a>(self, x, y, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any<br>
motion-notify-event.<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=left<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;canvas&nbsp;coordinates&nbsp;where&nbsp;0=bottom<br>
&nbsp;<br>
*guiEvent*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;native&nbsp;UI&nbsp;event&nbsp;that&nbsp;generated&nbsp;the&nbsp;mpl&nbsp;event<br>
&nbsp;<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'motion_notify_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#MouseEvent">MouseEvent</a>`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-mpl_connect"><strong>mpl_connect</strong></a>(self, s, func)</dt><dd><tt>Connect&nbsp;event&nbsp;with&nbsp;string&nbsp;*s*&nbsp;to&nbsp;*func*.&nbsp;&nbsp;The&nbsp;signature&nbsp;of&nbsp;*func*&nbsp;is::<br>
&nbsp;<br>
&nbsp;&nbsp;def&nbsp;func(event)<br>
&nbsp;<br>
where&nbsp;event&nbsp;is&nbsp;a&nbsp;:class:`matplotlib.backend_bases.<a href="#Event">Event</a>`.&nbsp;&nbsp;The<br>
following&nbsp;events&nbsp;are&nbsp;recognized<br>
&nbsp;<br>
-&nbsp;'button_press_event'<br>
-&nbsp;'button_release_event'<br>
-&nbsp;'draw_event'<br>
-&nbsp;'key_press_event'<br>
-&nbsp;'key_release_event'<br>
-&nbsp;'motion_notify_event'<br>
-&nbsp;'pick_event'<br>
-&nbsp;'resize_event'<br>
-&nbsp;'scroll_event'<br>
&nbsp;<br>
For&nbsp;the&nbsp;location&nbsp;events&nbsp;(button&nbsp;and&nbsp;key&nbsp;press/release),&nbsp;if&nbsp;the<br>
mouse&nbsp;is&nbsp;over&nbsp;the&nbsp;axes,&nbsp;the&nbsp;variable&nbsp;``event.inaxes``&nbsp;will&nbsp;be<br>
set&nbsp;to&nbsp;the&nbsp;:class:`~matplotlib.axes.Axes`&nbsp;the&nbsp;event&nbsp;occurs&nbsp;is<br>
over,&nbsp;and&nbsp;additionally,&nbsp;the&nbsp;variables&nbsp;``event.xdata``&nbsp;and<br>
``event.ydata``&nbsp;will&nbsp;be&nbsp;defined.&nbsp;&nbsp;This&nbsp;is&nbsp;the&nbsp;mouse&nbsp;location<br>
in&nbsp;data&nbsp;coords.&nbsp;&nbsp;See<br>
:class:`~matplotlib.backend_bases.<a href="#KeyEvent">KeyEvent</a>`&nbsp;and<br>
:class:`~matplotlib.backend_bases.<a href="#MouseEvent">MouseEvent</a>`&nbsp;for&nbsp;more&nbsp;info.<br>
&nbsp;<br>
Return&nbsp;value&nbsp;is&nbsp;a&nbsp;connection&nbsp;id&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;with<br>
:meth:`~matplotlib.backend_bases.<a href="#Event">Event</a>.mpl_disconnect`.<br>
&nbsp;<br>
Example&nbsp;usage::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;on_press(event):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'you&nbsp;pressed',&nbsp;event.button,&nbsp;event.xdata,&nbsp;event.ydata<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;cid&nbsp;=&nbsp;canvas.<a href="#FigureCanvasBase-mpl_connect">mpl_connect</a>('button_press_event',&nbsp;on_press)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-mpl_disconnect"><strong>mpl_disconnect</strong></a>(self, cid)</dt><dd><tt>disconnect&nbsp;callback&nbsp;id&nbsp;cid<br>
&nbsp;<br>
Example&nbsp;usage::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;cid&nbsp;=&nbsp;canvas.<a href="#FigureCanvasBase-mpl_connect">mpl_connect</a>('button_press_event',&nbsp;on_press)<br>
&nbsp;&nbsp;&nbsp;&nbsp;#...later<br>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.<a href="#FigureCanvasBase-mpl_disconnect">mpl_disconnect</a>(cid)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-onHilite"><strong>onHilite</strong></a>(self, ev)</dt><dd><tt>Mouse&nbsp;event&nbsp;processor&nbsp;which&nbsp;highlights&nbsp;the&nbsp;artists<br>
under&nbsp;the&nbsp;cursor.&nbsp;&nbsp;Connect&nbsp;this&nbsp;to&nbsp;the&nbsp;'motion_notify_event'<br>
using::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.<a href="#FigureCanvasBase-mpl_connect">mpl_connect</a>('motion_notify_event',canvas.onHilite)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-onRemove"><strong>onRemove</strong></a>(self, ev)</dt><dd><tt>Mouse&nbsp;event&nbsp;processor&nbsp;which&nbsp;removes&nbsp;the&nbsp;top&nbsp;artist<br>
under&nbsp;the&nbsp;cursor.&nbsp;&nbsp;Connect&nbsp;this&nbsp;to&nbsp;the&nbsp;'mouse_press_event'<br>
using::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;canvas.<a href="#FigureCanvasBase-mpl_connect">mpl_connect</a>('mouse_press_event',canvas.onRemove)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-pick"><strong>pick</strong></a>(self, mouseevent)</dt></dl>

<dl><dt><a name="FigureCanvasBase-pick_event"><strong>pick_event</strong></a>(self, mouseevent, artist, **kwargs)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;called&nbsp;by&nbsp;artists&nbsp;who&nbsp;are&nbsp;picked&nbsp;and&nbsp;will<br>
fire&nbsp;off&nbsp;:class:`<a href="#PickEvent">PickEvent</a>`&nbsp;callbacks&nbsp;registered&nbsp;listeners</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-print_bmp"><strong>print_bmp</strong></a> = <a href="#FigureCanvasBase-print_raw">print_raw</a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_emf"><strong>print_emf</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_eps"><strong>print_eps</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_figure"><strong>print_figure</strong></a>(self, filename, dpi<font color="#909090">=None</font>, facecolor<font color="#909090">='w'</font>, edgecolor<font color="#909090">='w'</font>, orientation<font color="#909090">='portrait'</font>, format<font color="#909090">=None</font>, **kwargs)</dt><dd><tt>Render&nbsp;the&nbsp;figure&nbsp;to&nbsp;hardcopy.&nbsp;Set&nbsp;the&nbsp;figure&nbsp;patch&nbsp;face&nbsp;and&nbsp;edge<br>
colors.&nbsp;&nbsp;This&nbsp;is&nbsp;useful&nbsp;because&nbsp;some&nbsp;of&nbsp;the&nbsp;GUIs&nbsp;have&nbsp;a&nbsp;gray&nbsp;figure<br>
face&nbsp;color&nbsp;background&nbsp;and&nbsp;you'll&nbsp;probably&nbsp;want&nbsp;to&nbsp;override&nbsp;this&nbsp;on<br>
hardcopy.<br>
&nbsp;<br>
Arguments&nbsp;are:<br>
&nbsp;<br>
*filename*<br>
&nbsp;&nbsp;&nbsp;&nbsp;can&nbsp;also&nbsp;be&nbsp;a&nbsp;file&nbsp;object&nbsp;on&nbsp;image&nbsp;backends<br>
&nbsp;<br>
*orientation*<br>
&nbsp;&nbsp;&nbsp;&nbsp;only&nbsp;currently&nbsp;applies&nbsp;to&nbsp;PostScript&nbsp;printing.<br>
&nbsp;<br>
*dpi*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;dots&nbsp;per&nbsp;inch&nbsp;to&nbsp;save&nbsp;the&nbsp;figure&nbsp;in;&nbsp;if&nbsp;None,&nbsp;use&nbsp;savefig.dpi<br>
&nbsp;<br>
*facecolor*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;facecolor&nbsp;of&nbsp;the&nbsp;figure<br>
&nbsp;<br>
*edgecolor*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;edgecolor&nbsp;of&nbsp;the&nbsp;figure<br>
&nbsp;<br>
*orientation*&nbsp;&nbsp;'<br>
&nbsp;&nbsp;&nbsp;&nbsp;landscape'&nbsp;|&nbsp;'portrait'&nbsp;(not&nbsp;supported&nbsp;on&nbsp;all&nbsp;backends)<br>
&nbsp;<br>
*format*<br>
&nbsp;&nbsp;&nbsp;&nbsp;when&nbsp;set,&nbsp;forcibly&nbsp;set&nbsp;the&nbsp;file&nbsp;format&nbsp;to&nbsp;save&nbsp;to</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-print_pdf"><strong>print_pdf</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_png"><strong>print_png</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_ps"><strong>print_ps</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_raw"><strong>print_raw</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_rgb"><strong>print_rgb</strong></a> = <a href="#FigureCanvasBase-print_raw">print_raw</a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_svg"><strong>print_svg</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-print_svgz"><strong>print_svgz</strong></a>(self, *args, **kwargs)</dt></dl>

<dl><dt><a name="FigureCanvasBase-resize"><strong>resize</strong></a>(self, w, h)</dt><dd><tt>set&nbsp;the&nbsp;canvas&nbsp;size&nbsp;in&nbsp;pixels</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-resize_event"><strong>resize_event</strong></a>(self)</dt><dd><tt>This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'resize_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#ResizeEvent">ResizeEvent</a>`</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-scroll_event"><strong>scroll_event</strong></a>(self, x, y, step, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>Backend&nbsp;derived&nbsp;classes&nbsp;should&nbsp;call&nbsp;this&nbsp;function&nbsp;on&nbsp;any<br>
scroll&nbsp;wheel&nbsp;event.&nbsp;&nbsp;x,y&nbsp;are&nbsp;the&nbsp;canvas&nbsp;coords:&nbsp;0,0&nbsp;is&nbsp;lower,<br>
left.&nbsp;&nbsp;button&nbsp;and&nbsp;key&nbsp;are&nbsp;as&nbsp;defined&nbsp;in&nbsp;<a href="#MouseEvent">MouseEvent</a>.<br>
&nbsp;<br>
This&nbsp;method&nbsp;will&nbsp;be&nbsp;call&nbsp;all&nbsp;functions&nbsp;connected&nbsp;to&nbsp;the<br>
'scroll_event'&nbsp;with&nbsp;a&nbsp;:class:`<a href="#MouseEvent">MouseEvent</a>`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-set_window_title"><strong>set_window_title</strong></a>(self, title)</dt><dd><tt>Set&nbsp;the&nbsp;title&nbsp;text&nbsp;of&nbsp;the&nbsp;window&nbsp;containing&nbsp;the&nbsp;figure.&nbsp;&nbsp;Note&nbsp;that<br>
this&nbsp;has&nbsp;no&nbsp;effect&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;window&nbsp;(eg,&nbsp;a&nbsp;PS&nbsp;backend).</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-start_event_loop"><strong>start_event_loop</strong></a>(self, timeout)</dt><dd><tt>Start&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;start&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.&nbsp;&nbsp;This&nbsp;should&nbsp;not&nbsp;be<br>
confused&nbsp;with&nbsp;the&nbsp;main&nbsp;GUI&nbsp;event&nbsp;loop,&nbsp;which&nbsp;is&nbsp;always&nbsp;running<br>
and&nbsp;has&nbsp;nothing&nbsp;to&nbsp;do&nbsp;with&nbsp;this.<br>
&nbsp;<br>
This&nbsp;is&nbsp;implemented&nbsp;only&nbsp;for&nbsp;backends&nbsp;with&nbsp;GUIs.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-start_event_loop_default"><strong>start_event_loop_default</strong></a>(self, timeout<font color="#909090">=0</font>)</dt><dd><tt>Start&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;start&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.&nbsp;&nbsp;This&nbsp;should&nbsp;not&nbsp;be<br>
confused&nbsp;with&nbsp;the&nbsp;main&nbsp;GUI&nbsp;event&nbsp;loop,&nbsp;which&nbsp;is&nbsp;always&nbsp;running<br>
and&nbsp;has&nbsp;nothing&nbsp;to&nbsp;do&nbsp;with&nbsp;this.<br>
&nbsp;<br>
This&nbsp;function&nbsp;provides&nbsp;default&nbsp;event&nbsp;loop&nbsp;functionality&nbsp;based<br>
on&nbsp;time.sleep&nbsp;that&nbsp;is&nbsp;meant&nbsp;to&nbsp;be&nbsp;used&nbsp;until&nbsp;event&nbsp;loop<br>
functions&nbsp;for&nbsp;each&nbsp;of&nbsp;the&nbsp;GUI&nbsp;backends&nbsp;can&nbsp;be&nbsp;written.&nbsp;&nbsp;As<br>
such,&nbsp;it&nbsp;throws&nbsp;a&nbsp;deprecated&nbsp;warning.<br>
&nbsp;<br>
Call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#FigureCanvasBase-start_event_loop_default">start_event_loop_default</a>(self,timeout=0)<br>
&nbsp;<br>
This&nbsp;call&nbsp;blocks&nbsp;until&nbsp;a&nbsp;callback&nbsp;function&nbsp;triggers<br>
<a href="#FigureCanvasBase-stop_event_loop">stop_event_loop</a>()&nbsp;or&nbsp;*timeout*&nbsp;is&nbsp;reached.&nbsp;&nbsp;If&nbsp;*timeout*&nbsp;is<br>
&lt;=0,&nbsp;never&nbsp;timeout.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-stop_event_loop"><strong>stop_event_loop</strong></a>(self)</dt><dd><tt>Stop&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;stop&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.<br>
&nbsp;<br>
This&nbsp;is&nbsp;implemented&nbsp;only&nbsp;for&nbsp;backends&nbsp;with&nbsp;GUIs.</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-stop_event_loop_default"><strong>stop_event_loop_default</strong></a>(self)</dt><dd><tt>Stop&nbsp;an&nbsp;event&nbsp;loop.&nbsp;&nbsp;This&nbsp;is&nbsp;used&nbsp;to&nbsp;stop&nbsp;a&nbsp;blocking&nbsp;event<br>
loop&nbsp;so&nbsp;that&nbsp;interactive&nbsp;functions,&nbsp;such&nbsp;as&nbsp;ginput&nbsp;and<br>
waitforbuttonpress,&nbsp;can&nbsp;wait&nbsp;for&nbsp;events.<br>
&nbsp;<br>
Call&nbsp;signature::<br>
&nbsp;<br>
<a href="#FigureCanvasBase-stop_event_loop_default">stop_event_loop_default</a>(self)</tt></dd></dl>

<dl><dt><a name="FigureCanvasBase-switch_backends"><strong>switch_backends</strong></a>(self, FigureCanvasClass)</dt><dd><tt>instantiate&nbsp;an&nbsp;instance&nbsp;of&nbsp;FigureCanvasClass<br>
&nbsp;<br>
This&nbsp;is&nbsp;used&nbsp;for&nbsp;backend&nbsp;switching,&nbsp;eg,&nbsp;to&nbsp;instantiate&nbsp;a<br>
FigureCanvasPS&nbsp;from&nbsp;a&nbsp;FigureCanvasGTK.&nbsp;&nbsp;Note,&nbsp;deep&nbsp;copying&nbsp;is<br>
not&nbsp;done,&nbsp;so&nbsp;any&nbsp;changes&nbsp;to&nbsp;one&nbsp;of&nbsp;the&nbsp;instances&nbsp;(eg,&nbsp;setting<br>
figure&nbsp;size&nbsp;or&nbsp;line&nbsp;props),&nbsp;will&nbsp;be&nbsp;reflected&nbsp;in&nbsp;the&nbsp;other</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>events</strong> = ['resize_event', 'draw_event', 'key_press_event', 'key_release_event', 'button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event', 'pick_event', 'idle_event']</dl>

<dl><dt><strong>filetypes</strong> = {'emf': 'Enhanced Metafile', 'eps': 'Encapsulated Postscript', 'pdf': 'Portable Document Format', 'png': 'Portable Network Graphics', 'ps': 'Postscript', 'raw': 'Raw RGBA bitmap', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector Graphics'}</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FigureManagerBase">class <strong>FigureManagerBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Helper&nbsp;class&nbsp;for&nbsp;matlab&nbsp;mode,&nbsp;wraps&nbsp;everything&nbsp;up&nbsp;into&nbsp;a&nbsp;neat&nbsp;bundle<br>
&nbsp;<br>
Public&nbsp;attibutes:<br>
&nbsp;<br>
*canvas*<br>
&nbsp;&nbsp;&nbsp;&nbsp;A&nbsp;:class:`<a href="#FigureCanvasBase">FigureCanvasBase</a>`&nbsp;instance<br>
&nbsp;<br>
*num*<br>
&nbsp;&nbsp;&nbsp;&nbsp;The&nbsp;figure&nbsp;nuamber<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="FigureManagerBase-__init__"><strong>__init__</strong></a>(self, canvas, num)</dt></dl>

<dl><dt><a name="FigureManagerBase-destroy"><strong>destroy</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureManagerBase-full_screen_toggle"><strong>full_screen_toggle</strong></a>(self)</dt></dl>

<dl><dt><a name="FigureManagerBase-key_press"><strong>key_press</strong></a>(self, event)</dt></dl>

<dl><dt><a name="FigureManagerBase-resize"><strong>resize</strong></a>(self, w, h)</dt><dd><tt>For&nbsp;gui&nbsp;backends:&nbsp;resize&nbsp;window&nbsp;in&nbsp;pixels</tt></dd></dl>

<dl><dt><a name="FigureManagerBase-set_window_title"><strong>set_window_title</strong></a>(self, title)</dt><dd><tt>Set&nbsp;the&nbsp;title&nbsp;text&nbsp;of&nbsp;the&nbsp;window&nbsp;containing&nbsp;the&nbsp;figure.&nbsp;&nbsp;Note&nbsp;that<br>
this&nbsp;has&nbsp;no&nbsp;effect&nbsp;if&nbsp;there&nbsp;is&nbsp;no&nbsp;window&nbsp;(eg,&nbsp;a&nbsp;PS&nbsp;backend).</tt></dd></dl>

<dl><dt><a name="FigureManagerBase-show_popup"><strong>show_popup</strong></a>(self, msg)</dt><dd><tt>Display&nbsp;message&nbsp;in&nbsp;a&nbsp;popup&nbsp;--&nbsp;GUI&nbsp;only</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="GraphicsContextBase">class <strong>GraphicsContextBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;abstract&nbsp;base&nbsp;class&nbsp;that&nbsp;provides&nbsp;color,&nbsp;line&nbsp;styles,&nbsp;etc...<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="GraphicsContextBase-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<dl><dt><a name="GraphicsContextBase-copy_properties"><strong>copy_properties</strong></a>(self, gc)</dt><dd><tt>Copy&nbsp;properties&nbsp;from&nbsp;gc&nbsp;to&nbsp;self</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt><dd><tt>Return&nbsp;true&nbsp;if&nbsp;the&nbsp;object&nbsp;should&nbsp;try&nbsp;to&nbsp;do&nbsp;antialiased&nbsp;rendering</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_capstyle"><strong>get_capstyle</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;capstyle&nbsp;as&nbsp;a&nbsp;string&nbsp;in&nbsp;('butt',&nbsp;'round',&nbsp;'projecting')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;in&nbsp;the&nbsp;form&nbsp;(path,&nbsp;transform),&nbsp;where&nbsp;path<br>
is&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;and&nbsp;transform&nbsp;is<br>
an&nbsp;affine&nbsp;transform&nbsp;to&nbsp;apply&nbsp;to&nbsp;the&nbsp;path&nbsp;before&nbsp;clipping.</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_clip_rectangle"><strong>get_clip_rectangle</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;rectangle&nbsp;as&nbsp;a&nbsp;:class:`~matplotlib.transforms.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_dashes"><strong>get_dashes</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;dash&nbsp;information&nbsp;as&nbsp;an&nbsp;offset&nbsp;dashlist&nbsp;tuple&nbsp;The<br>
dash&nbsp;list&nbsp;is&nbsp;a&nbsp;even&nbsp;size&nbsp;list&nbsp;that&nbsp;gives&nbsp;the&nbsp;ink&nbsp;on,&nbsp;ink&nbsp;off<br>
in&nbsp;pixels.&nbsp;&nbsp;See&nbsp;p107&nbsp;of&nbsp;to&nbsp;postscript&nbsp;`BLUEBOOK<br>
&lt;<a href="http://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF&gt;`_">http://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF&gt;`_</a><br>
for&nbsp;more&nbsp;info<br>
&nbsp;<br>
Default&nbsp;value&nbsp;is&nbsp;None</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>Gets&nbsp;the&nbsp;current&nbsp;hatch&nbsp;style</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_joinstyle"><strong>get_joinstyle</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;line&nbsp;join&nbsp;style&nbsp;as&nbsp;one&nbsp;of&nbsp;('miter',&nbsp;'round',&nbsp;'bevel')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_linestyle"><strong>get_linestyle</strong></a>(self, style)</dt><dd><tt>Return&nbsp;the&nbsp;linestyle:&nbsp;one&nbsp;of&nbsp;('solid',&nbsp;'dashed',&nbsp;'dashdot',<br>
'dotted').</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;line&nbsp;width&nbsp;in&nbsp;points&nbsp;as&nbsp;a&nbsp;scalar</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-get_rgb"><strong>get_rgb</strong></a>(self)</dt><dd><tt>returns&nbsp;a&nbsp;tuple&nbsp;of&nbsp;three&nbsp;floats&nbsp;from&nbsp;0-1.&nbsp;&nbsp;color&nbsp;can&nbsp;be&nbsp;a<br>
matlab&nbsp;format&nbsp;string,&nbsp;a&nbsp;html&nbsp;hex&nbsp;color&nbsp;string,&nbsp;or&nbsp;a&nbsp;rgb&nbsp;tuple</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_antialiased"><strong>set_antialiased</strong></a>(self, b)</dt><dd><tt>True&nbsp;if&nbsp;object&nbsp;should&nbsp;be&nbsp;drawn&nbsp;with&nbsp;antialiased&nbsp;rendering</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_capstyle"><strong>set_capstyle</strong></a>(self, cs)</dt><dd><tt>Set&nbsp;the&nbsp;capstyle&nbsp;as&nbsp;a&nbsp;string&nbsp;in&nbsp;('butt',&nbsp;'round',&nbsp;'projecting')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_clip_path"><strong>set_clip_path</strong></a>(self, path)</dt><dd><tt>Set&nbsp;the&nbsp;clip&nbsp;path&nbsp;and&nbsp;transformation.&nbsp;&nbsp;Path&nbsp;should&nbsp;be&nbsp;a<br>
:class:`~matplotlib.transforms.TransformedPath`&nbsp;instance.</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_clip_rectangle"><strong>set_clip_rectangle</strong></a>(self, rectangle)</dt><dd><tt>Set&nbsp;the&nbsp;clip&nbsp;rectangle&nbsp;with&nbsp;sequence&nbsp;(left,&nbsp;bottom,&nbsp;width,&nbsp;height)</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_dashes"><strong>set_dashes</strong></a>(self, dash_offset, dash_list)</dt><dd><tt>Set&nbsp;the&nbsp;dash&nbsp;style&nbsp;for&nbsp;the&nbsp;gc.<br>
&nbsp;<br>
*dash_offset*<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;the&nbsp;offset&nbsp;(usually&nbsp;0).<br>
&nbsp;<br>
*dash_list*<br>
&nbsp;&nbsp;&nbsp;&nbsp;specifies&nbsp;the&nbsp;on-off&nbsp;sequence&nbsp;as&nbsp;points.&nbsp;&nbsp;``(None,&nbsp;None)``&nbsp;specifies&nbsp;a&nbsp;solid&nbsp;line</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_foreground"><strong>set_foreground</strong></a>(self, fg, isRGB<font color="#909090">=False</font>)</dt><dd><tt>Set&nbsp;the&nbsp;foreground&nbsp;color.&nbsp;&nbsp;fg&nbsp;can&nbsp;be&nbsp;a&nbsp;matlab&nbsp;format&nbsp;string,&nbsp;a<br>
html&nbsp;hex&nbsp;color&nbsp;string,&nbsp;an&nbsp;rgb&nbsp;unit&nbsp;tuple,&nbsp;or&nbsp;a&nbsp;float&nbsp;between&nbsp;0<br>
and&nbsp;1.&nbsp;&nbsp;In&nbsp;the&nbsp;latter&nbsp;case,&nbsp;grayscale&nbsp;is&nbsp;used.<br>
&nbsp;<br>
The&nbsp;:class:`<a href="#GraphicsContextBase">GraphicsContextBase</a>`&nbsp;converts&nbsp;colors&nbsp;to&nbsp;rgb<br>
internally.&nbsp;&nbsp;If&nbsp;you&nbsp;know&nbsp;the&nbsp;color&nbsp;is&nbsp;rgb&nbsp;already,&nbsp;you&nbsp;can&nbsp;set<br>
``isRGB=True``&nbsp;to&nbsp;avoid&nbsp;the&nbsp;performace&nbsp;hit&nbsp;of&nbsp;the&nbsp;conversion</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_graylevel"><strong>set_graylevel</strong></a>(self, frac)</dt><dd><tt>Set&nbsp;the&nbsp;foreground&nbsp;color&nbsp;to&nbsp;be&nbsp;a&nbsp;gray&nbsp;level&nbsp;with&nbsp;*frac*</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_hatch"><strong>set_hatch</strong></a>(self, hatch)</dt><dd><tt>Sets&nbsp;the&nbsp;hatch&nbsp;style&nbsp;for&nbsp;filling</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_joinstyle"><strong>set_joinstyle</strong></a>(self, js)</dt><dd><tt>Set&nbsp;the&nbsp;join&nbsp;style&nbsp;to&nbsp;be&nbsp;one&nbsp;of&nbsp;('miter',&nbsp;'round',&nbsp;'bevel')</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_linestyle"><strong>set_linestyle</strong></a>(self, style)</dt><dd><tt>Set&nbsp;the&nbsp;linestyle&nbsp;to&nbsp;be&nbsp;one&nbsp;of&nbsp;('solid',&nbsp;'dashed',&nbsp;'dashdot',<br>
'dotted').</tt></dd></dl>

<dl><dt><a name="GraphicsContextBase-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;linewidth&nbsp;in&nbsp;points</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>dashd</strong> = {'dashdot': (0, (3.0, 5.0, 1.0, 5.0)), 'dashed': (0, (6.0, 6.0)), 'dotted': (0, (1.0, 3.0)), 'solid': (None, None)}</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="IdleEvent">class <strong>IdleEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;event&nbsp;triggered&nbsp;by&nbsp;the&nbsp;GUI&nbsp;backend&nbsp;when&nbsp;it&nbsp;is&nbsp;idle&nbsp;--&nbsp;useful<br>
for&nbsp;passive&nbsp;animation<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods inherited from <a href="matplotlib.backend_bases.html#Event">Event</a>:<br>
<dl><dt><a name="IdleEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, guiEvent<font color="#909090">=None</font>)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="KeyEvent">class <strong>KeyEvent</strong></a>(<a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;key&nbsp;event&nbsp;(key&nbsp;press,&nbsp;key&nbsp;release).<br>
&nbsp;<br>
Attach&nbsp;additional&nbsp;attributes&nbsp;as&nbsp;defined&nbsp;in<br>
:meth:`<a href="#FigureCanvasBase">FigureCanvasBase</a>.mpl_connect`.<br>
&nbsp;<br>
In&nbsp;addition&nbsp;to&nbsp;the&nbsp;:class:`<a href="#Event">Event</a>`&nbsp;and&nbsp;:class:`<a href="#LocationEvent">LocationEvent</a>`<br>
attributes,&nbsp;the&nbsp;following&nbsp;attributes&nbsp;are&nbsp;defined:<br>
&nbsp;<br>
*key*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;key&nbsp;pressed:&nbsp;None,&nbsp;chr(range(255),&nbsp;shift,&nbsp;win,&nbsp;or&nbsp;control<br>
&nbsp;<br>
This&nbsp;interface&nbsp;may&nbsp;change&nbsp;slightly&nbsp;when&nbsp;better&nbsp;support&nbsp;for<br>
modifier&nbsp;keys&nbsp;is&nbsp;included.<br>
&nbsp;<br>
&nbsp;<br>
Example&nbsp;usage::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;on_key(event):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'you&nbsp;pressed',&nbsp;event.key,&nbsp;event.xdata,&nbsp;event.ydata<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;cid&nbsp;=&nbsp;fig.canvas.mpl_connect('key_press_event',&nbsp;on_key)<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.backend_bases.html#KeyEvent">KeyEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#Event">Event</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="KeyEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, key, x<font color="#909090">=0</font>, y<font color="#909090">=0</font>, guiEvent<font color="#909090">=None</font>)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>:<br>
<dl><dt><strong>inaxes</strong> = None</dl>

<dl><dt><strong>x</strong> = None</dl>

<dl><dt><strong>xdata</strong> = None</dl>

<dl><dt><strong>y</strong> = None</dl>

<dl><dt><strong>ydata</strong> = None</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="LocationEvent">class <strong>LocationEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;event&nbsp;that&nbsp;has&nbsp;a&nbsp;screen&nbsp;location<br>
&nbsp;<br>
The&nbsp;following&nbsp;additional&nbsp;attributes&nbsp;are&nbsp;defined&nbsp;and&nbsp;shown&nbsp;with<br>
their&nbsp;default&nbsp;values<br>
&nbsp;<br>
In&nbsp;addition&nbsp;to&nbsp;the&nbsp;:class:`<a href="#Event">Event</a>`&nbsp;attributes,&nbsp;the&nbsp;following&nbsp;event&nbsp;attributes&nbsp;are&nbsp;defined:<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;left&nbsp;of&nbsp;canvas<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;position&nbsp;-&nbsp;pixels&nbsp;from&nbsp;bottom&nbsp;of&nbsp;canvas<br>
&nbsp;<br>
*inaxes*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`~matplotlib.axes.Axes`&nbsp;instance&nbsp;if&nbsp;mouse&nbsp;is&nbsp;over&nbsp;axes<br>
&nbsp;<br>
*xdata*<br>
&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>
&nbsp;<br>
*ydata*<br>
&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;coord&nbsp;of&nbsp;mouse&nbsp;in&nbsp;data&nbsp;coords<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="LocationEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, x, y, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>*x*,&nbsp;*y*&nbsp;in&nbsp;figure&nbsp;coords,&nbsp;0,0&nbsp;=&nbsp;bottom,&nbsp;left</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>inaxes</strong> = None</dl>

<dl><dt><strong>x</strong> = None</dl>

<dl><dt><strong>xdata</strong> = None</dl>

<dl><dt><strong>y</strong> = None</dl>

<dl><dt><strong>ydata</strong> = None</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="MouseEvent">class <strong>MouseEvent</strong></a>(<a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;mouse&nbsp;event&nbsp;('button_press_event',&nbsp;'button_release_event',&nbsp;'scroll_event',<br>
'motion_notify_event').<br>
&nbsp;<br>
In&nbsp;addition&nbsp;to&nbsp;the&nbsp;:class:`<a href="#Event">Event</a>`&nbsp;and&nbsp;:class:`<a href="#LocationEvent">LocationEvent</a>`<br>
attributes,&nbsp;the&nbsp;following&nbsp;attributes&nbsp;are&nbsp;defined:<br>
&nbsp;<br>
*button*<br>
&nbsp;&nbsp;&nbsp;&nbsp;button&nbsp;pressed&nbsp;None,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;'up',&nbsp;'down'&nbsp;(up&nbsp;and&nbsp;down&nbsp;are&nbsp;used&nbsp;for&nbsp;scroll&nbsp;events)<br>
&nbsp;<br>
*key*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;key&nbsp;pressed:&nbsp;None,&nbsp;chr(range(255),&nbsp;'shift',&nbsp;'win',&nbsp;or&nbsp;'control'<br>
&nbsp;<br>
*step*<br>
&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;of&nbsp;scroll&nbsp;steps&nbsp;(positive&nbsp;for&nbsp;'up',&nbsp;negative&nbsp;for&nbsp;'down')<br>
&nbsp;<br>
&nbsp;<br>
Example&nbsp;usage::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;on_press(event):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'you&nbsp;pressed',&nbsp;event.button,&nbsp;event.xdata,&nbsp;event.ydata<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;cid&nbsp;=&nbsp;fig.canvas.mpl_connect('button_press_event',&nbsp;on_press)<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.backend_bases.html#MouseEvent">MouseEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#LocationEvent">LocationEvent</a></dd>
<dd><a href="matplotlib.backend_bases.html#Event">Event</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="MouseEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, x, y, button<font color="#909090">=None</font>, key<font color="#909090">=None</font>, step<font color="#909090">=0</font>, guiEvent<font color="#909090">=None</font>)</dt><dd><tt>x,&nbsp;y&nbsp;in&nbsp;figure&nbsp;coords,&nbsp;0,0&nbsp;=&nbsp;bottom,&nbsp;left<br>
button&nbsp;pressed&nbsp;None,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;'up',&nbsp;'down'</tt></dd></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>button</strong> = None</dl>

<dl><dt><strong>inaxes</strong> = None</dl>

<dl><dt><strong>step</strong> = None</dl>

<dl><dt><strong>x</strong> = None</dl>

<dl><dt><strong>xdata</strong> = None</dl>

<dl><dt><strong>y</strong> = None</dl>

<dl><dt><strong>ydata</strong> = None</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="NavigationToolbar2">class <strong>NavigationToolbar2</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Base&nbsp;class&nbsp;for&nbsp;the&nbsp;navigation&nbsp;cursor,&nbsp;version&nbsp;2<br>
&nbsp;<br>
backends&nbsp;must&nbsp;implement&nbsp;a&nbsp;canvas&nbsp;that&nbsp;handles&nbsp;connections&nbsp;for<br>
'button_press_event'&nbsp;and&nbsp;'button_release_event'.&nbsp;&nbsp;See<br>
:meth:`<a href="#FigureCanvasBase">FigureCanvasBase</a>.mpl_connect`&nbsp;for&nbsp;more&nbsp;information<br>
&nbsp;<br>
&nbsp;<br>
They&nbsp;must&nbsp;also&nbsp;define<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`save_figure`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;save&nbsp;the&nbsp;current&nbsp;figure<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`set_cursor`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;you&nbsp;want&nbsp;the&nbsp;pointer&nbsp;icon&nbsp;to&nbsp;change<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`_init_toolbar`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create&nbsp;your&nbsp;toolbar&nbsp;widget<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`draw_rubberband`&nbsp;(optional)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw&nbsp;the&nbsp;zoom&nbsp;to&nbsp;rect&nbsp;"rubberband"&nbsp;rectangle<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`press`&nbsp;&nbsp;(optional)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whenever&nbsp;a&nbsp;mouse&nbsp;button&nbsp;is&nbsp;pressed,&nbsp;you'll&nbsp;be&nbsp;notified&nbsp;with<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`release`&nbsp;(optional)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whenever&nbsp;a&nbsp;mouse&nbsp;button&nbsp;is&nbsp;released,&nbsp;you'll&nbsp;be&nbsp;notified&nbsp;with<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`dynamic_update`&nbsp;(optional)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dynamically&nbsp;update&nbsp;the&nbsp;window&nbsp;while&nbsp;navigating<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`set_message`&nbsp;(optional)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display&nbsp;message<br>
&nbsp;<br>
&nbsp;&nbsp;:meth:`set_history_buttons`&nbsp;(optional)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;you&nbsp;can&nbsp;change&nbsp;the&nbsp;history&nbsp;back&nbsp;/&nbsp;forward&nbsp;buttons&nbsp;to<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indicate&nbsp;disabled&nbsp;/&nbsp;enabled&nbsp;state.<br>
&nbsp;<br>
That's&nbsp;it,&nbsp;we'll&nbsp;do&nbsp;the&nbsp;rest!<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="NavigationToolbar2-__init__"><strong>__init__</strong></a>(self, canvas)</dt></dl>

<dl><dt><a name="NavigationToolbar2-back"><strong>back</strong></a>(self, *args)</dt><dd><tt>move&nbsp;back&nbsp;up&nbsp;the&nbsp;view&nbsp;lim&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-drag_pan"><strong>drag_pan</strong></a>(self, event)</dt><dd><tt>the&nbsp;drag&nbsp;callback&nbsp;in&nbsp;pan/zoom&nbsp;mode</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-draw"><strong>draw</strong></a>(self)</dt><dd><tt>redraw&nbsp;the&nbsp;canvases,&nbsp;update&nbsp;the&nbsp;locators</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-draw_rubberband"><strong>draw_rubberband</strong></a>(self, event, x0, y0, x1, y1)</dt><dd><tt>draw&nbsp;a&nbsp;rectangle&nbsp;rubberband&nbsp;to&nbsp;indicate&nbsp;zoom&nbsp;limits</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-dynamic_update"><strong>dynamic_update</strong></a>(self)</dt></dl>

<dl><dt><a name="NavigationToolbar2-forward"><strong>forward</strong></a>(self, *args)</dt><dd><tt>move&nbsp;forward&nbsp;in&nbsp;the&nbsp;view&nbsp;lim&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-home"><strong>home</strong></a>(self, *args)</dt><dd><tt>restore&nbsp;the&nbsp;original&nbsp;view</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-mouse_move"><strong>mouse_move</strong></a>(self, event)</dt></dl>

<dl><dt><a name="NavigationToolbar2-pan"><strong>pan</strong></a>(self, *args)</dt><dd><tt>Activate&nbsp;the&nbsp;pan/zoom&nbsp;tool.&nbsp;pan&nbsp;with&nbsp;left&nbsp;button,&nbsp;zoom&nbsp;with&nbsp;right</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-press"><strong>press</strong></a>(self, event)</dt><dd><tt>this&nbsp;will&nbsp;be&nbsp;called&nbsp;whenver&nbsp;a&nbsp;mouse&nbsp;button&nbsp;is&nbsp;pressed</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-press_pan"><strong>press_pan</strong></a>(self, event)</dt><dd><tt>the&nbsp;press&nbsp;mouse&nbsp;button&nbsp;in&nbsp;pan/zoom&nbsp;mode&nbsp;callback</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-press_zoom"><strong>press_zoom</strong></a>(self, event)</dt><dd><tt>the&nbsp;press&nbsp;mouse&nbsp;button&nbsp;in&nbsp;zoom&nbsp;to&nbsp;rect&nbsp;mode&nbsp;callback</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-push_current"><strong>push_current</strong></a>(self)</dt><dd><tt>push&nbsp;the&nbsp;current&nbsp;view&nbsp;limits&nbsp;and&nbsp;position&nbsp;onto&nbsp;the&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-release"><strong>release</strong></a>(self, event)</dt><dd><tt>this&nbsp;will&nbsp;be&nbsp;called&nbsp;whenever&nbsp;mouse&nbsp;button&nbsp;is&nbsp;released</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-release_pan"><strong>release_pan</strong></a>(self, event)</dt><dd><tt>the&nbsp;release&nbsp;mouse&nbsp;button&nbsp;callback&nbsp;in&nbsp;pan/zoom&nbsp;mode</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-release_zoom"><strong>release_zoom</strong></a>(self, event)</dt><dd><tt>the&nbsp;release&nbsp;mouse&nbsp;button&nbsp;callback&nbsp;in&nbsp;zoom&nbsp;to&nbsp;rect&nbsp;mode</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-save_figure"><strong>save_figure</strong></a>(self, *args)</dt><dd><tt>save&nbsp;the&nbsp;current&nbsp;figure</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-set_cursor"><strong>set_cursor</strong></a>(self, cursor)</dt><dd><tt>Set&nbsp;the&nbsp;current&nbsp;cursor&nbsp;to&nbsp;one&nbsp;of&nbsp;the&nbsp;:class:`<a href="#Cursors">Cursors</a>`<br>
enums&nbsp;values</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-set_history_buttons"><strong>set_history_buttons</strong></a>(self)</dt><dd><tt>enable&nbsp;or&nbsp;disable&nbsp;back/forward&nbsp;button</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-set_message"><strong>set_message</strong></a>(self, s)</dt><dd><tt>display&nbsp;a&nbsp;message&nbsp;on&nbsp;toolbar&nbsp;or&nbsp;in&nbsp;status&nbsp;bar</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-update"><strong>update</strong></a>(self)</dt><dd><tt>reset&nbsp;the&nbsp;axes&nbsp;stack</tt></dd></dl>

<dl><dt><a name="NavigationToolbar2-zoom"><strong>zoom</strong></a>(self, *args)</dt><dd><tt>activate&nbsp;zoom&nbsp;to&nbsp;rect&nbsp;mode</tt></dd></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="PickEvent">class <strong>PickEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>a&nbsp;pick&nbsp;event,&nbsp;fired&nbsp;when&nbsp;the&nbsp;user&nbsp;picks&nbsp;a&nbsp;location&nbsp;on&nbsp;the&nbsp;canvas<br>
sufficiently&nbsp;close&nbsp;to&nbsp;an&nbsp;artist.<br>
&nbsp;<br>
Attrs:&nbsp;all&nbsp;the&nbsp;:class:`<a href="#Event">Event</a>`&nbsp;attributes&nbsp;plus<br>
&nbsp;<br>
*mouseevent*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`<a href="#MouseEvent">MouseEvent</a>`&nbsp;that&nbsp;generated&nbsp;the&nbsp;pick<br>
&nbsp;<br>
*artist*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`~matplotlib.artist.Artist`&nbsp;picked<br>
&nbsp;<br>
other<br>
&nbsp;&nbsp;&nbsp;&nbsp;extra&nbsp;class&nbsp;dependent&nbsp;attrs&nbsp;--&nbsp;eg&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;:class:`~matplotlib.lines.Line2D`&nbsp;pick&nbsp;may&nbsp;define&nbsp;different<br>
&nbsp;&nbsp;&nbsp;&nbsp;extra&nbsp;attributes&nbsp;than&nbsp;a<br>
&nbsp;&nbsp;&nbsp;&nbsp;:class:`~matplotlib.collections.PatchCollection`&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;<br>
Example&nbsp;usage::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;line,&nbsp;=&nbsp;ax.plot(rand(100),&nbsp;'o',&nbsp;picker=5)&nbsp;&nbsp;#&nbsp;5&nbsp;points&nbsp;tolerance<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;on_pick(event):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thisline&nbsp;=&nbsp;event.artist<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xdata,&nbsp;ydata&nbsp;=&nbsp;thisline.get_data()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ind&nbsp;=&nbsp;event.ind<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'on&nbsp;pick&nbsp;line:',&nbsp;zip(xdata[ind],&nbsp;ydata[ind])<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;cid&nbsp;=&nbsp;fig.canvas.mpl_connect('pick_event',&nbsp;on_pick)<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="PickEvent-__init__"><strong>__init__</strong></a>(self, name, canvas, mouseevent, artist, guiEvent<font color="#909090">=None</font>, **kwargs)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="RendererBase">class <strong>RendererBase</strong></a></font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;abstract&nbsp;base&nbsp;class&nbsp;to&nbsp;handle&nbsp;drawing/rendering&nbsp;operations.<br>
&nbsp;<br>
The&nbsp;following&nbsp;methods&nbsp;*must*&nbsp;be&nbsp;implemented&nbsp;in&nbsp;the&nbsp;backend:<br>
&nbsp;<br>
*&nbsp;:meth:`draw_path`<br>
*&nbsp;:meth:`draw_image`<br>
*&nbsp;:meth:`draw_text`<br>
*&nbsp;:meth:`get_text_width_height_descent`<br>
&nbsp;<br>
The&nbsp;following&nbsp;methods&nbsp;*should*&nbsp;be&nbsp;implemented&nbsp;in&nbsp;the&nbsp;backend&nbsp;for<br>
optimization&nbsp;reasons:<br>
&nbsp;<br>
*&nbsp;:meth:`draw_markers`<br>
*&nbsp;:meth:`draw_path_collection`<br>
*&nbsp;:meth:`draw_quad_mesh`<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="RendererBase-__init__"><strong>__init__</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererBase-close_group"><strong>close_group</strong></a>(self, s)</dt><dd><tt>Close&nbsp;a&nbsp;grouping&nbsp;element&nbsp;with&nbsp;label&nbsp;*s*<br>
Is&nbsp;only&nbsp;currently&nbsp;used&nbsp;by&nbsp;:mod:`~matplotlib.backends.backend_svg`</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_image"><strong>draw_image</strong></a>(self, x, y, im, bbox, clippath<font color="#909090">=None</font>, clippath_trans<font color="#909090">=None</font>)</dt><dd><tt>Draw&nbsp;the&nbsp;image&nbsp;instance&nbsp;into&nbsp;the&nbsp;current&nbsp;axes;<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;the&nbsp;distance&nbsp;in&nbsp;pixels&nbsp;from&nbsp;the&nbsp;left&nbsp;hand&nbsp;side&nbsp;of&nbsp;the&nbsp;canvas.<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;distance&nbsp;from&nbsp;the&nbsp;origin.&nbsp;&nbsp;That&nbsp;is,&nbsp;if&nbsp;origin&nbsp;is<br>
&nbsp;&nbsp;&nbsp;&nbsp;upper,&nbsp;y&nbsp;is&nbsp;the&nbsp;distance&nbsp;from&nbsp;top.&nbsp;&nbsp;If&nbsp;origin&nbsp;is&nbsp;lower,&nbsp;y<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;the&nbsp;distance&nbsp;from&nbsp;bottom<br>
&nbsp;<br>
*im*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`matplotlib._image.Image`&nbsp;instance<br>
&nbsp;<br>
*bbox*<br>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;:class:`matplotlib.transforms.Bbox`&nbsp;instance&nbsp;for&nbsp;clipping,&nbsp;or<br>
&nbsp;&nbsp;&nbsp;&nbsp;None</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_markers"><strong>draw_markers</strong></a>(self, gc, marker_path, marker_trans, path, trans, rgbFace<font color="#909090">=None</font>)</dt><dd><tt>Draws&nbsp;a&nbsp;marker&nbsp;at&nbsp;each&nbsp;of&nbsp;the&nbsp;vertices&nbsp;in&nbsp;path.&nbsp;&nbsp;This&nbsp;includes<br>
all&nbsp;vertices,&nbsp;including&nbsp;control&nbsp;points&nbsp;on&nbsp;curves.&nbsp;&nbsp;To&nbsp;avoid<br>
that&nbsp;behavior,&nbsp;those&nbsp;vertices&nbsp;should&nbsp;be&nbsp;removed&nbsp;before&nbsp;calling<br>
this&nbsp;function.<br>
&nbsp;<br>
*gc*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`<a href="#GraphicsContextBase">GraphicsContextBase</a>`&nbsp;instance<br>
&nbsp;<br>
*marker_trans*<br>
&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;an&nbsp;affine&nbsp;transform&nbsp;applied&nbsp;to&nbsp;the&nbsp;marker.<br>
&nbsp;<br>
*trans*<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is&nbsp;an&nbsp;affine&nbsp;transform&nbsp;applied&nbsp;to&nbsp;the&nbsp;path.<br>
&nbsp;<br>
This&nbsp;provides&nbsp;a&nbsp;fallback&nbsp;implementation&nbsp;of&nbsp;draw_markers&nbsp;that<br>
makes&nbsp;multiple&nbsp;calls&nbsp;to&nbsp;:meth:`draw_path`.&nbsp;&nbsp;Some&nbsp;backends&nbsp;may<br>
want&nbsp;to&nbsp;override&nbsp;this&nbsp;method&nbsp;in&nbsp;order&nbsp;to&nbsp;draw&nbsp;the&nbsp;marker&nbsp;only<br>
once&nbsp;and&nbsp;reuse&nbsp;it&nbsp;multiple&nbsp;times.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_path"><strong>draw_path</strong></a>(self, gc, path, transform, rgbFace<font color="#909090">=None</font>)</dt><dd><tt>Draws&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;using&nbsp;the<br>
given&nbsp;affine&nbsp;transform.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_path_collection"><strong>draw_path_collection</strong></a>(self, master_transform, cliprect, clippath, clippath_trans, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds)</dt><dd><tt>Draws&nbsp;a&nbsp;collection&nbsp;of&nbsp;paths,&nbsp;selecting&nbsp;drawing&nbsp;properties&nbsp;from<br>
the&nbsp;lists&nbsp;*facecolors*,&nbsp;*edgecolors*,&nbsp;*linewidths*,<br>
*linestyles*&nbsp;and&nbsp;*antialiaseds*.&nbsp;*offsets*&nbsp;is&nbsp;a&nbsp;list&nbsp;of<br>
offsets&nbsp;to&nbsp;apply&nbsp;to&nbsp;each&nbsp;of&nbsp;the&nbsp;paths.&nbsp;&nbsp;The&nbsp;offsets&nbsp;in<br>
*offsets*&nbsp;are&nbsp;first&nbsp;transformed&nbsp;by&nbsp;*offsetTrans*&nbsp;before<br>
being&nbsp;applied.<br>
&nbsp;<br>
This&nbsp;provides&nbsp;a&nbsp;fallback&nbsp;implementation&nbsp;of<br>
:meth:`draw_path_collection`&nbsp;that&nbsp;makes&nbsp;multiple&nbsp;calls&nbsp;to<br>
draw_path.&nbsp;&nbsp;Some&nbsp;backends&nbsp;may&nbsp;want&nbsp;to&nbsp;override&nbsp;this&nbsp;in&nbsp;order<br>
to&nbsp;render&nbsp;each&nbsp;set&nbsp;of&nbsp;path&nbsp;data&nbsp;only&nbsp;once,&nbsp;and&nbsp;then&nbsp;reference<br>
that&nbsp;path&nbsp;multiple&nbsp;times&nbsp;with&nbsp;the&nbsp;different&nbsp;offsets,&nbsp;colors,<br>
styles&nbsp;etc.&nbsp;&nbsp;The&nbsp;generator&nbsp;methods<br>
:meth:`_iter_collection_raw_paths`&nbsp;and<br>
:meth:`_iter_collection`&nbsp;are&nbsp;provided&nbsp;to&nbsp;help&nbsp;with&nbsp;(and<br>
standardize)&nbsp;the&nbsp;implementation&nbsp;across&nbsp;backends.&nbsp;&nbsp;It&nbsp;is&nbsp;highly<br>
recommended&nbsp;to&nbsp;use&nbsp;those&nbsp;generators,&nbsp;so&nbsp;that&nbsp;changes&nbsp;to&nbsp;the<br>
behavior&nbsp;of&nbsp;:meth:`draw_path_collection`&nbsp;can&nbsp;be&nbsp;made&nbsp;globally.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_quad_mesh"><strong>draw_quad_mesh</strong></a>(self, master_transform, cliprect, clippath, clippath_trans, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, showedges)</dt><dd><tt>This&nbsp;provides&nbsp;a&nbsp;fallback&nbsp;implementation&nbsp;of<br>
:meth:`draw_quad_mesh`&nbsp;that&nbsp;generates&nbsp;paths&nbsp;and&nbsp;then&nbsp;calls<br>
:meth:`draw_path_collection`.</tt></dd></dl>

<dl><dt><a name="RendererBase-draw_tex"><strong>draw_tex</strong></a>(self, gc, x, y, s, prop, angle, ismath<font color="#909090">='TeX!'</font>)</dt></dl>

<dl><dt><a name="RendererBase-draw_text"><strong>draw_text</strong></a>(self, gc, x, y, s, prop, angle, ismath<font color="#909090">=False</font>)</dt><dd><tt>Draw&nbsp;the&nbsp;text&nbsp;instance<br>
&nbsp;<br>
*gc*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;:class:`<a href="#GraphicsContextBase">GraphicsContextBase</a>`&nbsp;instance<br>
&nbsp;<br>
*x*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;x&nbsp;location&nbsp;of&nbsp;the&nbsp;text&nbsp;in&nbsp;display&nbsp;coords<br>
&nbsp;<br>
*y*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;y&nbsp;location&nbsp;of&nbsp;the&nbsp;text&nbsp;in&nbsp;display&nbsp;coords<br>
&nbsp;<br>
*s*<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;:class:`matplotlib.text.Text`&nbsp;instance<br>
&nbsp;<br>
*prop*<br>
&nbsp;&nbsp;a&nbsp;:class:`matplotlib.font_manager.FontProperties`&nbsp;instance<br>
&nbsp;<br>
*angle*<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;rotation&nbsp;angle&nbsp;in&nbsp;degrees<br>
&nbsp;<br>
**backend&nbsp;implementers&nbsp;note**<br>
&nbsp;<br>
When&nbsp;you&nbsp;are&nbsp;trying&nbsp;to&nbsp;determine&nbsp;if&nbsp;you&nbsp;have&nbsp;gotten&nbsp;your&nbsp;bounding&nbsp;box<br>
right&nbsp;(which&nbsp;is&nbsp;what&nbsp;enables&nbsp;the&nbsp;text&nbsp;layout/alignment&nbsp;to&nbsp;work<br>
properly),&nbsp;it&nbsp;helps&nbsp;to&nbsp;change&nbsp;the&nbsp;line&nbsp;in&nbsp;text.py::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;0:&nbsp;bbox_artist(self,&nbsp;renderer)<br>
&nbsp;<br>
to&nbsp;if&nbsp;1,&nbsp;and&nbsp;then&nbsp;the&nbsp;actual&nbsp;bounding&nbsp;box&nbsp;will&nbsp;be&nbsp;blotted&nbsp;along&nbsp;with<br>
your&nbsp;text.</tt></dd></dl>

<dl><dt><a name="RendererBase-flipy"><strong>flipy</strong></a>(self)</dt><dd><tt>Return&nbsp;true&nbsp;if&nbsp;y&nbsp;small&nbsp;numbers&nbsp;are&nbsp;top&nbsp;for&nbsp;renderer&nbsp;Is&nbsp;used<br>
for&nbsp;drawing&nbsp;text&nbsp;(:mod:`matplotlib.text`)&nbsp;and&nbsp;images<br>
(:mod:`matplotlib.image`)&nbsp;only</tt></dd></dl>

<dl><dt><a name="RendererBase-get_canvas_width_height"><strong>get_canvas_width_height</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;canvas&nbsp;width&nbsp;and&nbsp;height&nbsp;in&nbsp;display&nbsp;coords</tt></dd></dl>

<dl><dt><a name="RendererBase-get_image_magnification"><strong>get_image_magnification</strong></a>(self)</dt><dd><tt>Get&nbsp;the&nbsp;factor&nbsp;by&nbsp;which&nbsp;to&nbsp;magnify&nbsp;images&nbsp;passed&nbsp;to&nbsp;:meth:`draw_image`.<br>
Allows&nbsp;a&nbsp;backend&nbsp;to&nbsp;have&nbsp;images&nbsp;at&nbsp;a&nbsp;different&nbsp;resolution&nbsp;to&nbsp;other<br>
artists.</tt></dd></dl>

<dl><dt><a name="RendererBase-get_texmanager"><strong>get_texmanager</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;:class:`matplotlib.texmanager.TexManager`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RendererBase-get_text_width_height_descent"><strong>get_text_width_height_descent</strong></a>(self, s, prop, ismath)</dt><dd><tt>get&nbsp;the&nbsp;width&nbsp;and&nbsp;height,&nbsp;and&nbsp;the&nbsp;offset&nbsp;from&nbsp;the&nbsp;bottom&nbsp;to&nbsp;the<br>
baseline&nbsp;(descent),&nbsp;in&nbsp;display&nbsp;coords&nbsp;of&nbsp;the&nbsp;string&nbsp;s&nbsp;with<br>
:class:`~matplotlib.font_manager.FontProperties`&nbsp;prop</tt></dd></dl>

<dl><dt><a name="RendererBase-new_gc"><strong>new_gc</strong></a>(self)</dt><dd><tt>Return&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;:class:`<a href="#GraphicsContextBase">GraphicsContextBase</a>`</tt></dd></dl>

<dl><dt><a name="RendererBase-open_group"><strong>open_group</strong></a>(self, s)</dt><dd><tt>Open&nbsp;a&nbsp;grouping&nbsp;element&nbsp;with&nbsp;label&nbsp;*s*.&nbsp;Is&nbsp;only&nbsp;currently&nbsp;used&nbsp;by<br>
:mod:`~matplotlib.backends.backend_svg`</tt></dd></dl>

<dl><dt><a name="RendererBase-option_image_nocomposite"><strong>option_image_nocomposite</strong></a>(self)</dt><dd><tt>overwrite&nbsp;this&nbsp;method&nbsp;for&nbsp;renderers&nbsp;that&nbsp;do&nbsp;not&nbsp;necessarily<br>
want&nbsp;to&nbsp;rescale&nbsp;and&nbsp;composite&nbsp;raster&nbsp;images.&nbsp;(like&nbsp;SVG)</tt></dd></dl>

<dl><dt><a name="RendererBase-points_to_pixels"><strong>points_to_pixels</strong></a>(self, points)</dt><dd><tt>Convert&nbsp;points&nbsp;to&nbsp;display&nbsp;units<br>
&nbsp;<br>
*points*<br>
&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;float&nbsp;or&nbsp;a&nbsp;numpy&nbsp;array&nbsp;of&nbsp;float<br>
&nbsp;<br>
return&nbsp;points&nbsp;converted&nbsp;to&nbsp;pixels<br>
&nbsp;<br>
You&nbsp;need&nbsp;to&nbsp;override&nbsp;this&nbsp;function&nbsp;(unless&nbsp;your&nbsp;backend<br>
doesn't&nbsp;have&nbsp;a&nbsp;dpi,&nbsp;eg,&nbsp;postscript&nbsp;or&nbsp;svg).&nbsp;&nbsp;Some&nbsp;imaging<br>
systems&nbsp;assume&nbsp;some&nbsp;value&nbsp;for&nbsp;pixels&nbsp;per&nbsp;inch::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;points&nbsp;to&nbsp;pixels&nbsp;=&nbsp;points&nbsp;*&nbsp;pixels_per_inch/72.0&nbsp;*&nbsp;dpi/72.0</tt></dd></dl>

<dl><dt><a name="RendererBase-start_rasterizing"><strong>start_rasterizing</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererBase-stop_rasterizing"><strong>stop_rasterizing</strong></a>(self)</dt></dl>

<dl><dt><a name="RendererBase-strip_math"><strong>strip_math</strong></a>(self, s)</dt></dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="ResizeEvent">class <strong>ResizeEvent</strong></a>(<a href="matplotlib.backend_bases.html#Event">Event</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;event&nbsp;triggered&nbsp;by&nbsp;a&nbsp;canvas&nbsp;resize<br>
&nbsp;<br>
In&nbsp;addition&nbsp;to&nbsp;the&nbsp;:class:`<a href="#Event">Event</a>`&nbsp;attributes,&nbsp;the&nbsp;following&nbsp;event&nbsp;attributes&nbsp;are&nbsp;defined:<br>
&nbsp;<br>
*width*<br>
&nbsp;&nbsp;&nbsp;&nbsp;width&nbsp;of&nbsp;the&nbsp;canvas&nbsp;in&nbsp;pixels<br>
&nbsp;<br>
*height*<br>
&nbsp;&nbsp;&nbsp;&nbsp;height&nbsp;of&nbsp;the&nbsp;canvas&nbsp;in&nbsp;pixels<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="ResizeEvent-__init__"><strong>__init__</strong></a>(self, name, canvas)</dt></dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>cursors</strong> = &lt;matplotlib.backend_bases.Cursors instance at 0x1495cb0&gt;<br>
<strong>division</strong> = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)<br>
<strong>rcParams</strong> = {'figure.subplot.right': 0.90000000000000002, 'm...persize': 'letter', 'svg.embed_char_paths': True}</td></tr></table>
@footer@