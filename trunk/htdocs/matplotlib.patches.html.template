@header@
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="#7799ee">
<td valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial">&nbsp;<br><big><big><strong><a href="matplotlib.html"><font color="#ffffff">matplotlib</font></a>.patches</strong></big></big></font></td
><td align=right valign=bottom
><font color="#ffffff" face="helvetica, arial"><a href=".">index</a><br><a href="file:/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/patches.py">/home/jdhunter/dev/lib64/python2.5/site-packages/matplotlib/patches.py</a></font></td></tr></table>
    <p><tt>#&nbsp;-*-&nbsp;coding:&nbsp;utf-8&nbsp;-*-</tt></p>
<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#aa55cc">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#fffff" face="helvetica, arial"><big><strong>Modules</strong></big></font></td></tr>
    
<tr><td bgcolor="#aa55cc"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><table width="100%" summary="list"><tr><td width="25%" valign=top><a href="matplotlib.artist.html">matplotlib.artist</a><br>
<a href="matplotlib.cbook.html">matplotlib.cbook</a><br>
</td><td width="25%" valign=top><a href="matplotlib.colors.html">matplotlib.colors</a><br>
<a href="math.html">math</a><br>
</td><td width="25%" valign=top><a href="matplotlib.html">matplotlib</a><br>
<a href="numpy.html">numpy</a><br>
</td><td width="25%" valign=top><a href="matplotlib.transforms.html">matplotlib.transforms</a><br>
</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ee77aa">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Classes</strong></big></font></td></tr>
    
<tr><td bgcolor="#ee77aa"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl>
<dt><font face="helvetica, arial"><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>(<a href="__builtin__.html#object">__builtin__.object</a>)
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Patch">Patch</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Arrow">Arrow</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Ellipse">Ellipse</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Arc">Arc</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Circle">Circle</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#PathPatch">PathPatch</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Polygon">Polygon</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#FancyArrow">FancyArrow</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Rectangle">Rectangle</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.patches.html#RegularPolygon">RegularPolygon</a>
</font></dt><dd>
<dl>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#CirclePolygon">CirclePolygon</a>
</font></dt></dl>
</dd>
<dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Shadow">Shadow</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.patches.html#Wedge">Wedge</a>
</font></dt><dt><font face="helvetica, arial"><a href="matplotlib.patches.html#YAArrow">YAArrow</a>
</font></dt></dl>
</dd>
</dl>
</dd>
</dl>
 <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Arc">class <strong>Arc</strong></a>(<a href="matplotlib.patches.html#Ellipse">Ellipse</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;elliptical&nbsp;arc.&nbsp;&nbsp;Because&nbsp;it&nbsp;performs&nbsp;various&nbsp;optimizations,&nbsp;it<br>
can&nbsp;not&nbsp;be&nbsp;filled.<br>
&nbsp;<br>
The&nbsp;arc&nbsp;must&nbsp;be&nbsp;used&nbsp;in&nbsp;an&nbsp;:class:`~matplotlib.axes.Axes`<br>
instance---it&nbsp;cannot&nbsp;be&nbsp;added&nbsp;directly&nbsp;to&nbsp;a<br>
:class:`~matplotlib.figure.Figure`---because&nbsp;it&nbsp;is&nbsp;optimized&nbsp;to<br>
only&nbsp;render&nbsp;the&nbsp;segments&nbsp;that&nbsp;are&nbsp;inside&nbsp;the&nbsp;axes&nbsp;bounding&nbsp;box<br>
with&nbsp;high&nbsp;resolution.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Arc">Arc</a></dd>
<dd><a href="matplotlib.patches.html#Ellipse">Ellipse</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Arc-__init__"><strong>__init__</strong></a>(self, xy, width, height, angle<font color="#909090">=0.0</font>, theta1<font color="#909090">=0.0</font>, theta2<font color="#909090">=360.0</font>, **kwargs)</dt><dd><tt>The&nbsp;following&nbsp;args&nbsp;are&nbsp;supported:<br>
&nbsp;<br>
*xy*<br>
&nbsp;&nbsp;center&nbsp;of&nbsp;ellipse<br>
&nbsp;<br>
*width*<br>
&nbsp;&nbsp;length&nbsp;of&nbsp;horizontal&nbsp;axis<br>
&nbsp;<br>
*height*<br>
&nbsp;&nbsp;length&nbsp;of&nbsp;vertical&nbsp;axis<br>
&nbsp;<br>
*angle*<br>
&nbsp;&nbsp;rotation&nbsp;in&nbsp;degrees&nbsp;(anti-clockwise)<br>
&nbsp;<br>
*theta1*<br>
&nbsp;&nbsp;starting&nbsp;angle&nbsp;of&nbsp;the&nbsp;arc&nbsp;in&nbsp;degrees<br>
&nbsp;<br>
*theta2*<br>
&nbsp;&nbsp;ending&nbsp;angle&nbsp;of&nbsp;the&nbsp;arc&nbsp;in&nbsp;degrees<br>
&nbsp;<br>
If&nbsp;*theta1*&nbsp;and&nbsp;*theta2*&nbsp;are&nbsp;not&nbsp;provided,&nbsp;the&nbsp;arc&nbsp;will&nbsp;form&nbsp;a<br>
complete&nbsp;ellipse.<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Arc-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-draw"><strong>draw</strong></a>(self, renderer)</dt><dd><tt>Ellipses&nbsp;are&nbsp;normally&nbsp;drawn&nbsp;using&nbsp;an&nbsp;approximation&nbsp;that&nbsp;uses<br>
eight&nbsp;cubic&nbsp;bezier&nbsp;splines.&nbsp;&nbsp;The&nbsp;error&nbsp;of&nbsp;this&nbsp;approximation<br>
is&nbsp;1.89818e-6,&nbsp;according&nbsp;to&nbsp;this&nbsp;unverified&nbsp;source:<br>
&nbsp;<br>
&nbsp;&nbsp;Lancaster,&nbsp;Don.&nbsp;&nbsp;Approximating&nbsp;a&nbsp;<a href="#Circle">Circle</a>&nbsp;or&nbsp;an&nbsp;<a href="#Ellipse">Ellipse</a>&nbsp;Using<br>
&nbsp;&nbsp;Four&nbsp;Bezier&nbsp;Cubic&nbsp;Splines.<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="http://www.tinaja.com/glib/ellipse4.pdf">http://www.tinaja.com/glib/ellipse4.pdf</a><br>
&nbsp;<br>
There&nbsp;is&nbsp;a&nbsp;use&nbsp;case&nbsp;where&nbsp;very&nbsp;large&nbsp;ellipses&nbsp;must&nbsp;be&nbsp;drawn<br>
with&nbsp;very&nbsp;high&nbsp;accuracy,&nbsp;and&nbsp;it&nbsp;is&nbsp;too&nbsp;expensive&nbsp;to&nbsp;render&nbsp;the<br>
entire&nbsp;ellipse&nbsp;with&nbsp;enough&nbsp;segments&nbsp;(either&nbsp;splines&nbsp;or&nbsp;line<br>
segments).&nbsp;&nbsp;Therefore,&nbsp;in&nbsp;the&nbsp;case&nbsp;where&nbsp;either&nbsp;radius&nbsp;of&nbsp;the<br>
ellipse&nbsp;is&nbsp;large&nbsp;enough&nbsp;that&nbsp;the&nbsp;error&nbsp;of&nbsp;the&nbsp;spline<br>
approximation&nbsp;will&nbsp;be&nbsp;visible&nbsp;(greater&nbsp;than&nbsp;one&nbsp;pixel&nbsp;offset<br>
from&nbsp;the&nbsp;ideal),&nbsp;a&nbsp;different&nbsp;technique&nbsp;is&nbsp;used.<br>
&nbsp;<br>
In&nbsp;that&nbsp;case,&nbsp;only&nbsp;the&nbsp;visible&nbsp;parts&nbsp;of&nbsp;the&nbsp;ellipse&nbsp;are&nbsp;drawn,<br>
with&nbsp;each&nbsp;visible&nbsp;arc&nbsp;using&nbsp;a&nbsp;fixed&nbsp;number&nbsp;of&nbsp;spline&nbsp;segments<br>
(8).&nbsp;&nbsp;The&nbsp;algorithm&nbsp;proceeds&nbsp;as&nbsp;follows:<br>
&nbsp;<br>
&nbsp;&nbsp;1.&nbsp;The&nbsp;points&nbsp;where&nbsp;the&nbsp;ellipse&nbsp;intersects&nbsp;the&nbsp;axes&nbsp;bounding<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box&nbsp;are&nbsp;located.&nbsp;&nbsp;(This&nbsp;is&nbsp;done&nbsp;be&nbsp;performing&nbsp;an&nbsp;inverse<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transformation&nbsp;on&nbsp;the&nbsp;axes&nbsp;bbox&nbsp;such&nbsp;that&nbsp;it&nbsp;is&nbsp;relative<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;the&nbsp;unit&nbsp;circle&nbsp;--&nbsp;this&nbsp;makes&nbsp;the&nbsp;intersection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calculation&nbsp;much&nbsp;easier&nbsp;than&nbsp;doing&nbsp;rotated&nbsp;ellipse<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersection&nbsp;directly).<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This&nbsp;uses&nbsp;the&nbsp;"line&nbsp;intersecting&nbsp;a&nbsp;circle"&nbsp;algorithm<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;from:<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vince,&nbsp;John.&nbsp;&nbsp;Geometry&nbsp;for&nbsp;Computer&nbsp;Graphics:&nbsp;Formulae,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Examples&nbsp;&amp;&nbsp;Proofs.&nbsp;&nbsp;London:&nbsp;Springer-Verlag,&nbsp;2005.<br>
&nbsp;<br>
&nbsp;&nbsp;2.&nbsp;The&nbsp;angles&nbsp;of&nbsp;each&nbsp;of&nbsp;the&nbsp;intersection&nbsp;points&nbsp;are<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calculated.<br>
&nbsp;<br>
&nbsp;&nbsp;3.&nbsp;Proceeding&nbsp;counterclockwise&nbsp;starting&nbsp;in&nbsp;the&nbsp;positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x-direction,&nbsp;each&nbsp;of&nbsp;the&nbsp;visible&nbsp;arc-segments&nbsp;between&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pairs&nbsp;of&nbsp;vertices&nbsp;are&nbsp;drawn&nbsp;using&nbsp;the&nbsp;bezier&nbsp;arc<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;approximation&nbsp;technique&nbsp;implemented&nbsp;in<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:meth:`matplotlib.path.Path.arc`.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Ellipse">Ellipse</a>:<br>
<dl><dt><a name="Arc-contains"><strong>contains</strong></a>(self, ev)</dt></dl>

<dl><dt><a name="Arc-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_path"><strong>get_path</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;vertices&nbsp;of&nbsp;the&nbsp;rectangle</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Arc-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Arc-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Arc-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Arc-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Arc-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Arc-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Arc-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Arc-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Arc-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Arc-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arc-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arc-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arc-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arc-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arc-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arc-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arc-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Arc-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Arc-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arc-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Arc-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arc-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Arc-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Arc-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Arc-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Arc-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Arc-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Arc-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Arc-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Arc-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Arc-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Arc-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Arc-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Arc-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Arc-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Arc-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Arc-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Arc-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Arc-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Arc-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Arc-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Arc-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Arc-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Arc-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Arc-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Arc-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Arc-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Arc-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Arc-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Arc-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Arc-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arc-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Arc-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Arc-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arc-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Arc-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Arc-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Arc-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Arc-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arc-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Arc-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Arc-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arc-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Arc-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Arrow">class <strong>Arrow</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>An&nbsp;arrow&nbsp;patch.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Arrow">Arrow</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Arrow-__init__"><strong>__init__</strong></a>(self, x, y, dx, dy, width<font color="#909090">=1.0</font>, **kwargs)</dt><dd><tt>Draws&nbsp;an&nbsp;arrow,&nbsp;starting&nbsp;at&nbsp;(*x*,&nbsp;*y*),&nbsp;direction&nbsp;and&nbsp;length<br>
given&nbsp;by&nbsp;(*dx*,&nbsp;*dy*)&nbsp;the&nbsp;width&nbsp;of&nbsp;the&nbsp;arrow&nbsp;is&nbsp;scaled&nbsp;by&nbsp;*width*.<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Arrow-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Arrow-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="Arrow-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Arrow-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Arrow-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Arrow-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Arrow-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Arrow-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Arrow-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Arrow-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Arrow-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Arrow-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Arrow-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arrow-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arrow-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arrow-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arrow-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arrow-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Arrow-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arrow-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Arrow-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Arrow-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arrow-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Arrow-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Arrow-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Arrow-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Arrow-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Arrow-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Arrow-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Arrow-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Arrow-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Arrow-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Arrow-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Arrow-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Arrow-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Arrow-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Arrow-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Arrow-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Arrow-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Arrow-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Arrow-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Arrow-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Arrow-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Arrow-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Arrow-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Arrow-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Arrow-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Arrow-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Arrow-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Arrow-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Arrow-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Arrow-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Arrow-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Arrow-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arrow-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Arrow-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Arrow-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arrow-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Arrow-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Arrow-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Arrow-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Arrow-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arrow-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Arrow-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Arrow-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Arrow-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Arrow-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Circle">class <strong>Circle</strong></a>(<a href="matplotlib.patches.html#Ellipse">Ellipse</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;circle&nbsp;patch.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Circle">Circle</a></dd>
<dd><a href="matplotlib.patches.html#Ellipse">Ellipse</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Circle-__init__"><strong>__init__</strong></a>(self, xy, radius<font color="#909090">=5</font>, **kwargs)</dt><dd><tt>Create&nbsp;true&nbsp;circle&nbsp;at&nbsp;center&nbsp;*xy*&nbsp;=&nbsp;(*x*,&nbsp;*y*)&nbsp;with&nbsp;given<br>
*radius*.&nbsp;&nbsp;Unlike&nbsp;:class:`~matplotlib.patches.<a href="#CirclePolygon">CirclePolygon</a>`<br>
which&nbsp;is&nbsp;a&nbsp;polygonal&nbsp;approximation,&nbsp;this&nbsp;uses&nbsp;Bézier&nbsp;splines<br>
and&nbsp;is&nbsp;much&nbsp;closer&nbsp;to&nbsp;a&nbsp;scale-free&nbsp;circle.<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Circle-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Ellipse">Ellipse</a>:<br>
<dl><dt><a name="Circle-contains"><strong>contains</strong></a>(self, ev)</dt></dl>

<dl><dt><a name="Circle-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_path"><strong>get_path</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;vertices&nbsp;of&nbsp;the&nbsp;rectangle</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Circle-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Circle-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Circle-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Circle-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Circle-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Circle-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Circle-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Circle-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Circle-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Circle-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Circle-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Circle-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Circle-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Circle-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Circle-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Circle-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Circle-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Circle-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Circle-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Circle-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Circle-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Circle-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Circle-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Circle-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Circle-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Circle-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Circle-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Circle-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Circle-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Circle-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Circle-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Circle-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Circle-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Circle-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Circle-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Circle-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Circle-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Circle-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Circle-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Circle-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Circle-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Circle-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Circle-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Circle-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Circle-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Circle-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Circle-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Circle-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Circle-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Circle-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Circle-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Circle-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Circle-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Circle-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Circle-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Circle-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Circle-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Circle-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Circle-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Circle-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Circle-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Circle-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Circle-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Circle-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Circle-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="CirclePolygon">class <strong>CirclePolygon</strong></a>(<a href="matplotlib.patches.html#RegularPolygon">RegularPolygon</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;polygon-approximation&nbsp;of&nbsp;a&nbsp;circle&nbsp;patch.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#CirclePolygon">CirclePolygon</a></dd>
<dd><a href="matplotlib.patches.html#RegularPolygon">RegularPolygon</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="CirclePolygon-__init__"><strong>__init__</strong></a>(self, xy, radius<font color="#909090">=5</font>, resolution<font color="#909090">=20</font>, **kwargs)</dt><dd><tt>Create&nbsp;a&nbsp;circle&nbsp;at&nbsp;*xy*&nbsp;=&nbsp;(*x*,&nbsp;*y*)&nbsp;with&nbsp;given&nbsp;*radius*.<br>
This&nbsp;circle&nbsp;is&nbsp;approximated&nbsp;by&nbsp;a&nbsp;regular&nbsp;polygon&nbsp;with<br>
*resolution*&nbsp;sides.&nbsp;&nbsp;For&nbsp;a&nbsp;smoother&nbsp;circle&nbsp;drawn&nbsp;with&nbsp;splines,<br>
see&nbsp;:class:`~matplotlib.patches.<a href="#Circle">Circle</a>`.<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="CirclePolygon-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#RegularPolygon">RegularPolygon</a>:<br>
<dl><dt><a name="CirclePolygon-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.patches.html#RegularPolygon">RegularPolygon</a>:<br>
<dl><dt><strong>numvertices</strong></dt>
</dl>
<dl><dt><strong>orientation</strong></dt>
</dl>
<dl><dt><strong>radius</strong></dt>
</dl>
<dl><dt><strong>xy</strong></dt>
</dl>
<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="CirclePolygon-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="CirclePolygon-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="CirclePolygon-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="CirclePolygon-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="CirclePolygon-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="CirclePolygon-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="CirclePolygon-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="CirclePolygon-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="CirclePolygon-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#CirclePolygon-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="CirclePolygon-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="CirclePolygon-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="CirclePolygon-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="CirclePolygon-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="CirclePolygon-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="CirclePolygon-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#CirclePolygon-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="CirclePolygon-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="CirclePolygon-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="CirclePolygon-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="CirclePolygon-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="CirclePolygon-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Ellipse">class <strong>Ellipse</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;scale-free&nbsp;ellipse.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Ellipse">Ellipse</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Ellipse-__init__"><strong>__init__</strong></a>(self, xy, width, height, angle<font color="#909090">=0.0</font>, **kwargs)</dt><dd><tt>*xy*<br>
&nbsp;&nbsp;center&nbsp;of&nbsp;ellipse<br>
&nbsp;<br>
*width*<br>
&nbsp;&nbsp;length&nbsp;of&nbsp;horizontal&nbsp;axis<br>
&nbsp;<br>
*height*<br>
&nbsp;&nbsp;length&nbsp;of&nbsp;vertical&nbsp;axis<br>
&nbsp;<br>
*angle*<br>
&nbsp;&nbsp;rotation&nbsp;in&nbsp;degrees&nbsp;(anti-clockwise)<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Ellipse-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-contains"><strong>contains</strong></a>(self, ev)</dt></dl>

<dl><dt><a name="Ellipse-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_path"><strong>get_path</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;vertices&nbsp;of&nbsp;the&nbsp;rectangle</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Ellipse-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Ellipse-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Ellipse-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Ellipse-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Ellipse-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Ellipse-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Ellipse-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Ellipse-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Ellipse-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Ellipse-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Ellipse-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Ellipse-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Ellipse-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Ellipse-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Ellipse-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Ellipse-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Ellipse-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Ellipse-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Ellipse-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Ellipse-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Ellipse-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Ellipse-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Ellipse-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Ellipse-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Ellipse-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Ellipse-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Ellipse-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Ellipse-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Ellipse-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Ellipse-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Ellipse-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Ellipse-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Ellipse-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Ellipse-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Ellipse-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Ellipse-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Ellipse-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Ellipse-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Ellipse-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Ellipse-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Ellipse-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Ellipse-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Ellipse-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Ellipse-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Ellipse-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Ellipse-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Ellipse-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Ellipse-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Ellipse-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Ellipse-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Ellipse-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Ellipse-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Ellipse-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Ellipse-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Ellipse-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Ellipse-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Ellipse-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Ellipse-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Ellipse-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Ellipse-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Ellipse-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Ellipse-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Ellipse-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Ellipse-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Ellipse-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="FancyArrow">class <strong>FancyArrow</strong></a>(<a href="matplotlib.patches.html#Polygon">Polygon</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Like&nbsp;<a href="#Arrow">Arrow</a>,&nbsp;but&nbsp;lets&nbsp;you&nbsp;set&nbsp;head&nbsp;width&nbsp;and&nbsp;head&nbsp;height&nbsp;independently.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#FancyArrow">FancyArrow</a></dd>
<dd><a href="matplotlib.patches.html#Polygon">Polygon</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="FancyArrow-__init__"><strong>__init__</strong></a>(self, x, y, dx, dy, width<font color="#909090">=0.001</font>, length_includes_head<font color="#909090">=False</font>, head_width<font color="#909090">=None</font>, head_length<font color="#909090">=None</font>, shape<font color="#909090">='full'</font>, overhang<font color="#909090">=0</font>, head_starts_at_zero<font color="#909090">=False</font>, **kwargs)</dt><dd><tt>Constructor&nbsp;arguments<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*length_includes_head*:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*True*&nbsp;if&nbsp;head&nbsp;is&nbsp;counted&nbsp;in&nbsp;calculating&nbsp;the&nbsp;length.<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*shape*:&nbsp;['full',&nbsp;'left',&nbsp;'right']<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*overhang*:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distance&nbsp;that&nbsp;the&nbsp;arrow&nbsp;is&nbsp;swept&nbsp;back&nbsp;(0&nbsp;overhang&nbsp;means<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangular&nbsp;shape).<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;*head_starts_at_zero*:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If&nbsp;*True*,&nbsp;the&nbsp;head&nbsp;starts&nbsp;being&nbsp;drawn&nbsp;at&nbsp;coordinate&nbsp;0<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instead&nbsp;of&nbsp;ending&nbsp;at&nbsp;coordinate&nbsp;0.<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="FancyArrow-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Polygon">Polygon</a>:<br>
<dl><dt><a name="FancyArrow-get_closed"><strong>get_closed</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_xy"><strong>get_xy</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-set_closed"><strong>set_closed</strong></a>(self, closed)</dt></dl>

<dl><dt><a name="FancyArrow-set_xy"><strong>set_xy</strong></a>(self, vertices)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.patches.html#Polygon">Polygon</a>:<br>
<dl><dt><strong>xy</strong></dt>
<dd><tt>Set/get&nbsp;the&nbsp;vertices&nbsp;of&nbsp;the&nbsp;polygon.&nbsp;&nbsp;This&nbsp;property&nbsp;is<br>
provided&nbsp;for&nbsp;backward&nbsp;compatibility&nbsp;with&nbsp;matplotlib&nbsp;0.91.x<br>
only.&nbsp;&nbsp;New&nbsp;code&nbsp;should&nbsp;use<br>
:meth:`~matplotlib.patches.Polygon.get_xy`&nbsp;and<br>
:meth:`~matplotlib.patches.Polygon.set_xy`&nbsp;instead.</tt></dd>
</dl>
<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="FancyArrow-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="FancyArrow-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="FancyArrow-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="FancyArrow-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="FancyArrow-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="FancyArrow-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="FancyArrow-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="FancyArrow-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="FancyArrow-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#FancyArrow-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="FancyArrow-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="FancyArrow-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="FancyArrow-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="FancyArrow-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="FancyArrow-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="FancyArrow-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#FancyArrow-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="FancyArrow-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="FancyArrow-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="FancyArrow-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="FancyArrow-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="FancyArrow-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="FancyArrow-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Patch">class <strong>Patch</strong></a>(<a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;patch&nbsp;is&nbsp;a&nbsp;2D&nbsp;thingy&nbsp;with&nbsp;a&nbsp;face&nbsp;color&nbsp;and&nbsp;an&nbsp;edge&nbsp;color.<br>
&nbsp;<br>
If&nbsp;any&nbsp;of&nbsp;*edgecolor*,&nbsp;*facecolor*,&nbsp;*linewidth*,&nbsp;or&nbsp;*antialiased*<br>
are&nbsp;*None*,&nbsp;they&nbsp;default&nbsp;to&nbsp;their&nbsp;rc&nbsp;params&nbsp;setting.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Patch-__init__"><strong>__init__</strong></a>(self, edgecolor<font color="#909090">=None</font>, facecolor<font color="#909090">=None</font>, linewidth<font color="#909090">=None</font>, linestyle<font color="#909090">=None</font>, antialiased<font color="#909090">=None</font>, hatch<font color="#909090">=None</font>, fill<font color="#909090">=True</font>, **kwargs)</dt><dd><tt>The&nbsp;following&nbsp;kwarg&nbsp;properties&nbsp;are&nbsp;supported<br>
&nbsp;<br>
&nbsp;<br>
=================&nbsp;&nbsp;&nbsp;==============================================<br>
Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
=================&nbsp;&nbsp;&nbsp;==============================================<br>
alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Patch-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="Patch-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Patch-get_aa"><strong>get_aa</strong></a> = <a href="#Patch-get_antialiased">get_antialiased</a>(self)</dt></dl>

<dl><dt><a name="Patch-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_ec"><strong>get_ec</strong></a> = <a href="#Patch-get_edgecolor">get_edgecolor</a>(self)</dt></dl>

<dl><dt><a name="Patch-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_fc"><strong>get_fc</strong></a> = <a href="#Patch-get_facecolor">get_facecolor</a>(self)</dt></dl>

<dl><dt><a name="Patch-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Patch-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Patch-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_ls"><strong>get_ls</strong></a> = <a href="#Patch-get_linestyle">get_linestyle</a>(self)</dt></dl>

<dl><dt><a name="Patch-get_lw"><strong>get_lw</strong></a> = <a href="#Patch-get_linewidth">get_linewidth</a>(self)</dt></dl>

<dl><dt><a name="Patch-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_path"><strong>get_path</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;path&nbsp;of&nbsp;this&nbsp;patch</tt></dd></dl>

<dl><dt><a name="Patch-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Patch-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Patch-set_aa"><strong>set_aa</strong></a> = <a href="#Patch-set_antialiased">set_antialiased</a>(self, aa)</dt></dl>

<dl><dt><a name="Patch-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Patch-set_ec"><strong>set_ec</strong></a> = <a href="#Patch-set_edgecolor">set_edgecolor</a>(self, color)</dt></dl>

<dl><dt><a name="Patch-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Patch-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Patch-set_fc"><strong>set_fc</strong></a> = <a href="#Patch-set_facecolor">set_facecolor</a>(self, color)</dt></dl>

<dl><dt><a name="Patch-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Patch-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Patch-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Patch-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Patch-set_ls"><strong>set_ls</strong></a> = <a href="#Patch-set_linestyle">set_linestyle</a>(self, ls)</dt></dl>

<dl><dt><a name="Patch-set_lw"><strong>set_lw</strong></a> = <a href="#Patch-set_linewidth">set_linewidth</a>(self, w)</dt></dl>

<dl><dt><a name="Patch-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes defined here:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Patch-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Patch-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Patch-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Patch-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Patch-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Patch-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Patch-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Patch-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Patch-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Patch-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Patch-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Patch-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Patch-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Patch-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Patch-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Patch-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Patch-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Patch-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Patch-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Patch-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Patch-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Patch-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Patch-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Patch-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Patch-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Patch-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Patch-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Patch-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Patch-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Patch-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Patch-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Patch-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Patch-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Patch-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Patch-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Patch-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Patch-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Patch-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Patch-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Patch-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Patch-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Patch-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="PathPatch">class <strong>PathPatch</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;general&nbsp;polycurve&nbsp;path&nbsp;patch.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#PathPatch">PathPatch</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="PathPatch-__init__"><strong>__init__</strong></a>(self, path, **kwargs)</dt><dd><tt>*path*&nbsp;is&nbsp;a&nbsp;:class:`matplotlib.path.Path`&nbsp;object.<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
See&nbsp;<a href="#Patch">Patch</a>&nbsp;documentation&nbsp;for&nbsp;additional&nbsp;kwargs</tt></dd></dl>

<dl><dt><a name="PathPatch-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="PathPatch-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="PathPatch-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="PathPatch-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="PathPatch-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="PathPatch-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="PathPatch-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="PathPatch-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="PathPatch-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="PathPatch-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="PathPatch-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="PathPatch-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="PathPatch-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="PathPatch-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="PathPatch-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="PathPatch-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="PathPatch-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="PathPatch-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="PathPatch-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PathPatch-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="PathPatch-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="PathPatch-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="PathPatch-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="PathPatch-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="PathPatch-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="PathPatch-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="PathPatch-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="PathPatch-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="PathPatch-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#PathPatch-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="PathPatch-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="PathPatch-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="PathPatch-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="PathPatch-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="PathPatch-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="PathPatch-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="PathPatch-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="PathPatch-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="PathPatch-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="PathPatch-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="PathPatch-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="PathPatch-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="PathPatch-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="PathPatch-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="PathPatch-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="PathPatch-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="PathPatch-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#PathPatch-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="PathPatch-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="PathPatch-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="PathPatch-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="PathPatch-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="PathPatch-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="PathPatch-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PathPatch-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PathPatch-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PathPatch-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PathPatch-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="PathPatch-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="PathPatch-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="PathPatch-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="PathPatch-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PathPatch-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="PathPatch-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="PathPatch-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="PathPatch-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="PathPatch-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Polygon">class <strong>Polygon</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;general&nbsp;polygon&nbsp;patch.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Polygon">Polygon</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Polygon-__init__"><strong>__init__</strong></a>(self, xy, closed<font color="#909090">=True</font>, **kwargs)</dt><dd><tt>*xy*&nbsp;is&nbsp;a&nbsp;numpy&nbsp;array&nbsp;with&nbsp;shape&nbsp;Nx2.<br>
&nbsp;<br>
If&nbsp;*closed*&nbsp;is&nbsp;*True*,&nbsp;the&nbsp;polygon&nbsp;will&nbsp;be&nbsp;closed&nbsp;so&nbsp;the<br>
starting&nbsp;and&nbsp;ending&nbsp;points&nbsp;are&nbsp;the&nbsp;same.<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
See&nbsp;<a href="#Patch">Patch</a>&nbsp;documentation&nbsp;for&nbsp;additional&nbsp;kwargs</tt></dd></dl>

<dl><dt><a name="Polygon-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_closed"><strong>get_closed</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_xy"><strong>get_xy</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-set_closed"><strong>set_closed</strong></a>(self, closed)</dt></dl>

<dl><dt><a name="Polygon-set_xy"><strong>set_xy</strong></a>(self, vertices)</dt></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>xy</strong></dt>
<dd><tt>Set/get&nbsp;the&nbsp;vertices&nbsp;of&nbsp;the&nbsp;polygon.&nbsp;&nbsp;This&nbsp;property&nbsp;is<br>
provided&nbsp;for&nbsp;backward&nbsp;compatibility&nbsp;with&nbsp;matplotlib&nbsp;0.91.x<br>
only.&nbsp;&nbsp;New&nbsp;code&nbsp;should&nbsp;use<br>
:meth:`~matplotlib.patches.Polygon.get_xy`&nbsp;and<br>
:meth:`~matplotlib.patches.Polygon.set_xy`&nbsp;instead.</tt></dd>
</dl>
<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Polygon-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="Polygon-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Polygon-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Polygon-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Polygon-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Polygon-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Polygon-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Polygon-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Polygon-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Polygon-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Polygon-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Polygon-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Polygon-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Polygon-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Polygon-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Polygon-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Polygon-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Polygon-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Polygon-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Polygon-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Polygon-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Polygon-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Polygon-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Polygon-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Polygon-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Polygon-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Polygon-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Polygon-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Polygon-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Polygon-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Polygon-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Polygon-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Polygon-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Polygon-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Polygon-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Polygon-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Polygon-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Polygon-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Polygon-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Polygon-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Polygon-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Polygon-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Polygon-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Polygon-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Polygon-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Polygon-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Polygon-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Polygon-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Polygon-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Polygon-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Polygon-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Polygon-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Polygon-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Polygon-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Polygon-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Polygon-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Polygon-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Polygon-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Polygon-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Polygon-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Polygon-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Polygon-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Polygon-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Polygon-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Polygon-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Polygon-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Rectangle">class <strong>Rectangle</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Draw&nbsp;a&nbsp;rectangle&nbsp;with&nbsp;lower&nbsp;left&nbsp;at&nbsp;*xy*=(*x*,&nbsp;*y*)&nbsp;with&nbsp;specified<br>
width&nbsp;and&nbsp;height<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Rectangle">Rectangle</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Rectangle-__init__"><strong>__init__</strong></a>(self, xy, width, height, **kwargs)</dt><dd><tt>*fill*&nbsp;is&nbsp;a&nbsp;boolean&nbsp;indicating&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;rectangle<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Rectangle-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-contains"><strong>contains</strong></a>(self, mouseevent)</dt></dl>

<dl><dt><a name="Rectangle-get_bbox"><strong>get_bbox</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_height"><strong>get_height</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;height&nbsp;of&nbsp;the&nbsp;rectangle</tt></dd></dl>

<dl><dt><a name="Rectangle-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_path"><strong>get_path</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;vertices&nbsp;of&nbsp;the&nbsp;rectangle</tt></dd></dl>

<dl><dt><a name="Rectangle-get_width"><strong>get_width</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;width&nbsp;of&nbsp;the&nbsp;&nbsp;rectangle</tt></dd></dl>

<dl><dt><a name="Rectangle-get_x"><strong>get_x</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;left&nbsp;coord&nbsp;of&nbsp;the&nbsp;rectangle</tt></dd></dl>

<dl><dt><a name="Rectangle-get_y"><strong>get_y</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;bottom&nbsp;coord&nbsp;of&nbsp;the&nbsp;rectangle</tt></dd></dl>

<dl><dt><a name="Rectangle-set_bounds"><strong>set_bounds</strong></a>(self, *args)</dt><dd><tt>Set&nbsp;the&nbsp;bounds&nbsp;of&nbsp;the&nbsp;rectangle:&nbsp;l,b,w,h<br>
&nbsp;<br>
ACCEPTS:&nbsp;(left,&nbsp;bottom,&nbsp;width,&nbsp;height)</tt></dd></dl>

<dl><dt><a name="Rectangle-set_height"><strong>set_height</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;width&nbsp;rectangle<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Rectangle-set_width"><strong>set_width</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;width&nbsp;rectangle<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Rectangle-set_x"><strong>set_x</strong></a>(self, x)</dt><dd><tt>Set&nbsp;the&nbsp;left&nbsp;coord&nbsp;of&nbsp;the&nbsp;rectangle<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Rectangle-set_y"><strong>set_y</strong></a>(self, y)</dt><dd><tt>Set&nbsp;the&nbsp;bottom&nbsp;coord&nbsp;of&nbsp;the&nbsp;rectangle<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Rectangle-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Rectangle-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Rectangle-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Rectangle-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Rectangle-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Rectangle-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Rectangle-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Rectangle-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Rectangle-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Rectangle-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Rectangle-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Rectangle-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Rectangle-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Rectangle-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Rectangle-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Rectangle-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Rectangle-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Rectangle-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Rectangle-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Rectangle-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Rectangle-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Rectangle-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Rectangle-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Rectangle-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Rectangle-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Rectangle-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Rectangle-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Rectangle-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Rectangle-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Rectangle-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Rectangle-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Rectangle-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Rectangle-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Rectangle-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Rectangle-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Rectangle-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Rectangle-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Rectangle-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Rectangle-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Rectangle-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Rectangle-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Rectangle-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Rectangle-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Rectangle-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Rectangle-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Rectangle-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Rectangle-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Rectangle-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Rectangle-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Rectangle-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Rectangle-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Rectangle-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Rectangle-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Rectangle-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Rectangle-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Rectangle-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Rectangle-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Rectangle-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Rectangle-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Rectangle-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Rectangle-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Rectangle-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Rectangle-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Rectangle-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Rectangle-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="RegularPolygon">class <strong>RegularPolygon</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>A&nbsp;regular&nbsp;polygon&nbsp;patch.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#RegularPolygon">RegularPolygon</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="RegularPolygon-__init__"><strong>__init__</strong></a>(self, xy, numVertices, radius<font color="#909090">=5</font>, orientation<font color="#909090">=0</font>, **kwargs)</dt><dd><tt>Constructor&nbsp;arguments:<br>
&nbsp;<br>
*xy*<br>
&nbsp;&nbsp;A&nbsp;length&nbsp;2&nbsp;tuple&nbsp;(*x*,&nbsp;*y*)&nbsp;of&nbsp;the&nbsp;center.<br>
&nbsp;<br>
*numVertices*<br>
&nbsp;&nbsp;the&nbsp;number&nbsp;of&nbsp;vertices.<br>
&nbsp;<br>
*radius*<br>
&nbsp;&nbsp;The&nbsp;distance&nbsp;from&nbsp;the&nbsp;center&nbsp;to&nbsp;each&nbsp;of&nbsp;the&nbsp;vertices.<br>
&nbsp;<br>
*orientation*<br>
&nbsp;&nbsp;rotates&nbsp;the&nbsp;polygon&nbsp;(in&nbsp;radians).<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="RegularPolygon-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>numvertices</strong></dt>
</dl>
<dl><dt><strong>orientation</strong></dt>
</dl>
<dl><dt><strong>radius</strong></dt>
</dl>
<dl><dt><strong>xy</strong></dt>
</dl>
<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="RegularPolygon-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="RegularPolygon-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="RegularPolygon-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="RegularPolygon-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="RegularPolygon-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="RegularPolygon-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="RegularPolygon-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="RegularPolygon-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="RegularPolygon-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#RegularPolygon-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="RegularPolygon-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="RegularPolygon-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="RegularPolygon-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="RegularPolygon-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="RegularPolygon-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="RegularPolygon-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#RegularPolygon-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="RegularPolygon-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="RegularPolygon-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="RegularPolygon-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="RegularPolygon-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="RegularPolygon-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Shadow">class <strong>Shadow</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Shadow">Shadow</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Shadow-__init__"><strong>__init__</strong></a>(self, patch, ox, oy, props<font color="#909090">=None</font>, **kwargs)</dt><dd><tt>Create&nbsp;a&nbsp;shadow&nbsp;of&nbsp;the&nbsp;given&nbsp;*patch*&nbsp;offset&nbsp;by&nbsp;*ox*,&nbsp;*oy*.<br>
*props*,&nbsp;if&nbsp;not&nbsp;*None*,&nbsp;is&nbsp;a&nbsp;patch&nbsp;property&nbsp;update&nbsp;dictionary.<br>
If&nbsp;*None*,&nbsp;the&nbsp;shadow&nbsp;will&nbsp;have&nbsp;have&nbsp;the&nbsp;same&nbsp;color&nbsp;as&nbsp;the&nbsp;face,<br>
but&nbsp;darkened.<br>
&nbsp;<br>
kwargs&nbsp;are<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Shadow-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Shadow-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="Shadow-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Shadow-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Shadow-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Shadow-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Shadow-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Shadow-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Shadow-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Shadow-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Shadow-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Shadow-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Shadow-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Shadow-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Shadow-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Shadow-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Shadow-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Shadow-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Shadow-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Shadow-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Shadow-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Shadow-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Shadow-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Shadow-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Shadow-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Shadow-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Shadow-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Shadow-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Shadow-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Shadow-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Shadow-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Shadow-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Shadow-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Shadow-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Shadow-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Shadow-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Shadow-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Shadow-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Shadow-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Shadow-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Shadow-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Shadow-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Shadow-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Shadow-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Shadow-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Shadow-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Shadow-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Shadow-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Shadow-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Shadow-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Shadow-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Shadow-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Shadow-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Shadow-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Shadow-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Shadow-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Shadow-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Shadow-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Shadow-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Shadow-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Shadow-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Shadow-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Shadow-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Shadow-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Shadow-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Shadow-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Shadow-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="Wedge">class <strong>Wedge</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#Wedge">Wedge</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="Wedge-__init__"><strong>__init__</strong></a>(self, center, r, theta1, theta2, **kwargs)</dt><dd><tt>Draw&nbsp;a&nbsp;wedge&nbsp;centered&nbsp;at&nbsp;*x*,&nbsp;*y*&nbsp;center&nbsp;with&nbsp;radius&nbsp;*r*&nbsp;that<br>
sweeps&nbsp;*theta1*&nbsp;to&nbsp;*theta2*&nbsp;(in&nbsp;degrees).<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="Wedge-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="Wedge-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="Wedge-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="Wedge-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="Wedge-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="Wedge-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="Wedge-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="Wedge-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="Wedge-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="Wedge-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="Wedge-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="Wedge-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="Wedge-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Wedge-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Wedge-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Wedge-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Wedge-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Wedge-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="Wedge-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Wedge-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="Wedge-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Wedge-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Wedge-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="Wedge-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="Wedge-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="Wedge-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="Wedge-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Wedge-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="Wedge-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#Wedge-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="Wedge-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="Wedge-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="Wedge-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="Wedge-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="Wedge-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="Wedge-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="Wedge-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="Wedge-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="Wedge-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="Wedge-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="Wedge-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="Wedge-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="Wedge-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="Wedge-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="Wedge-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="Wedge-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="Wedge-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#Wedge-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="Wedge-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="Wedge-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="Wedge-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="Wedge-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="Wedge-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="Wedge-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Wedge-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Wedge-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Wedge-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Wedge-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="Wedge-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="Wedge-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="Wedge-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="Wedge-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Wedge-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="Wedge-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="Wedge-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="Wedge-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="Wedge-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table> <p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><a name="YAArrow">class <strong>YAArrow</strong></a>(<a href="matplotlib.patches.html#Patch">Patch</a>)</font></td></tr>
    
<tr bgcolor="#ffc8d8"><td rowspan=2><tt>&nbsp;&nbsp;&nbsp;</tt></td>
<td colspan=2><tt>Yet&nbsp;another&nbsp;arrow&nbsp;class.<br>
&nbsp;<br>
This&nbsp;is&nbsp;an&nbsp;arrow&nbsp;that&nbsp;is&nbsp;defined&nbsp;in&nbsp;display&nbsp;space&nbsp;and&nbsp;has&nbsp;a&nbsp;tip&nbsp;at<br>
*x1*,&nbsp;*y1*&nbsp;and&nbsp;a&nbsp;base&nbsp;at&nbsp;*x2*,&nbsp;*y2*.<br>&nbsp;</tt></td></tr>
<tr><td>&nbsp;</td>
<td width="100%"><dl><dt>Method resolution order:</dt>
<dd><a href="matplotlib.patches.html#YAArrow">YAArrow</a></dd>
<dd><a href="matplotlib.patches.html#Patch">Patch</a></dd>
<dd><a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a></dd>
<dd><a href="__builtin__.html#object">__builtin__.object</a></dd>
</dl>
<hr>
Methods defined here:<br>
<dl><dt><a name="YAArrow-__init__"><strong>__init__</strong></a>(self, figure, xytip, xybase, width<font color="#909090">=4</font>, frac<font color="#909090">=0.10000000000000001</font>, headwidth<font color="#909090">=12</font>, **kwargs)</dt><dd><tt>Constructor&nbsp;arguments:<br>
&nbsp;<br>
*xytip*<br>
&nbsp;&nbsp;(*x*,&nbsp;*y*)&nbsp;location&nbsp;of&nbsp;arrow&nbsp;tip<br>
&nbsp;<br>
*xybase*<br>
&nbsp;&nbsp;(*x*,&nbsp;*y*)&nbsp;location&nbsp;the&nbsp;arrow&nbsp;base&nbsp;mid&nbsp;point<br>
&nbsp;<br>
*figure*<br>
&nbsp;&nbsp;The&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance<br>
&nbsp;&nbsp;(fig.dpi)<br>
&nbsp;<br>
*width*<br>
&nbsp;&nbsp;The&nbsp;width&nbsp;of&nbsp;the&nbsp;arrow&nbsp;in&nbsp;points<br>
&nbsp;<br>
*frac*<br>
&nbsp;&nbsp;The&nbsp;fraction&nbsp;of&nbsp;the&nbsp;arrow&nbsp;length&nbsp;occupied&nbsp;by&nbsp;the&nbsp;head<br>
&nbsp;<br>
*headwidth*<br>
&nbsp;&nbsp;The&nbsp;width&nbsp;of&nbsp;the&nbsp;base&nbsp;of&nbsp;the&nbsp;arrow&nbsp;head&nbsp;in&nbsp;points<br>
&nbsp;<br>
Valid&nbsp;kwargs&nbsp;are:<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Property&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;antialiased&nbsp;or&nbsp;aa&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_box&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform.Bbox&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clip_on&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgecolor&nbsp;or&nbsp;ec&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;facecolor&nbsp;or&nbsp;fc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;matplotlib&nbsp;color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;figure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.figure.Figure&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hatch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unknown<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linewidth&nbsp;or&nbsp;lw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lod&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;matplotlib.transform&nbsp;transformation&nbsp;instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[True&nbsp;|&nbsp;False]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;any&nbsp;number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=================&nbsp;&nbsp;&nbsp;==============================================</tt></dd></dl>

<dl><dt><a name="YAArrow-__str__"><strong>__str__</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_patch_transform"><strong>get_patch_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_path"><strong>get_path</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-getpoints"><strong>getpoints</strong></a>(self, x1, y1, x2, y2, k)</dt><dd><tt>For&nbsp;line&nbsp;segment&nbsp;defined&nbsp;by&nbsp;(*x1*,&nbsp;*y1*)&nbsp;and&nbsp;(*x2*,&nbsp;*y2*)<br>
return&nbsp;the&nbsp;points&nbsp;on&nbsp;the&nbsp;line&nbsp;that&nbsp;is&nbsp;perpendicular&nbsp;to&nbsp;the<br>
line&nbsp;and&nbsp;intersects&nbsp;(*x2*,&nbsp;*y2*)&nbsp;and&nbsp;the&nbsp;distance&nbsp;from&nbsp;(*x2*,<br>
*y2*)&nbsp;of&nbsp;the&nbsp;returned&nbsp;points&nbsp;is&nbsp;*k*.</tt></dd></dl>

<hr>
Methods inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><a name="YAArrow-contains"><strong>contains</strong></a>(self, mouseevent)</dt><dd><tt>Test&nbsp;whether&nbsp;the&nbsp;mouse&nbsp;event&nbsp;occurred&nbsp;in&nbsp;the&nbsp;patch.<br>
&nbsp;<br>
Returns&nbsp;T/F,&nbsp;{}</tt></dd></dl>

<dl><dt><a name="YAArrow-draw"><strong>draw</strong></a>(self, renderer)</dt></dl>

<dl><dt><a name="YAArrow-get_aa"><strong>get_aa</strong></a> = get_antialiased(self)</dt></dl>

<dl><dt><a name="YAArrow-get_antialiased"><strong>get_antialiased</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_data_transform"><strong>get_data_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_ec"><strong>get_ec</strong></a> = get_edgecolor(self)</dt></dl>

<dl><dt><a name="YAArrow-get_edgecolor"><strong>get_edgecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_extents"><strong>get_extents</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_facecolor"><strong>get_facecolor</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_fc"><strong>get_fc</strong></a> = get_facecolor(self)</dt></dl>

<dl><dt><a name="YAArrow-get_fill"><strong>get_fill</strong></a>(self)</dt><dd><tt>return&nbsp;whether&nbsp;fill&nbsp;is&nbsp;set</tt></dd></dl>

<dl><dt><a name="YAArrow-get_hatch"><strong>get_hatch</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;current&nbsp;hatching&nbsp;pattern</tt></dd></dl>

<dl><dt><a name="YAArrow-get_linestyle"><strong>get_linestyle</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_linewidth"><strong>get_linewidth</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_ls"><strong>get_ls</strong></a> = get_linestyle(self)</dt></dl>

<dl><dt><a name="YAArrow-get_lw"><strong>get_lw</strong></a> = get_linewidth(self)</dt></dl>

<dl><dt><a name="YAArrow-get_transform"><strong>get_transform</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_verts"><strong>get_verts</strong></a>(self)</dt><dd><tt>Return&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;vertices&nbsp;used&nbsp;in&nbsp;this&nbsp;patch<br>
&nbsp;<br>
If&nbsp;the&nbsp;patch&nbsp;contains&nbsp;Bézier&nbsp;curves,&nbsp;the&nbsp;curves&nbsp;will&nbsp;be<br>
interpolated&nbsp;by&nbsp;line&nbsp;segments.&nbsp;&nbsp;To&nbsp;access&nbsp;the&nbsp;curves&nbsp;as<br>
curves,&nbsp;use&nbsp;:meth:`get_path`.</tt></dd></dl>

<dl><dt><a name="YAArrow-get_window_extent"><strong>get_window_extent</strong></a>(self, renderer<font color="#909090">=None</font>)</dt></dl>

<dl><dt><a name="YAArrow-set_aa"><strong>set_aa</strong></a> = set_antialiased(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="YAArrow-set_antialiased"><strong>set_antialiased</strong></a>(self, aa)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;use&nbsp;antialiased&nbsp;rendering<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]&nbsp;&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="YAArrow-set_ec"><strong>set_ec</strong></a> = set_edgecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="YAArrow-set_edgecolor"><strong>set_edgecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;edge&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="YAArrow-set_facecolor"><strong>set_facecolor</strong></a>(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="YAArrow-set_fc"><strong>set_fc</strong></a> = set_facecolor(self, color)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;face&nbsp;color<br>
&nbsp;<br>
ACCEPTS:&nbsp;mpl&nbsp;color&nbsp;spec,&nbsp;or&nbsp;None&nbsp;for&nbsp;default,&nbsp;or&nbsp;'none'&nbsp;for&nbsp;no&nbsp;color</tt></dd></dl>

<dl><dt><a name="YAArrow-set_fill"><strong>set_fill</strong></a>(self, b)</dt><dd><tt>Set&nbsp;whether&nbsp;to&nbsp;fill&nbsp;the&nbsp;patch<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="YAArrow-set_hatch"><strong>set_hatch</strong></a>(self, h)</dt><dd><tt>Set&nbsp;the&nbsp;hatching&nbsp;pattern<br>
&nbsp;<br>
hatch&nbsp;can&nbsp;be&nbsp;one&nbsp;of::<br>
&nbsp;<br>
&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;-&nbsp;diagonal&nbsp;hatching<br>
&nbsp;&nbsp;\&nbsp;&nbsp;&nbsp;-&nbsp;back&nbsp;diagonal<br>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;-&nbsp;vertical<br>
&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;-&nbsp;horizontal<br>
&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;-&nbsp;crossed<br>
&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;-&nbsp;crossed&nbsp;diagonal<br>
&nbsp;<br>
Letters&nbsp;can&nbsp;be&nbsp;combined,&nbsp;in&nbsp;which&nbsp;case&nbsp;all&nbsp;the&nbsp;specified<br>
hatchings&nbsp;are&nbsp;done.&nbsp;&nbsp;If&nbsp;same&nbsp;letter&nbsp;repeats,&nbsp;it&nbsp;increases&nbsp;the<br>
density&nbsp;of&nbsp;hatching&nbsp;in&nbsp;that&nbsp;direction.<br>
&nbsp;<br>
CURRENT&nbsp;LIMITATIONS:<br>
&nbsp;<br>
1.&nbsp;Hatching&nbsp;is&nbsp;supported&nbsp;in&nbsp;the&nbsp;PostScript&nbsp;backend&nbsp;only.<br>
&nbsp;<br>
2.&nbsp;Hatching&nbsp;is&nbsp;done&nbsp;with&nbsp;solid&nbsp;black&nbsp;lines&nbsp;of&nbsp;width&nbsp;0.</tt></dd></dl>

<dl><dt><a name="YAArrow-set_linestyle"><strong>set_linestyle</strong></a>(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="YAArrow-set_linewidth"><strong>set_linewidth</strong></a>(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="YAArrow-set_ls"><strong>set_ls</strong></a> = set_linestyle(self, ls)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linestyle<br>
&nbsp;<br>
ACCEPTS:&nbsp;['solid'&nbsp;|&nbsp;'dashed'&nbsp;|&nbsp;'dashdot'&nbsp;|&nbsp;'dotted']</tt></dd></dl>

<dl><dt><a name="YAArrow-set_lw"><strong>set_lw</strong></a> = set_linewidth(self, w)</dt><dd><tt>Set&nbsp;the&nbsp;patch&nbsp;linewidth&nbsp;in&nbsp;points<br>
&nbsp;<br>
ACCEPTS:&nbsp;float&nbsp;or&nbsp;None&nbsp;for&nbsp;default</tt></dd></dl>

<dl><dt><a name="YAArrow-update_from"><strong>update_from</strong></a>(self, other)</dt></dl>

<hr>
Data and other attributes inherited from <a href="matplotlib.patches.html#Patch">Patch</a>:<br>
<dl><dt><strong>zorder</strong> = 1</dl>

<hr>
Methods inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><a name="YAArrow-add_callback"><strong>add_callback</strong></a>(self, func)</dt></dl>

<dl><dt><a name="YAArrow-convert_xunits"><strong>convert_xunits</strong></a>(self, x)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;xaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*x*&nbsp;using&nbsp;xaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="YAArrow-convert_yunits"><strong>convert_yunits</strong></a>(self, y)</dt><dd><tt>for&nbsp;artists&nbsp;in&nbsp;an&nbsp;axes,&nbsp;if&nbsp;the&nbsp;yaxis&nbsp;as&nbsp;units&nbsp;support,<br>
convert&nbsp;*y*&nbsp;using&nbsp;yaxis&nbsp;unit&nbsp;type</tt></dd></dl>

<dl><dt><a name="YAArrow-findobj"><strong>findobj</strong></a>(self, match<font color="#909090">=None</font>)</dt><dd><tt>pyplot&nbsp;signature:<br>
&nbsp;&nbsp;<a href="#YAArrow-findobj">findobj</a>(o=gcf(),&nbsp;match=None)&nbsp;<br>
&nbsp;<br>
recursively&nbsp;find&nbsp;all&nbsp;:class:matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;instances<br>
contained&nbsp;in&nbsp;self<br>
&nbsp;<br>
*match*&nbsp;can&nbsp;be<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;None:&nbsp;return&nbsp;all&nbsp;objects&nbsp;contained&nbsp;in&nbsp;artist&nbsp;(including&nbsp;artist)<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;function&nbsp;with&nbsp;signature&nbsp;``boolean&nbsp;=&nbsp;match(artist)``&nbsp;used&nbsp;to&nbsp;filter&nbsp;matches<br>
&nbsp;<br>
&nbsp;&nbsp;-&nbsp;class&nbsp;instance:&nbsp;eg&nbsp;Line2D.&nbsp;&nbsp;Only&nbsp;return&nbsp;artists&nbsp;of&nbsp;class&nbsp;type<br>
&nbsp;<br>
..&nbsp;plot::&nbsp;../mpl_examples/pylab_examples/findobj_demo.py</tt></dd></dl>

<dl><dt><a name="YAArrow-get_alpha"><strong>get_alpha</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on&nbsp;all<br>
backends</tt></dd></dl>

<dl><dt><a name="YAArrow-get_animated"><strong>get_animated</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;animated&nbsp;state</tt></dd></dl>

<dl><dt><a name="YAArrow-get_axes"><strong>get_axes</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;axes&nbsp;instance&nbsp;the&nbsp;artist&nbsp;resides&nbsp;in,&nbsp;or&nbsp;*None*</tt></dd></dl>

<dl><dt><a name="YAArrow-get_clip_box"><strong>get_clip_box</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clipbox</tt></dd></dl>

<dl><dt><a name="YAArrow-get_clip_on"><strong>get_clip_on</strong></a>(self)</dt><dd><tt>Return&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping</tt></dd></dl>

<dl><dt><a name="YAArrow-get_clip_path"><strong>get_clip_path</strong></a>(self)</dt><dd><tt>Return&nbsp;artist&nbsp;clip&nbsp;path</tt></dd></dl>

<dl><dt><a name="YAArrow-get_contains"><strong>get_contains</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;_contains&nbsp;test&nbsp;used&nbsp;by&nbsp;the&nbsp;artist,&nbsp;or&nbsp;*None*&nbsp;for&nbsp;default.</tt></dd></dl>

<dl><dt><a name="YAArrow-get_figure"><strong>get_figure</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the<br>
artist&nbsp;belongs&nbsp;to.</tt></dd></dl>

<dl><dt><a name="YAArrow-get_label"><strong>get_label</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-get_picker"><strong>get_picker</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;Pickeration&nbsp;instance&nbsp;used&nbsp;by&nbsp;this&nbsp;artist</tt></dd></dl>

<dl><dt><a name="YAArrow-get_transformed_clip_path_and_affine"><strong>get_transformed_clip_path_and_affine</strong></a>(self)</dt><dd><tt>Return&nbsp;the&nbsp;clip&nbsp;path&nbsp;with&nbsp;the&nbsp;non-affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation&nbsp;applied,&nbsp;and&nbsp;the&nbsp;remaining&nbsp;affine&nbsp;part&nbsp;of&nbsp;its<br>
transformation.</tt></dd></dl>

<dl><dt><a name="YAArrow-get_visible"><strong>get_visible</strong></a>(self)</dt><dd><tt>return&nbsp;the&nbsp;artist's&nbsp;visiblity</tt></dd></dl>

<dl><dt><a name="YAArrow-get_zorder"><strong>get_zorder</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-have_units"><strong>have_units</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;units&nbsp;are&nbsp;set&nbsp;on&nbsp;the&nbsp;x&nbsp;or&nbsp;y&nbsp;axes</tt></dd></dl>

<dl><dt><a name="YAArrow-hitlist"><strong>hitlist</strong></a>(self, event)</dt><dd><tt>List&nbsp;the&nbsp;children&nbsp;of&nbsp;the&nbsp;artist&nbsp;which&nbsp;contain&nbsp;the&nbsp;mouse&nbsp;event</tt></dd></dl>

<dl><dt><a name="YAArrow-is_figure_set"><strong>is_figure_set</strong></a>(self)</dt></dl>

<dl><dt><a name="YAArrow-is_transform_set"><strong>is_transform_set</strong></a>(self)</dt><dd><tt><a href="matplotlib.artist.html#Artist">Artist</a>&nbsp;has&nbsp;transform&nbsp;explicity&nbsp;let</tt></dd></dl>

<dl><dt><a name="YAArrow-pchanged"><strong>pchanged</strong></a>(self)</dt><dd><tt>fire&nbsp;event&nbsp;when&nbsp;property&nbsp;changed</tt></dd></dl>

<dl><dt><a name="YAArrow-pick"><strong>pick</strong></a>(self, mouseevent)</dt><dd><tt>call&nbsp;signature::<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#YAArrow-pick">pick</a>(mouseevent)<br>
&nbsp;<br>
each&nbsp;child&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;*mouseevent*&nbsp;is&nbsp;over<br>
the&nbsp;artist&nbsp;and&nbsp;the&nbsp;artist&nbsp;has&nbsp;picker&nbsp;set</tt></dd></dl>

<dl><dt><a name="YAArrow-pickable"><strong>pickable</strong></a>(self)</dt><dd><tt>return&nbsp;*True*&nbsp;if&nbsp;self&nbsp;is&nbsp;pickable</tt></dd></dl>

<dl><dt><a name="YAArrow-remove"><strong>remove</strong></a>(self)</dt><dd><tt>Remove&nbsp;the&nbsp;artist&nbsp;from&nbsp;the&nbsp;figure&nbsp;if&nbsp;possible.&nbsp;&nbsp;The&nbsp;effect<br>
will&nbsp;not&nbsp;be&nbsp;visible&nbsp;until&nbsp;the&nbsp;figure&nbsp;is&nbsp;redrawn,&nbsp;e.g.,&nbsp;with<br>
:meth:`matplotlib.axes.Axes.draw_idle`.&nbsp;&nbsp;Call<br>
:meth:`matplotlib.axes.Axes.relim`&nbsp;to&nbsp;update&nbsp;the&nbsp;axes&nbsp;limits<br>
if&nbsp;desired.<br>
&nbsp;<br>
Note:&nbsp;:meth:`~matplotlib.axes.Axes.relim`&nbsp;will&nbsp;not&nbsp;see<br>
collections&nbsp;even&nbsp;if&nbsp;the&nbsp;collection&nbsp;was&nbsp;added&nbsp;to&nbsp;axes&nbsp;with<br>
*autolim*&nbsp;=&nbsp;True.<br>
&nbsp;<br>
Note:&nbsp;there&nbsp;is&nbsp;no&nbsp;support&nbsp;for&nbsp;removing&nbsp;the&nbsp;artist's&nbsp;legend&nbsp;entry.</tt></dd></dl>

<dl><dt><a name="YAArrow-remove_callback"><strong>remove_callback</strong></a>(self, oid)</dt></dl>

<dl><dt><a name="YAArrow-set"><strong>set</strong></a>(self, **kwargs)</dt><dd><tt>A&nbsp;tkstyle&nbsp;set&nbsp;command,&nbsp;pass&nbsp;*kwargs*&nbsp;to&nbsp;set&nbsp;properties</tt></dd></dl>

<dl><dt><a name="YAArrow-set_alpha"><strong>set_alpha</strong></a>(self, alpha)</dt><dd><tt>Set&nbsp;the&nbsp;alpha&nbsp;value&nbsp;used&nbsp;for&nbsp;blending&nbsp;-&nbsp;not&nbsp;supported&nbsp;on<br>
all&nbsp;backends<br>
&nbsp;<br>
ACCEPTS:&nbsp;float</tt></dd></dl>

<dl><dt><a name="YAArrow-set_animated"><strong>set_animated</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;animation&nbsp;state<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="YAArrow-set_axes"><strong>set_axes</strong></a>(self, axes)</dt><dd><tt>set&nbsp;the&nbsp;axes&nbsp;instance&nbsp;in&nbsp;which&nbsp;the&nbsp;artist&nbsp;resides,&nbsp;if&nbsp;any<br>
&nbsp;<br>
ACCEPTS:&nbsp;an&nbsp;axes&nbsp;instance</tt></dd></dl>

<dl><dt><a name="YAArrow-set_clip_box"><strong>set_clip_box</strong></a>(self, clipbox)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;Bbox<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.transform.Bbox`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="YAArrow-set_clip_on"><strong>set_clip_on</strong></a>(self, b)</dt><dd><tt>Set&nbsp;&nbsp;whether&nbsp;artist&nbsp;uses&nbsp;clipping<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="YAArrow-set_clip_path"><strong>set_clip_path</strong></a>(self, path, transform<font color="#909090">=None</font>)</dt><dd><tt>Set&nbsp;the&nbsp;artist's&nbsp;clip&nbsp;path,&nbsp;which&nbsp;may&nbsp;be:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;(or&nbsp;subclass)&nbsp;instance<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance,&nbsp;in&nbsp;which&nbsp;case<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;an&nbsp;optional&nbsp;:class:`~matplotlib.transforms.Transform`<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;may&nbsp;be&nbsp;provided,&nbsp;which&nbsp;will&nbsp;be&nbsp;applied&nbsp;to&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;before&nbsp;using&nbsp;it&nbsp;for&nbsp;clipping.<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*,&nbsp;to&nbsp;remove&nbsp;the&nbsp;clipping&nbsp;path<br>
&nbsp;<br>
For&nbsp;efficiency,&nbsp;if&nbsp;the&nbsp;path&nbsp;happens&nbsp;to&nbsp;be&nbsp;an&nbsp;axis-aligned<br>
rectangle,&nbsp;this&nbsp;method&nbsp;will&nbsp;set&nbsp;the&nbsp;clipping&nbsp;box&nbsp;to&nbsp;the<br>
corresponding&nbsp;rectangle&nbsp;and&nbsp;set&nbsp;the&nbsp;clipping&nbsp;path&nbsp;to&nbsp;*None*.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`~matplotlib.path.Path`&nbsp;instance&nbsp;and&nbsp;a<br>
:class:`~matplotlib.transforms.Transform`&nbsp;instance,&nbsp;a<br>
:class:`~matplotlib.patches.<a href="#Patch">Patch</a>`&nbsp;instance,&nbsp;or&nbsp;*None*.</tt></dd></dl>

<dl><dt><a name="YAArrow-set_contains"><strong>set_contains</strong></a>(self, picker)</dt><dd><tt>Replace&nbsp;the&nbsp;contains&nbsp;test&nbsp;used&nbsp;by&nbsp;this&nbsp;artist.&nbsp;The&nbsp;new&nbsp;picker&nbsp;should<br>
be&nbsp;a&nbsp;callable&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
If&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;*props*<br>
is&nbsp;a&nbsp;dictionary&nbsp;of&nbsp;properties&nbsp;you&nbsp;want&nbsp;returned&nbsp;with&nbsp;the&nbsp;contains&nbsp;test.</tt></dd></dl>

<dl><dt><a name="YAArrow-set_figure"><strong>set_figure</strong></a>(self, fig)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.figure.Figure`&nbsp;instance&nbsp;the&nbsp;artist<br>
belongs&nbsp;to.<br>
&nbsp;<br>
ACCEPTS:&nbsp;a&nbsp;:class:`matplotlib.figure.Figure`&nbsp;instance</tt></dd></dl>

<dl><dt><a name="YAArrow-set_label"><strong>set_label</strong></a>(self, s)</dt><dd><tt>Set&nbsp;the&nbsp;line&nbsp;label&nbsp;to&nbsp;*s*&nbsp;for&nbsp;auto&nbsp;legend<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;string</tt></dd></dl>

<dl><dt><a name="YAArrow-set_lod"><strong>set_lod</strong></a>(self, on)</dt><dd><tt>Set&nbsp;Level&nbsp;of&nbsp;Detail&nbsp;on&nbsp;or&nbsp;off.&nbsp;&nbsp;If&nbsp;on,&nbsp;the&nbsp;artists&nbsp;may&nbsp;examine<br>
things&nbsp;like&nbsp;the&nbsp;pixel&nbsp;width&nbsp;of&nbsp;the&nbsp;axes&nbsp;and&nbsp;draw&nbsp;a&nbsp;subset&nbsp;of<br>
their&nbsp;contents&nbsp;accordingly<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="YAArrow-set_picker"><strong>set_picker</strong></a>(self, picker)</dt><dd><tt>set&nbsp;the&nbsp;epsilon&nbsp;for&nbsp;picking&nbsp;used&nbsp;by&nbsp;this&nbsp;artist<br>
&nbsp;<br>
*picker*&nbsp;can&nbsp;be&nbsp;one&nbsp;of&nbsp;the&nbsp;following:<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;*None*:&nbsp;picking&nbsp;is&nbsp;disabled&nbsp;for&nbsp;this&nbsp;artist&nbsp;(default)<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;boolean:&nbsp;if&nbsp;*True*&nbsp;then&nbsp;picking&nbsp;will&nbsp;be&nbsp;enabled&nbsp;and&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist&nbsp;will&nbsp;fire&nbsp;a&nbsp;pick&nbsp;event&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;float:&nbsp;if&nbsp;picker&nbsp;is&nbsp;a&nbsp;number&nbsp;it&nbsp;is&nbsp;interpreted&nbsp;as&nbsp;an<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;tolerance&nbsp;in&nbsp;points&nbsp;and&nbsp;the&nbsp;artist&nbsp;will&nbsp;fire<br>
&nbsp;&nbsp;&nbsp;&nbsp;off&nbsp;an&nbsp;event&nbsp;if&nbsp;it's&nbsp;data&nbsp;is&nbsp;within&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;mouse<br>
&nbsp;&nbsp;&nbsp;&nbsp;event.&nbsp;&nbsp;For&nbsp;some&nbsp;artists&nbsp;like&nbsp;lines&nbsp;and&nbsp;patch&nbsp;collections,<br>
&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;artist&nbsp;may&nbsp;provide&nbsp;additional&nbsp;data&nbsp;to&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;&nbsp;&nbsp;&nbsp;that&nbsp;is&nbsp;generated,&nbsp;e.g.&nbsp;the&nbsp;indices&nbsp;of&nbsp;the&nbsp;data&nbsp;within<br>
&nbsp;&nbsp;&nbsp;&nbsp;epsilon&nbsp;of&nbsp;the&nbsp;pick&nbsp;event<br>
&nbsp;<br>
&nbsp;&nbsp;*&nbsp;A&nbsp;function:&nbsp;if&nbsp;picker&nbsp;is&nbsp;callable,&nbsp;it&nbsp;is&nbsp;a&nbsp;user&nbsp;supplied<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;which&nbsp;determines&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;hit&nbsp;by&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;mouse&nbsp;event::<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hit,&nbsp;props&nbsp;=&nbsp;picker(artist,&nbsp;mouseevent)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;to&nbsp;determine&nbsp;the&nbsp;hit&nbsp;test.&nbsp;&nbsp;if&nbsp;the&nbsp;mouse&nbsp;event&nbsp;is&nbsp;over&nbsp;the<br>
&nbsp;&nbsp;&nbsp;&nbsp;artist,&nbsp;return&nbsp;*hit=True*&nbsp;and&nbsp;props&nbsp;is&nbsp;a&nbsp;dictionary&nbsp;of<br>
&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;you&nbsp;want&nbsp;added&nbsp;to&nbsp;the&nbsp;PickEvent&nbsp;attributes.<br>
&nbsp;<br>
ACCEPTS:&nbsp;[None|float|boolean|callable]</tt></dd></dl>

<dl><dt><a name="YAArrow-set_transform"><strong>set_transform</strong></a>(self, t)</dt><dd><tt>Set&nbsp;the&nbsp;:class:`~matplotlib.transforms.Transform`&nbsp;instance<br>
used&nbsp;by&nbsp;this&nbsp;artist.</tt></dd></dl>

<dl><dt><a name="YAArrow-set_visible"><strong>set_visible</strong></a>(self, b)</dt><dd><tt>set&nbsp;the&nbsp;artist's&nbsp;visiblity<br>
&nbsp;<br>
ACCEPTS:&nbsp;[True&nbsp;|&nbsp;False]</tt></dd></dl>

<dl><dt><a name="YAArrow-set_zorder"><strong>set_zorder</strong></a>(self, level)</dt><dd><tt>Set&nbsp;the&nbsp;zorder&nbsp;for&nbsp;the&nbsp;artist<br>
&nbsp;<br>
ACCEPTS:&nbsp;any&nbsp;number</tt></dd></dl>

<dl><dt><a name="YAArrow-update"><strong>update</strong></a>(self, props)</dt></dl>

<hr>
Data descriptors inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<hr>
Data and other attributes inherited from <a href="matplotlib.artist.html#Artist">matplotlib.artist.Artist</a>:<br>
<dl><dt><strong>aname</strong> = 'Artist'</dl>

</td></tr></table></td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#eeaa77">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Functions</strong></big></font></td></tr>
    
<tr><td bgcolor="#eeaa77"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><dl><dt><a name="-bbox_artist"><strong>bbox_artist</strong></a>(artist, renderer, props<font color="#909090">=None</font>, fill<font color="#909090">=True</font>)</dt><dd><tt>This&nbsp;is&nbsp;a&nbsp;debug&nbsp;function&nbsp;to&nbsp;draw&nbsp;a&nbsp;rectangle&nbsp;around&nbsp;the&nbsp;bounding<br>
box&nbsp;returned&nbsp;by<br>
:meth:`~matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>.get_window_extent`&nbsp;of&nbsp;an&nbsp;artist,<br>
to&nbsp;test&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;returning&nbsp;the&nbsp;correct&nbsp;bbox.<br>
&nbsp;<br>
*props*&nbsp;is&nbsp;a&nbsp;dict&nbsp;of&nbsp;rectangle&nbsp;props&nbsp;with&nbsp;the&nbsp;additional&nbsp;property<br>
'pad'&nbsp;that&nbsp;sets&nbsp;the&nbsp;padding&nbsp;around&nbsp;the&nbsp;bbox&nbsp;in&nbsp;points.</tt></dd></dl>
 <dl><dt><a name="-draw_bbox"><strong>draw_bbox</strong></a>(bbox, renderer, color<font color="#909090">='k'</font>, trans<font color="#909090">=None</font>)</dt><dd><tt>This&nbsp;is&nbsp;a&nbsp;debug&nbsp;function&nbsp;to&nbsp;draw&nbsp;a&nbsp;rectangle&nbsp;around&nbsp;the&nbsp;bounding<br>
box&nbsp;returned&nbsp;by<br>
:meth:`~matplotlib.artist.<a href="matplotlib.artist.html#Artist">Artist</a>.get_window_extent`&nbsp;of&nbsp;an&nbsp;artist,<br>
to&nbsp;test&nbsp;whether&nbsp;the&nbsp;artist&nbsp;is&nbsp;returning&nbsp;the&nbsp;correct&nbsp;bbox.</tt></dd></dl>
</td></tr></table><p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#55aa55">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#ffffff" face="helvetica, arial"><big><strong>Data</strong></big></font></td></tr>
    
<tr><td bgcolor="#55aa55"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%"><strong>division</strong> = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)<br>
<strong>k</strong> = 'Arc'<br>
<strong>patchdoc</strong> = '<font color="#c040c0">\n</font>  ===========   ===============================...================================================<font color="#c040c0">\n</font>'</td></tr></table>
@footer@